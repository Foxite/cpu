pong.pa2:2 == 0 <.define screenWidth Constant 64>
pong.pa2:3 == 0 <.define screenHeight Constant 64>
pong.pa2:5 == 0 <.define display Constant 16384>
pong.pa2:6 == 0 <.define displaySize Constant 4096>
pong.pa2:7 == 0 <.define displayEnd Constant 20480>
pong.pa2:8 == 0 <.define _dev Constant 24576>
pong.pa2:9 == 0 <.define devbutton Constant 24576>
pong.pa2:10 == 0 <.define devframe Constant 24577>
pong.pa2:11 == 0 <.define devmidi Constant 24578>
pong.pa2:12 == 0 <.define highZaddress Constant 65535>
pong.pa2:15 == 0 <.define colorBlack Constant 1>
pong.pa2:16 == 0 <.define colorWhite Constant 0>
pong.pa2:17 == 0 <.define colorOrange Constant 8>
pong.pa2:18 == 0 <.define colorPink Constant 9>
pong.pa2:23 == 0 <.define buttonLeftUp Constant 128>
pong.pa2:24 == 0 <.define buttonLeftDown Constant 64>
pong.pa2:25 == 0 <.define buttonRightUp Constant 8>
pong.pa2:26 == 0 <.define buttonRightDown Constant 1>
pong.pa2:30 == 0 <.define paddleHeight Constant 8>
pong.pa2:31 == 0 <.define paddlePadding Constant 8>
pong.pa2:32 == 0 <.define colorBackground Constant 1>
pong.pa2:33 == 0 <.define colorPaddleLeft Constant 8>
pong.pa2:34 == 0 <.define colorPaddleRight Constant 9>
pong.pa2:37 == 0 <.define paddleLeftX Constant 8>
pong.pa2:38 == 0 <.define paddleRightX Constant 56>
pong.pa2:39 == 0 <.define paddleMaxY Constant 56>
pong.pa2:43 == 0 <.define paddleLeftY Constant 16>
pong.pa2:44 == 0 <.define paddleRightY Constant 17>
pong.pa2:45 == 0 <.define ballX Constant 18>
pong.pa2:46 == 0 <.define ballY Constant 19>
pong.pa2:47 == 0 <.define ballSpeedX Constant 20>
pong.pa2:48 == 0 <.define ballSpeedY Constant 21>
pong.pa2:49 == 0 <.define ballColor Constant 22>
pong.pa2:51 == 0 <.define scoreLeft Constant 23>
pong.pa2:52 == 0 <.define scoreRight Constant 24>
pong.pa2:54 == 0 <.define inputLeftDir Constant 25>
pong.pa2:55 == 0 <.define inputRightDir Constant 26>
pong.pa2:61 == 0 <@init_stack >
	init_stack:7 == 0 <ldc Register a, Constant 256>
	init_stack:8 == 1 <ldc Register b, Constant 0>
	init_stack:9 == 2 <stb Register b, Register a>
pong.pa2:63 == 3 <@call Constant 686, Constant 0>
	call:11 == 3 <.define functionLabel Constant 686>
	call:12 == 3 <.define argcount Constant 0>
	call:15 == 3 <@push_mem Constant 2>
		push_mem:6 == 3 <.define addr Register b>
		push_mem:7 == 3 <.define value Register b>
		push_mem:9 == 3 <@ldc Register b, Constant 2>
			ldc:1 == 3 <.define writeReg Register b>
			ldc:2 == 3 <.define const Constant 2>
			ldc:4 == 3 <ldc Register a, Constant 0>
			ldc:5 == 4 <ldc Register b, Constant 12>
			ldc:6 == 5 <shl Register a, Register a, Register b>
			ldc:7 == 6 <ldc Register b, Constant 2>
			ldc:8 == 7 <or Register b, Register a, Register b>
		push_mem:10 == 8 <ldb Register b, Register b>
		push_mem:12 == 9 <@push_reg Register b>
			push_reg:10 == 9 <.define registerToPush Register b>
			push_reg:13 == 9 <ldc Register a, Constant 0>
			push_reg:14 == 10 <ldb Register a, Register a>
			push_reg:15 == 11 <stb Register a, Register b>
			push_reg:19 == 12 <ldc Register b, Constant 1>
			push_reg:20 == 13 <add Register a, Register a, Register b>
			push_reg:21 == 14 <ldc Register b, Constant 0>
			push_reg:22 == 15 <stb Register b, Register a>
	call:16 == 16 <@push_mem Constant 3>
		push_mem:6 == 16 <.define addr Register b>
		push_mem:7 == 16 <.define value Register b>
		push_mem:9 == 16 <@ldc Register b, Constant 3>
			ldc:1 == 16 <.define writeReg Register b>
			ldc:2 == 16 <.define const Constant 3>
			ldc:4 == 16 <ldc Register a, Constant 0>
			ldc:5 == 17 <ldc Register b, Constant 12>
			ldc:6 == 18 <shl Register a, Register a, Register b>
			ldc:7 == 19 <ldc Register b, Constant 3>
			ldc:8 == 20 <or Register b, Register a, Register b>
		push_mem:10 == 21 <ldb Register b, Register b>
		push_mem:12 == 22 <@push_reg Register b>
			push_reg:10 == 22 <.define registerToPush Register b>
			push_reg:13 == 22 <ldc Register a, Constant 0>
			push_reg:14 == 23 <ldb Register a, Register a>
			push_reg:15 == 24 <stb Register a, Register b>
			push_reg:19 == 25 <ldc Register b, Constant 1>
			push_reg:20 == 26 <add Register a, Register a, Register b>
			push_reg:21 == 27 <ldc Register b, Constant 0>
			push_reg:22 == 28 <stb Register b, Register a>
	call:19 == 29 <@push_const Constant 141>
		push_const:6 == 29 <.define constantToPush Constant 141>
		push_const:12 == 29 <@ldc Register b, Constant 141>
			ldc:1 == 29 <.define writeReg Register b>
			ldc:2 == 29 <.define const Constant 141>
			ldc:4 == 29 <ldc Register a, Constant 0>
			ldc:5 == 30 <ldc Register b, Constant 12>
			ldc:6 == 31 <shl Register a, Register a, Register b>
			ldc:7 == 32 <ldc Register b, Constant 141>
			ldc:8 == 33 <or Register b, Register a, Register b>
		push_const:14 == 34 <@push_reg Register b>
			push_reg:10 == 34 <.define registerToPush Register b>
			push_reg:13 == 34 <ldc Register a, Constant 0>
			push_reg:14 == 35 <ldb Register a, Register a>
			push_reg:15 == 36 <stb Register a, Register b>
			push_reg:19 == 37 <ldc Register b, Constant 1>
			push_reg:20 == 38 <add Register a, Register a, Register b>
			push_reg:21 == 39 <ldc Register b, Constant 0>
			push_reg:22 == 40 <stb Register b, Register a>
	call:24 == 41 <@push_mem Constant 0>
		push_mem:6 == 41 <.define addr Register b>
		push_mem:7 == 41 <.define value Register b>
		push_mem:9 == 41 <@ldc Register b, Constant 0>
			ldc:1 == 41 <.define writeReg Register b>
			ldc:2 == 41 <.define const Constant 0>
			ldc:4 == 41 <ldc Register a, Constant 0>
			ldc:5 == 42 <ldc Register b, Constant 12>
			ldc:6 == 43 <shl Register a, Register a, Register b>
			ldc:7 == 44 <ldc Register b, Constant 0>
			ldc:8 == 45 <or Register b, Register a, Register b>
		push_mem:10 == 46 <ldb Register b, Register b>
		push_mem:12 == 47 <@push_reg Register b>
			push_reg:10 == 47 <.define registerToPush Register b>
			push_reg:13 == 47 <ldc Register a, Constant 0>
			push_reg:14 == 48 <ldb Register a, Register a>
			push_reg:15 == 49 <stb Register a, Register b>
			push_reg:19 == 50 <ldc Register b, Constant 1>
			push_reg:20 == 51 <add Register a, Register a, Register b>
			push_reg:21 == 52 <ldc Register b, Constant 0>
			push_reg:22 == 53 <stb Register b, Register a>
	call:26 == 54 <@push_const Constant 3>
		push_const:6 == 54 <.define constantToPush Constant 3>
		push_const:12 == 54 <@ldc Register b, Constant 3>
			ldc:1 == 54 <.define writeReg Register b>
			ldc:2 == 54 <.define const Constant 3>
			ldc:4 == 54 <ldc Register a, Constant 0>
			ldc:5 == 55 <ldc Register b, Constant 12>
			ldc:6 == 56 <shl Register a, Register a, Register b>
			ldc:7 == 57 <ldc Register b, Constant 3>
			ldc:8 == 58 <or Register b, Register a, Register b>
		push_const:14 == 59 <@push_reg Register b>
			push_reg:10 == 59 <.define registerToPush Register b>
			push_reg:13 == 59 <ldc Register a, Constant 0>
			push_reg:14 == 60 <ldb Register a, Register a>
			push_reg:15 == 61 <stb Register a, Register b>
			push_reg:19 == 62 <ldc Register b, Constant 1>
			push_reg:20 == 63 <add Register a, Register a, Register b>
			push_reg:21 == 64 <ldc Register b, Constant 0>
			push_reg:22 == 65 <stb Register b, Register a>
	call:27 == 66 <@push_const Constant 0>
		push_const:6 == 66 <.define constantToPush Constant 0>
		push_const:12 == 66 <@ldc Register b, Constant 0>
			ldc:1 == 66 <.define writeReg Register b>
			ldc:2 == 66 <.define const Constant 0>
			ldc:4 == 66 <ldc Register a, Constant 0>
			ldc:5 == 67 <ldc Register b, Constant 12>
			ldc:6 == 68 <shl Register a, Register a, Register b>
			ldc:7 == 69 <ldc Register b, Constant 0>
			ldc:8 == 70 <or Register b, Register a, Register b>
		push_const:14 == 71 <@push_reg Register b>
			push_reg:10 == 71 <.define registerToPush Register b>
			push_reg:13 == 71 <ldc Register a, Constant 0>
			push_reg:14 == 72 <ldb Register a, Register a>
			push_reg:15 == 73 <stb Register a, Register b>
			push_reg:19 == 74 <ldc Register b, Constant 1>
			push_reg:20 == 75 <add Register a, Register a, Register b>
			push_reg:21 == 76 <ldc Register b, Constant 0>
			push_reg:22 == 77 <stb Register b, Register a>
	call:28 == 78 <@add >
		add:3 == 78 <.define lhs Register c>
		add:4 == 78 <.define rhs Register d>
		add:5 == 78 <.define result Register d>
		add:7 == 78 <@pop_reg Register d>
			pop_reg:10 == 78 <.define registerToLoad Register d>
			pop_reg:13 == 78 <ldc Register a, Constant 0>
			pop_reg:14 == 79 <ldb Register a, Register a>
			pop_reg:15 == 80 <ldc Register b, Constant 1>
			pop_reg:16 == 81 <sub Register a, Register a, Register b>
			pop_reg:17 == 82 <ldc Register b, Constant 0>
			pop_reg:18 == 83 <stb Register b, Register a>
			pop_reg:22 == 84 <ldb Register a, Register d>
		add:8 == 85 <@pop_reg Register c>
			pop_reg:10 == 85 <.define registerToLoad Register c>
			pop_reg:13 == 85 <ldc Register a, Constant 0>
			pop_reg:14 == 86 <ldb Register a, Register a>
			pop_reg:15 == 87 <ldc Register b, Constant 1>
			pop_reg:16 == 88 <sub Register a, Register a, Register b>
			pop_reg:17 == 89 <ldc Register b, Constant 0>
			pop_reg:18 == 90 <stb Register b, Register a>
			pop_reg:22 == 91 <ldb Register a, Register c>
		add:9 == 92 <add Register d, Register c, Register d>
		add:10 == 93 <@push_reg Register d>
			push_reg:10 == 93 <.define registerToPush Register d>
			push_reg:13 == 93 <ldc Register a, Constant 0>
			push_reg:14 == 94 <ldb Register a, Register a>
			push_reg:15 == 95 <stb Register a, Register d>
			push_reg:19 == 96 <ldc Register b, Constant 1>
			push_reg:20 == 97 <add Register a, Register a, Register b>
			push_reg:21 == 98 <ldc Register b, Constant 0>
			push_reg:22 == 99 <stb Register b, Register a>
	call:29 == 100 <@sub >
		sub:3 == 100 <.define lhs Register c>
		sub:4 == 100 <.define rhs Register d>
		sub:5 == 100 <.define result Register d>
		sub:7 == 100 <@pop_reg Register d>
			pop_reg:10 == 100 <.define registerToLoad Register d>
			pop_reg:13 == 100 <ldc Register a, Constant 0>
			pop_reg:14 == 101 <ldb Register a, Register a>
			pop_reg:15 == 102 <ldc Register b, Constant 1>
			pop_reg:16 == 103 <sub Register a, Register a, Register b>
			pop_reg:17 == 104 <ldc Register b, Constant 0>
			pop_reg:18 == 105 <stb Register b, Register a>
			pop_reg:22 == 106 <ldb Register a, Register d>
		sub:8 == 107 <@pop_reg Register c>
			pop_reg:10 == 107 <.define registerToLoad Register c>
			pop_reg:13 == 107 <ldc Register a, Constant 0>
			pop_reg:14 == 108 <ldb Register a, Register a>
			pop_reg:15 == 109 <ldc Register b, Constant 1>
			pop_reg:16 == 110 <sub Register a, Register a, Register b>
			pop_reg:17 == 111 <ldc Register b, Constant 0>
			pop_reg:18 == 112 <stb Register b, Register a>
			pop_reg:22 == 113 <ldb Register a, Register c>
		sub:9 == 114 <sub Register d, Register c, Register d>
		sub:10 == 115 <@push_reg Register d>
			push_reg:10 == 115 <.define registerToPush Register d>
			push_reg:13 == 115 <ldc Register a, Constant 0>
			push_reg:14 == 116 <ldb Register a, Register a>
			push_reg:15 == 117 <stb Register a, Register d>
			push_reg:19 == 118 <ldc Register b, Constant 1>
			push_reg:20 == 119 <add Register a, Register a, Register b>
			push_reg:21 == 120 <ldc Register b, Constant 0>
			push_reg:22 == 121 <stb Register b, Register a>
	call:30 == 122 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 122 <.define val Register c>
		pop_mem_v:7 == 122 <.define addr Constant 2>
		pop_mem_v:9 == 122 <@pop_reg Register c>
			pop_reg:10 == 122 <.define registerToLoad Register c>
			pop_reg:13 == 122 <ldc Register a, Constant 0>
			pop_reg:14 == 123 <ldb Register a, Register a>
			pop_reg:15 == 124 <ldc Register b, Constant 1>
			pop_reg:16 == 125 <sub Register a, Register a, Register b>
			pop_reg:17 == 126 <ldc Register b, Constant 0>
			pop_reg:18 == 127 <stb Register b, Register a>
			pop_reg:22 == 128 <ldb Register a, Register c>
		pop_mem_v:11 == 129 <@ldc Register b, Constant 2>
			ldc:1 == 129 <.define writeReg Register b>
			ldc:2 == 129 <.define const Constant 2>
			ldc:4 == 129 <ldc Register a, Constant 0>
			ldc:5 == 130 <ldc Register b, Constant 12>
			ldc:6 == 131 <shl Register a, Register a, Register b>
			ldc:7 == 132 <ldc Register b, Constant 2>
			ldc:8 == 133 <or Register b, Register a, Register b>
		pop_mem_v:12 == 134 <stb Register b, Register c>
	call:32 == 135 <@ldc Register a, Constant 686>
		ldc:1 == 135 <.define writeReg Register a>
		ldc:2 == 135 <.define const Constant 686>
		ldc:4 == 135 <ldc Register a, Constant 0>
		ldc:5 == 136 <ldc Register b, Constant 12>
		ldc:6 == 137 <shl Register a, Register a, Register b>
		ldc:7 == 138 <ldc Register b, Constant 686>
		ldc:8 == 139 <or Register a, Register a, Register b>
	call:33 == 140 <jmp Register a>
	call:38 == 141 <ldc Register d, Constant 2>
	call:41 == 142 <ldb Register d, Register d>
	call:43 == 143 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 143 <.define val Register c>
		pop_mem_v:7 == 143 <.define addr Constant 3>
		pop_mem_v:9 == 143 <@pop_reg Register c>
			pop_reg:10 == 143 <.define registerToLoad Register c>
			pop_reg:13 == 143 <ldc Register a, Constant 0>
			pop_reg:14 == 144 <ldb Register a, Register a>
			pop_reg:15 == 145 <ldc Register b, Constant 1>
			pop_reg:16 == 146 <sub Register a, Register a, Register b>
			pop_reg:17 == 147 <ldc Register b, Constant 0>
			pop_reg:18 == 148 <stb Register b, Register a>
			pop_reg:22 == 149 <ldb Register a, Register c>
		pop_mem_v:11 == 150 <@ldc Register b, Constant 3>
			ldc:1 == 150 <.define writeReg Register b>
			ldc:2 == 150 <.define const Constant 3>
			ldc:4 == 150 <ldc Register a, Constant 0>
			ldc:5 == 151 <ldc Register b, Constant 12>
			ldc:6 == 152 <shl Register a, Register a, Register b>
			ldc:7 == 153 <ldc Register b, Constant 3>
			ldc:8 == 154 <or Register b, Register a, Register b>
		pop_mem_v:12 == 155 <stb Register b, Register c>
	call:44 == 156 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 156 <.define val Register c>
		pop_mem_v:7 == 156 <.define addr Constant 2>
		pop_mem_v:9 == 156 <@pop_reg Register c>
			pop_reg:10 == 156 <.define registerToLoad Register c>
			pop_reg:13 == 156 <ldc Register a, Constant 0>
			pop_reg:14 == 157 <ldb Register a, Register a>
			pop_reg:15 == 158 <ldc Register b, Constant 1>
			pop_reg:16 == 159 <sub Register a, Register a, Register b>
			pop_reg:17 == 160 <ldc Register b, Constant 0>
			pop_reg:18 == 161 <stb Register b, Register a>
			pop_reg:22 == 162 <ldb Register a, Register c>
		pop_mem_v:11 == 163 <@ldc Register b, Constant 2>
			ldc:1 == 163 <.define writeReg Register b>
			ldc:2 == 163 <.define const Constant 2>
			ldc:4 == 163 <ldc Register a, Constant 0>
			ldc:5 == 164 <ldc Register b, Constant 12>
			ldc:6 == 165 <shl Register a, Register a, Register b>
			ldc:7 == 166 <ldc Register b, Constant 2>
			ldc:8 == 167 <or Register b, Register a, Register b>
		pop_mem_v:12 == 168 <stb Register b, Register c>
	call:46 == 169 <ldc Register c, Constant 0>
	call:47 == 170 <stb Register c, Register d>
pong.pa2:65 == 171 <ldc Register b, Constant 28>
pong.pa2:66 == 172 <ldc Register a, Constant 16>
pong.pa2:67 == 173 <stb Register a, Register b>
pong.pa2:68 == 174 <ldc Register a, Constant 17>
pong.pa2:69 == 175 <stb Register a, Register b>
pong.pa2:74 == 176 <@call Constant 738, Constant 0>
	call:11 == 176 <.define functionLabel Constant 738>
	call:12 == 176 <.define argcount Constant 0>
	call:15 == 176 <@push_mem Constant 2>
		push_mem:6 == 176 <.define addr Register b>
		push_mem:7 == 176 <.define value Register b>
		push_mem:9 == 176 <@ldc Register b, Constant 2>
			ldc:1 == 176 <.define writeReg Register b>
			ldc:2 == 176 <.define const Constant 2>
			ldc:4 == 176 <ldc Register a, Constant 0>
			ldc:5 == 177 <ldc Register b, Constant 12>
			ldc:6 == 178 <shl Register a, Register a, Register b>
			ldc:7 == 179 <ldc Register b, Constant 2>
			ldc:8 == 180 <or Register b, Register a, Register b>
		push_mem:10 == 181 <ldb Register b, Register b>
		push_mem:12 == 182 <@push_reg Register b>
			push_reg:10 == 182 <.define registerToPush Register b>
			push_reg:13 == 182 <ldc Register a, Constant 0>
			push_reg:14 == 183 <ldb Register a, Register a>
			push_reg:15 == 184 <stb Register a, Register b>
			push_reg:19 == 185 <ldc Register b, Constant 1>
			push_reg:20 == 186 <add Register a, Register a, Register b>
			push_reg:21 == 187 <ldc Register b, Constant 0>
			push_reg:22 == 188 <stb Register b, Register a>
	call:16 == 189 <@push_mem Constant 3>
		push_mem:6 == 189 <.define addr Register b>
		push_mem:7 == 189 <.define value Register b>
		push_mem:9 == 189 <@ldc Register b, Constant 3>
			ldc:1 == 189 <.define writeReg Register b>
			ldc:2 == 189 <.define const Constant 3>
			ldc:4 == 189 <ldc Register a, Constant 0>
			ldc:5 == 190 <ldc Register b, Constant 12>
			ldc:6 == 191 <shl Register a, Register a, Register b>
			ldc:7 == 192 <ldc Register b, Constant 3>
			ldc:8 == 193 <or Register b, Register a, Register b>
		push_mem:10 == 194 <ldb Register b, Register b>
		push_mem:12 == 195 <@push_reg Register b>
			push_reg:10 == 195 <.define registerToPush Register b>
			push_reg:13 == 195 <ldc Register a, Constant 0>
			push_reg:14 == 196 <ldb Register a, Register a>
			push_reg:15 == 197 <stb Register a, Register b>
			push_reg:19 == 198 <ldc Register b, Constant 1>
			push_reg:20 == 199 <add Register a, Register a, Register b>
			push_reg:21 == 200 <ldc Register b, Constant 0>
			push_reg:22 == 201 <stb Register b, Register a>
	call:19 == 202 <@push_const Constant 314>
		push_const:6 == 202 <.define constantToPush Constant 314>
		push_const:12 == 202 <@ldc Register b, Constant 314>
			ldc:1 == 202 <.define writeReg Register b>
			ldc:2 == 202 <.define const Constant 314>
			ldc:4 == 202 <ldc Register a, Constant 0>
			ldc:5 == 203 <ldc Register b, Constant 12>
			ldc:6 == 204 <shl Register a, Register a, Register b>
			ldc:7 == 205 <ldc Register b, Constant 314>
			ldc:8 == 206 <or Register b, Register a, Register b>
		push_const:14 == 207 <@push_reg Register b>
			push_reg:10 == 207 <.define registerToPush Register b>
			push_reg:13 == 207 <ldc Register a, Constant 0>
			push_reg:14 == 208 <ldb Register a, Register a>
			push_reg:15 == 209 <stb Register a, Register b>
			push_reg:19 == 210 <ldc Register b, Constant 1>
			push_reg:20 == 211 <add Register a, Register a, Register b>
			push_reg:21 == 212 <ldc Register b, Constant 0>
			push_reg:22 == 213 <stb Register b, Register a>
	call:24 == 214 <@push_mem Constant 0>
		push_mem:6 == 214 <.define addr Register b>
		push_mem:7 == 214 <.define value Register b>
		push_mem:9 == 214 <@ldc Register b, Constant 0>
			ldc:1 == 214 <.define writeReg Register b>
			ldc:2 == 214 <.define const Constant 0>
			ldc:4 == 214 <ldc Register a, Constant 0>
			ldc:5 == 215 <ldc Register b, Constant 12>
			ldc:6 == 216 <shl Register a, Register a, Register b>
			ldc:7 == 217 <ldc Register b, Constant 0>
			ldc:8 == 218 <or Register b, Register a, Register b>
		push_mem:10 == 219 <ldb Register b, Register b>
		push_mem:12 == 220 <@push_reg Register b>
			push_reg:10 == 220 <.define registerToPush Register b>
			push_reg:13 == 220 <ldc Register a, Constant 0>
			push_reg:14 == 221 <ldb Register a, Register a>
			push_reg:15 == 222 <stb Register a, Register b>
			push_reg:19 == 223 <ldc Register b, Constant 1>
			push_reg:20 == 224 <add Register a, Register a, Register b>
			push_reg:21 == 225 <ldc Register b, Constant 0>
			push_reg:22 == 226 <stb Register b, Register a>
	call:26 == 227 <@push_const Constant 3>
		push_const:6 == 227 <.define constantToPush Constant 3>
		push_const:12 == 227 <@ldc Register b, Constant 3>
			ldc:1 == 227 <.define writeReg Register b>
			ldc:2 == 227 <.define const Constant 3>
			ldc:4 == 227 <ldc Register a, Constant 0>
			ldc:5 == 228 <ldc Register b, Constant 12>
			ldc:6 == 229 <shl Register a, Register a, Register b>
			ldc:7 == 230 <ldc Register b, Constant 3>
			ldc:8 == 231 <or Register b, Register a, Register b>
		push_const:14 == 232 <@push_reg Register b>
			push_reg:10 == 232 <.define registerToPush Register b>
			push_reg:13 == 232 <ldc Register a, Constant 0>
			push_reg:14 == 233 <ldb Register a, Register a>
			push_reg:15 == 234 <stb Register a, Register b>
			push_reg:19 == 235 <ldc Register b, Constant 1>
			push_reg:20 == 236 <add Register a, Register a, Register b>
			push_reg:21 == 237 <ldc Register b, Constant 0>
			push_reg:22 == 238 <stb Register b, Register a>
	call:27 == 239 <@push_const Constant 0>
		push_const:6 == 239 <.define constantToPush Constant 0>
		push_const:12 == 239 <@ldc Register b, Constant 0>
			ldc:1 == 239 <.define writeReg Register b>
			ldc:2 == 239 <.define const Constant 0>
			ldc:4 == 239 <ldc Register a, Constant 0>
			ldc:5 == 240 <ldc Register b, Constant 12>
			ldc:6 == 241 <shl Register a, Register a, Register b>
			ldc:7 == 242 <ldc Register b, Constant 0>
			ldc:8 == 243 <or Register b, Register a, Register b>
		push_const:14 == 244 <@push_reg Register b>
			push_reg:10 == 244 <.define registerToPush Register b>
			push_reg:13 == 244 <ldc Register a, Constant 0>
			push_reg:14 == 245 <ldb Register a, Register a>
			push_reg:15 == 246 <stb Register a, Register b>
			push_reg:19 == 247 <ldc Register b, Constant 1>
			push_reg:20 == 248 <add Register a, Register a, Register b>
			push_reg:21 == 249 <ldc Register b, Constant 0>
			push_reg:22 == 250 <stb Register b, Register a>
	call:28 == 251 <@add >
		add:3 == 251 <.define lhs Register c>
		add:4 == 251 <.define rhs Register d>
		add:5 == 251 <.define result Register d>
		add:7 == 251 <@pop_reg Register d>
			pop_reg:10 == 251 <.define registerToLoad Register d>
			pop_reg:13 == 251 <ldc Register a, Constant 0>
			pop_reg:14 == 252 <ldb Register a, Register a>
			pop_reg:15 == 253 <ldc Register b, Constant 1>
			pop_reg:16 == 254 <sub Register a, Register a, Register b>
			pop_reg:17 == 255 <ldc Register b, Constant 0>
			pop_reg:18 == 256 <stb Register b, Register a>
			pop_reg:22 == 257 <ldb Register a, Register d>
		add:8 == 258 <@pop_reg Register c>
			pop_reg:10 == 258 <.define registerToLoad Register c>
			pop_reg:13 == 258 <ldc Register a, Constant 0>
			pop_reg:14 == 259 <ldb Register a, Register a>
			pop_reg:15 == 260 <ldc Register b, Constant 1>
			pop_reg:16 == 261 <sub Register a, Register a, Register b>
			pop_reg:17 == 262 <ldc Register b, Constant 0>
			pop_reg:18 == 263 <stb Register b, Register a>
			pop_reg:22 == 264 <ldb Register a, Register c>
		add:9 == 265 <add Register d, Register c, Register d>
		add:10 == 266 <@push_reg Register d>
			push_reg:10 == 266 <.define registerToPush Register d>
			push_reg:13 == 266 <ldc Register a, Constant 0>
			push_reg:14 == 267 <ldb Register a, Register a>
			push_reg:15 == 268 <stb Register a, Register d>
			push_reg:19 == 269 <ldc Register b, Constant 1>
			push_reg:20 == 270 <add Register a, Register a, Register b>
			push_reg:21 == 271 <ldc Register b, Constant 0>
			push_reg:22 == 272 <stb Register b, Register a>
	call:29 == 273 <@sub >
		sub:3 == 273 <.define lhs Register c>
		sub:4 == 273 <.define rhs Register d>
		sub:5 == 273 <.define result Register d>
		sub:7 == 273 <@pop_reg Register d>
			pop_reg:10 == 273 <.define registerToLoad Register d>
			pop_reg:13 == 273 <ldc Register a, Constant 0>
			pop_reg:14 == 274 <ldb Register a, Register a>
			pop_reg:15 == 275 <ldc Register b, Constant 1>
			pop_reg:16 == 276 <sub Register a, Register a, Register b>
			pop_reg:17 == 277 <ldc Register b, Constant 0>
			pop_reg:18 == 278 <stb Register b, Register a>
			pop_reg:22 == 279 <ldb Register a, Register d>
		sub:8 == 280 <@pop_reg Register c>
			pop_reg:10 == 280 <.define registerToLoad Register c>
			pop_reg:13 == 280 <ldc Register a, Constant 0>
			pop_reg:14 == 281 <ldb Register a, Register a>
			pop_reg:15 == 282 <ldc Register b, Constant 1>
			pop_reg:16 == 283 <sub Register a, Register a, Register b>
			pop_reg:17 == 284 <ldc Register b, Constant 0>
			pop_reg:18 == 285 <stb Register b, Register a>
			pop_reg:22 == 286 <ldb Register a, Register c>
		sub:9 == 287 <sub Register d, Register c, Register d>
		sub:10 == 288 <@push_reg Register d>
			push_reg:10 == 288 <.define registerToPush Register d>
			push_reg:13 == 288 <ldc Register a, Constant 0>
			push_reg:14 == 289 <ldb Register a, Register a>
			push_reg:15 == 290 <stb Register a, Register d>
			push_reg:19 == 291 <ldc Register b, Constant 1>
			push_reg:20 == 292 <add Register a, Register a, Register b>
			push_reg:21 == 293 <ldc Register b, Constant 0>
			push_reg:22 == 294 <stb Register b, Register a>
	call:30 == 295 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 295 <.define val Register c>
		pop_mem_v:7 == 295 <.define addr Constant 2>
		pop_mem_v:9 == 295 <@pop_reg Register c>
			pop_reg:10 == 295 <.define registerToLoad Register c>
			pop_reg:13 == 295 <ldc Register a, Constant 0>
			pop_reg:14 == 296 <ldb Register a, Register a>
			pop_reg:15 == 297 <ldc Register b, Constant 1>
			pop_reg:16 == 298 <sub Register a, Register a, Register b>
			pop_reg:17 == 299 <ldc Register b, Constant 0>
			pop_reg:18 == 300 <stb Register b, Register a>
			pop_reg:22 == 301 <ldb Register a, Register c>
		pop_mem_v:11 == 302 <@ldc Register b, Constant 2>
			ldc:1 == 302 <.define writeReg Register b>
			ldc:2 == 302 <.define const Constant 2>
			ldc:4 == 302 <ldc Register a, Constant 0>
			ldc:5 == 303 <ldc Register b, Constant 12>
			ldc:6 == 304 <shl Register a, Register a, Register b>
			ldc:7 == 305 <ldc Register b, Constant 2>
			ldc:8 == 306 <or Register b, Register a, Register b>
		pop_mem_v:12 == 307 <stb Register b, Register c>
	call:32 == 308 <@ldc Register a, Constant 738>
		ldc:1 == 308 <.define writeReg Register a>
		ldc:2 == 308 <.define const Constant 738>
		ldc:4 == 308 <ldc Register a, Constant 0>
		ldc:5 == 309 <ldc Register b, Constant 12>
		ldc:6 == 310 <shl Register a, Register a, Register b>
		ldc:7 == 311 <ldc Register b, Constant 738>
		ldc:8 == 312 <or Register a, Register a, Register b>
	call:33 == 313 <jmp Register a>
	call:38 == 314 <ldc Register d, Constant 2>
	call:41 == 315 <ldb Register d, Register d>
	call:43 == 316 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 316 <.define val Register c>
		pop_mem_v:7 == 316 <.define addr Constant 3>
		pop_mem_v:9 == 316 <@pop_reg Register c>
			pop_reg:10 == 316 <.define registerToLoad Register c>
			pop_reg:13 == 316 <ldc Register a, Constant 0>
			pop_reg:14 == 317 <ldb Register a, Register a>
			pop_reg:15 == 318 <ldc Register b, Constant 1>
			pop_reg:16 == 319 <sub Register a, Register a, Register b>
			pop_reg:17 == 320 <ldc Register b, Constant 0>
			pop_reg:18 == 321 <stb Register b, Register a>
			pop_reg:22 == 322 <ldb Register a, Register c>
		pop_mem_v:11 == 323 <@ldc Register b, Constant 3>
			ldc:1 == 323 <.define writeReg Register b>
			ldc:2 == 323 <.define const Constant 3>
			ldc:4 == 323 <ldc Register a, Constant 0>
			ldc:5 == 324 <ldc Register b, Constant 12>
			ldc:6 == 325 <shl Register a, Register a, Register b>
			ldc:7 == 326 <ldc Register b, Constant 3>
			ldc:8 == 327 <or Register b, Register a, Register b>
		pop_mem_v:12 == 328 <stb Register b, Register c>
	call:44 == 329 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 329 <.define val Register c>
		pop_mem_v:7 == 329 <.define addr Constant 2>
		pop_mem_v:9 == 329 <@pop_reg Register c>
			pop_reg:10 == 329 <.define registerToLoad Register c>
			pop_reg:13 == 329 <ldc Register a, Constant 0>
			pop_reg:14 == 330 <ldb Register a, Register a>
			pop_reg:15 == 331 <ldc Register b, Constant 1>
			pop_reg:16 == 332 <sub Register a, Register a, Register b>
			pop_reg:17 == 333 <ldc Register b, Constant 0>
			pop_reg:18 == 334 <stb Register b, Register a>
			pop_reg:22 == 335 <ldb Register a, Register c>
		pop_mem_v:11 == 336 <@ldc Register b, Constant 2>
			ldc:1 == 336 <.define writeReg Register b>
			ldc:2 == 336 <.define const Constant 2>
			ldc:4 == 336 <ldc Register a, Constant 0>
			ldc:5 == 337 <ldc Register b, Constant 12>
			ldc:6 == 338 <shl Register a, Register a, Register b>
			ldc:7 == 339 <ldc Register b, Constant 2>
			ldc:8 == 340 <or Register b, Register a, Register b>
		pop_mem_v:12 == 341 <stb Register b, Register c>
	call:46 == 342 <ldc Register c, Constant 0>
	call:47 == 343 <stb Register c, Register d>
pong.pa2:76 == 344 <@call Constant 1750, Constant 0>
	call:11 == 344 <.define functionLabel Constant 1750>
	call:12 == 344 <.define argcount Constant 0>
	call:15 == 344 <@push_mem Constant 2>
		push_mem:6 == 344 <.define addr Register b>
		push_mem:7 == 344 <.define value Register b>
		push_mem:9 == 344 <@ldc Register b, Constant 2>
			ldc:1 == 344 <.define writeReg Register b>
			ldc:2 == 344 <.define const Constant 2>
			ldc:4 == 344 <ldc Register a, Constant 0>
			ldc:5 == 345 <ldc Register b, Constant 12>
			ldc:6 == 346 <shl Register a, Register a, Register b>
			ldc:7 == 347 <ldc Register b, Constant 2>
			ldc:8 == 348 <or Register b, Register a, Register b>
		push_mem:10 == 349 <ldb Register b, Register b>
		push_mem:12 == 350 <@push_reg Register b>
			push_reg:10 == 350 <.define registerToPush Register b>
			push_reg:13 == 350 <ldc Register a, Constant 0>
			push_reg:14 == 351 <ldb Register a, Register a>
			push_reg:15 == 352 <stb Register a, Register b>
			push_reg:19 == 353 <ldc Register b, Constant 1>
			push_reg:20 == 354 <add Register a, Register a, Register b>
			push_reg:21 == 355 <ldc Register b, Constant 0>
			push_reg:22 == 356 <stb Register b, Register a>
	call:16 == 357 <@push_mem Constant 3>
		push_mem:6 == 357 <.define addr Register b>
		push_mem:7 == 357 <.define value Register b>
		push_mem:9 == 357 <@ldc Register b, Constant 3>
			ldc:1 == 357 <.define writeReg Register b>
			ldc:2 == 357 <.define const Constant 3>
			ldc:4 == 357 <ldc Register a, Constant 0>
			ldc:5 == 358 <ldc Register b, Constant 12>
			ldc:6 == 359 <shl Register a, Register a, Register b>
			ldc:7 == 360 <ldc Register b, Constant 3>
			ldc:8 == 361 <or Register b, Register a, Register b>
		push_mem:10 == 362 <ldb Register b, Register b>
		push_mem:12 == 363 <@push_reg Register b>
			push_reg:10 == 363 <.define registerToPush Register b>
			push_reg:13 == 363 <ldc Register a, Constant 0>
			push_reg:14 == 364 <ldb Register a, Register a>
			push_reg:15 == 365 <stb Register a, Register b>
			push_reg:19 == 366 <ldc Register b, Constant 1>
			push_reg:20 == 367 <add Register a, Register a, Register b>
			push_reg:21 == 368 <ldc Register b, Constant 0>
			push_reg:22 == 369 <stb Register b, Register a>
	call:19 == 370 <@push_const Constant 482>
		push_const:6 == 370 <.define constantToPush Constant 482>
		push_const:12 == 370 <@ldc Register b, Constant 482>
			ldc:1 == 370 <.define writeReg Register b>
			ldc:2 == 370 <.define const Constant 482>
			ldc:4 == 370 <ldc Register a, Constant 0>
			ldc:5 == 371 <ldc Register b, Constant 12>
			ldc:6 == 372 <shl Register a, Register a, Register b>
			ldc:7 == 373 <ldc Register b, Constant 482>
			ldc:8 == 374 <or Register b, Register a, Register b>
		push_const:14 == 375 <@push_reg Register b>
			push_reg:10 == 375 <.define registerToPush Register b>
			push_reg:13 == 375 <ldc Register a, Constant 0>
			push_reg:14 == 376 <ldb Register a, Register a>
			push_reg:15 == 377 <stb Register a, Register b>
			push_reg:19 == 378 <ldc Register b, Constant 1>
			push_reg:20 == 379 <add Register a, Register a, Register b>
			push_reg:21 == 380 <ldc Register b, Constant 0>
			push_reg:22 == 381 <stb Register b, Register a>
	call:24 == 382 <@push_mem Constant 0>
		push_mem:6 == 382 <.define addr Register b>
		push_mem:7 == 382 <.define value Register b>
		push_mem:9 == 382 <@ldc Register b, Constant 0>
			ldc:1 == 382 <.define writeReg Register b>
			ldc:2 == 382 <.define const Constant 0>
			ldc:4 == 382 <ldc Register a, Constant 0>
			ldc:5 == 383 <ldc Register b, Constant 12>
			ldc:6 == 384 <shl Register a, Register a, Register b>
			ldc:7 == 385 <ldc Register b, Constant 0>
			ldc:8 == 386 <or Register b, Register a, Register b>
		push_mem:10 == 387 <ldb Register b, Register b>
		push_mem:12 == 388 <@push_reg Register b>
			push_reg:10 == 388 <.define registerToPush Register b>
			push_reg:13 == 388 <ldc Register a, Constant 0>
			push_reg:14 == 389 <ldb Register a, Register a>
			push_reg:15 == 390 <stb Register a, Register b>
			push_reg:19 == 391 <ldc Register b, Constant 1>
			push_reg:20 == 392 <add Register a, Register a, Register b>
			push_reg:21 == 393 <ldc Register b, Constant 0>
			push_reg:22 == 394 <stb Register b, Register a>
	call:26 == 395 <@push_const Constant 3>
		push_const:6 == 395 <.define constantToPush Constant 3>
		push_const:12 == 395 <@ldc Register b, Constant 3>
			ldc:1 == 395 <.define writeReg Register b>
			ldc:2 == 395 <.define const Constant 3>
			ldc:4 == 395 <ldc Register a, Constant 0>
			ldc:5 == 396 <ldc Register b, Constant 12>
			ldc:6 == 397 <shl Register a, Register a, Register b>
			ldc:7 == 398 <ldc Register b, Constant 3>
			ldc:8 == 399 <or Register b, Register a, Register b>
		push_const:14 == 400 <@push_reg Register b>
			push_reg:10 == 400 <.define registerToPush Register b>
			push_reg:13 == 400 <ldc Register a, Constant 0>
			push_reg:14 == 401 <ldb Register a, Register a>
			push_reg:15 == 402 <stb Register a, Register b>
			push_reg:19 == 403 <ldc Register b, Constant 1>
			push_reg:20 == 404 <add Register a, Register a, Register b>
			push_reg:21 == 405 <ldc Register b, Constant 0>
			push_reg:22 == 406 <stb Register b, Register a>
	call:27 == 407 <@push_const Constant 0>
		push_const:6 == 407 <.define constantToPush Constant 0>
		push_const:12 == 407 <@ldc Register b, Constant 0>
			ldc:1 == 407 <.define writeReg Register b>
			ldc:2 == 407 <.define const Constant 0>
			ldc:4 == 407 <ldc Register a, Constant 0>
			ldc:5 == 408 <ldc Register b, Constant 12>
			ldc:6 == 409 <shl Register a, Register a, Register b>
			ldc:7 == 410 <ldc Register b, Constant 0>
			ldc:8 == 411 <or Register b, Register a, Register b>
		push_const:14 == 412 <@push_reg Register b>
			push_reg:10 == 412 <.define registerToPush Register b>
			push_reg:13 == 412 <ldc Register a, Constant 0>
			push_reg:14 == 413 <ldb Register a, Register a>
			push_reg:15 == 414 <stb Register a, Register b>
			push_reg:19 == 415 <ldc Register b, Constant 1>
			push_reg:20 == 416 <add Register a, Register a, Register b>
			push_reg:21 == 417 <ldc Register b, Constant 0>
			push_reg:22 == 418 <stb Register b, Register a>
	call:28 == 419 <@add >
		add:3 == 419 <.define lhs Register c>
		add:4 == 419 <.define rhs Register d>
		add:5 == 419 <.define result Register d>
		add:7 == 419 <@pop_reg Register d>
			pop_reg:10 == 419 <.define registerToLoad Register d>
			pop_reg:13 == 419 <ldc Register a, Constant 0>
			pop_reg:14 == 420 <ldb Register a, Register a>
			pop_reg:15 == 421 <ldc Register b, Constant 1>
			pop_reg:16 == 422 <sub Register a, Register a, Register b>
			pop_reg:17 == 423 <ldc Register b, Constant 0>
			pop_reg:18 == 424 <stb Register b, Register a>
			pop_reg:22 == 425 <ldb Register a, Register d>
		add:8 == 426 <@pop_reg Register c>
			pop_reg:10 == 426 <.define registerToLoad Register c>
			pop_reg:13 == 426 <ldc Register a, Constant 0>
			pop_reg:14 == 427 <ldb Register a, Register a>
			pop_reg:15 == 428 <ldc Register b, Constant 1>
			pop_reg:16 == 429 <sub Register a, Register a, Register b>
			pop_reg:17 == 430 <ldc Register b, Constant 0>
			pop_reg:18 == 431 <stb Register b, Register a>
			pop_reg:22 == 432 <ldb Register a, Register c>
		add:9 == 433 <add Register d, Register c, Register d>
		add:10 == 434 <@push_reg Register d>
			push_reg:10 == 434 <.define registerToPush Register d>
			push_reg:13 == 434 <ldc Register a, Constant 0>
			push_reg:14 == 435 <ldb Register a, Register a>
			push_reg:15 == 436 <stb Register a, Register d>
			push_reg:19 == 437 <ldc Register b, Constant 1>
			push_reg:20 == 438 <add Register a, Register a, Register b>
			push_reg:21 == 439 <ldc Register b, Constant 0>
			push_reg:22 == 440 <stb Register b, Register a>
	call:29 == 441 <@sub >
		sub:3 == 441 <.define lhs Register c>
		sub:4 == 441 <.define rhs Register d>
		sub:5 == 441 <.define result Register d>
		sub:7 == 441 <@pop_reg Register d>
			pop_reg:10 == 441 <.define registerToLoad Register d>
			pop_reg:13 == 441 <ldc Register a, Constant 0>
			pop_reg:14 == 442 <ldb Register a, Register a>
			pop_reg:15 == 443 <ldc Register b, Constant 1>
			pop_reg:16 == 444 <sub Register a, Register a, Register b>
			pop_reg:17 == 445 <ldc Register b, Constant 0>
			pop_reg:18 == 446 <stb Register b, Register a>
			pop_reg:22 == 447 <ldb Register a, Register d>
		sub:8 == 448 <@pop_reg Register c>
			pop_reg:10 == 448 <.define registerToLoad Register c>
			pop_reg:13 == 448 <ldc Register a, Constant 0>
			pop_reg:14 == 449 <ldb Register a, Register a>
			pop_reg:15 == 450 <ldc Register b, Constant 1>
			pop_reg:16 == 451 <sub Register a, Register a, Register b>
			pop_reg:17 == 452 <ldc Register b, Constant 0>
			pop_reg:18 == 453 <stb Register b, Register a>
			pop_reg:22 == 454 <ldb Register a, Register c>
		sub:9 == 455 <sub Register d, Register c, Register d>
		sub:10 == 456 <@push_reg Register d>
			push_reg:10 == 456 <.define registerToPush Register d>
			push_reg:13 == 456 <ldc Register a, Constant 0>
			push_reg:14 == 457 <ldb Register a, Register a>
			push_reg:15 == 458 <stb Register a, Register d>
			push_reg:19 == 459 <ldc Register b, Constant 1>
			push_reg:20 == 460 <add Register a, Register a, Register b>
			push_reg:21 == 461 <ldc Register b, Constant 0>
			push_reg:22 == 462 <stb Register b, Register a>
	call:30 == 463 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 463 <.define val Register c>
		pop_mem_v:7 == 463 <.define addr Constant 2>
		pop_mem_v:9 == 463 <@pop_reg Register c>
			pop_reg:10 == 463 <.define registerToLoad Register c>
			pop_reg:13 == 463 <ldc Register a, Constant 0>
			pop_reg:14 == 464 <ldb Register a, Register a>
			pop_reg:15 == 465 <ldc Register b, Constant 1>
			pop_reg:16 == 466 <sub Register a, Register a, Register b>
			pop_reg:17 == 467 <ldc Register b, Constant 0>
			pop_reg:18 == 468 <stb Register b, Register a>
			pop_reg:22 == 469 <ldb Register a, Register c>
		pop_mem_v:11 == 470 <@ldc Register b, Constant 2>
			ldc:1 == 470 <.define writeReg Register b>
			ldc:2 == 470 <.define const Constant 2>
			ldc:4 == 470 <ldc Register a, Constant 0>
			ldc:5 == 471 <ldc Register b, Constant 12>
			ldc:6 == 472 <shl Register a, Register a, Register b>
			ldc:7 == 473 <ldc Register b, Constant 2>
			ldc:8 == 474 <or Register b, Register a, Register b>
		pop_mem_v:12 == 475 <stb Register b, Register c>
	call:32 == 476 <@ldc Register a, Constant 1750>
		ldc:1 == 476 <.define writeReg Register a>
		ldc:2 == 476 <.define const Constant 1750>
		ldc:4 == 476 <ldc Register a, Constant 0>
		ldc:5 == 477 <ldc Register b, Constant 12>
		ldc:6 == 478 <shl Register a, Register a, Register b>
		ldc:7 == 479 <ldc Register b, Constant 1750>
		ldc:8 == 480 <or Register a, Register a, Register b>
	call:33 == 481 <jmp Register a>
	call:38 == 482 <ldc Register d, Constant 2>
	call:41 == 483 <ldb Register d, Register d>
	call:43 == 484 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 484 <.define val Register c>
		pop_mem_v:7 == 484 <.define addr Constant 3>
		pop_mem_v:9 == 484 <@pop_reg Register c>
			pop_reg:10 == 484 <.define registerToLoad Register c>
			pop_reg:13 == 484 <ldc Register a, Constant 0>
			pop_reg:14 == 485 <ldb Register a, Register a>
			pop_reg:15 == 486 <ldc Register b, Constant 1>
			pop_reg:16 == 487 <sub Register a, Register a, Register b>
			pop_reg:17 == 488 <ldc Register b, Constant 0>
			pop_reg:18 == 489 <stb Register b, Register a>
			pop_reg:22 == 490 <ldb Register a, Register c>
		pop_mem_v:11 == 491 <@ldc Register b, Constant 3>
			ldc:1 == 491 <.define writeReg Register b>
			ldc:2 == 491 <.define const Constant 3>
			ldc:4 == 491 <ldc Register a, Constant 0>
			ldc:5 == 492 <ldc Register b, Constant 12>
			ldc:6 == 493 <shl Register a, Register a, Register b>
			ldc:7 == 494 <ldc Register b, Constant 3>
			ldc:8 == 495 <or Register b, Register a, Register b>
		pop_mem_v:12 == 496 <stb Register b, Register c>
	call:44 == 497 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 497 <.define val Register c>
		pop_mem_v:7 == 497 <.define addr Constant 2>
		pop_mem_v:9 == 497 <@pop_reg Register c>
			pop_reg:10 == 497 <.define registerToLoad Register c>
			pop_reg:13 == 497 <ldc Register a, Constant 0>
			pop_reg:14 == 498 <ldb Register a, Register a>
			pop_reg:15 == 499 <ldc Register b, Constant 1>
			pop_reg:16 == 500 <sub Register a, Register a, Register b>
			pop_reg:17 == 501 <ldc Register b, Constant 0>
			pop_reg:18 == 502 <stb Register b, Register a>
			pop_reg:22 == 503 <ldb Register a, Register c>
		pop_mem_v:11 == 504 <@ldc Register b, Constant 2>
			ldc:1 == 504 <.define writeReg Register b>
			ldc:2 == 504 <.define const Constant 2>
			ldc:4 == 504 <ldc Register a, Constant 0>
			ldc:5 == 505 <ldc Register b, Constant 12>
			ldc:6 == 506 <shl Register a, Register a, Register b>
			ldc:7 == 507 <ldc Register b, Constant 2>
			ldc:8 == 508 <or Register b, Register a, Register b>
		pop_mem_v:12 == 509 <stb Register b, Register c>
	call:46 == 510 <ldc Register c, Constant 0>
	call:47 == 511 <stb Register c, Register d>
pong.pa2:77 == 512 <@call Constant 1893, Constant 0>
	call:11 == 512 <.define functionLabel Constant 1893>
	call:12 == 512 <.define argcount Constant 0>
	call:15 == 512 <@push_mem Constant 2>
		push_mem:6 == 512 <.define addr Register b>
		push_mem:7 == 512 <.define value Register b>
		push_mem:9 == 512 <@ldc Register b, Constant 2>
			ldc:1 == 512 <.define writeReg Register b>
			ldc:2 == 512 <.define const Constant 2>
			ldc:4 == 512 <ldc Register a, Constant 0>
			ldc:5 == 513 <ldc Register b, Constant 12>
			ldc:6 == 514 <shl Register a, Register a, Register b>
			ldc:7 == 515 <ldc Register b, Constant 2>
			ldc:8 == 516 <or Register b, Register a, Register b>
		push_mem:10 == 517 <ldb Register b, Register b>
		push_mem:12 == 518 <@push_reg Register b>
			push_reg:10 == 518 <.define registerToPush Register b>
			push_reg:13 == 518 <ldc Register a, Constant 0>
			push_reg:14 == 519 <ldb Register a, Register a>
			push_reg:15 == 520 <stb Register a, Register b>
			push_reg:19 == 521 <ldc Register b, Constant 1>
			push_reg:20 == 522 <add Register a, Register a, Register b>
			push_reg:21 == 523 <ldc Register b, Constant 0>
			push_reg:22 == 524 <stb Register b, Register a>
	call:16 == 525 <@push_mem Constant 3>
		push_mem:6 == 525 <.define addr Register b>
		push_mem:7 == 525 <.define value Register b>
		push_mem:9 == 525 <@ldc Register b, Constant 3>
			ldc:1 == 525 <.define writeReg Register b>
			ldc:2 == 525 <.define const Constant 3>
			ldc:4 == 525 <ldc Register a, Constant 0>
			ldc:5 == 526 <ldc Register b, Constant 12>
			ldc:6 == 527 <shl Register a, Register a, Register b>
			ldc:7 == 528 <ldc Register b, Constant 3>
			ldc:8 == 529 <or Register b, Register a, Register b>
		push_mem:10 == 530 <ldb Register b, Register b>
		push_mem:12 == 531 <@push_reg Register b>
			push_reg:10 == 531 <.define registerToPush Register b>
			push_reg:13 == 531 <ldc Register a, Constant 0>
			push_reg:14 == 532 <ldb Register a, Register a>
			push_reg:15 == 533 <stb Register a, Register b>
			push_reg:19 == 534 <ldc Register b, Constant 1>
			push_reg:20 == 535 <add Register a, Register a, Register b>
			push_reg:21 == 536 <ldc Register b, Constant 0>
			push_reg:22 == 537 <stb Register b, Register a>
	call:19 == 538 <@push_const Constant 650>
		push_const:6 == 538 <.define constantToPush Constant 650>
		push_const:12 == 538 <@ldc Register b, Constant 650>
			ldc:1 == 538 <.define writeReg Register b>
			ldc:2 == 538 <.define const Constant 650>
			ldc:4 == 538 <ldc Register a, Constant 0>
			ldc:5 == 539 <ldc Register b, Constant 12>
			ldc:6 == 540 <shl Register a, Register a, Register b>
			ldc:7 == 541 <ldc Register b, Constant 650>
			ldc:8 == 542 <or Register b, Register a, Register b>
		push_const:14 == 543 <@push_reg Register b>
			push_reg:10 == 543 <.define registerToPush Register b>
			push_reg:13 == 543 <ldc Register a, Constant 0>
			push_reg:14 == 544 <ldb Register a, Register a>
			push_reg:15 == 545 <stb Register a, Register b>
			push_reg:19 == 546 <ldc Register b, Constant 1>
			push_reg:20 == 547 <add Register a, Register a, Register b>
			push_reg:21 == 548 <ldc Register b, Constant 0>
			push_reg:22 == 549 <stb Register b, Register a>
	call:24 == 550 <@push_mem Constant 0>
		push_mem:6 == 550 <.define addr Register b>
		push_mem:7 == 550 <.define value Register b>
		push_mem:9 == 550 <@ldc Register b, Constant 0>
			ldc:1 == 550 <.define writeReg Register b>
			ldc:2 == 550 <.define const Constant 0>
			ldc:4 == 550 <ldc Register a, Constant 0>
			ldc:5 == 551 <ldc Register b, Constant 12>
			ldc:6 == 552 <shl Register a, Register a, Register b>
			ldc:7 == 553 <ldc Register b, Constant 0>
			ldc:8 == 554 <or Register b, Register a, Register b>
		push_mem:10 == 555 <ldb Register b, Register b>
		push_mem:12 == 556 <@push_reg Register b>
			push_reg:10 == 556 <.define registerToPush Register b>
			push_reg:13 == 556 <ldc Register a, Constant 0>
			push_reg:14 == 557 <ldb Register a, Register a>
			push_reg:15 == 558 <stb Register a, Register b>
			push_reg:19 == 559 <ldc Register b, Constant 1>
			push_reg:20 == 560 <add Register a, Register a, Register b>
			push_reg:21 == 561 <ldc Register b, Constant 0>
			push_reg:22 == 562 <stb Register b, Register a>
	call:26 == 563 <@push_const Constant 3>
		push_const:6 == 563 <.define constantToPush Constant 3>
		push_const:12 == 563 <@ldc Register b, Constant 3>
			ldc:1 == 563 <.define writeReg Register b>
			ldc:2 == 563 <.define const Constant 3>
			ldc:4 == 563 <ldc Register a, Constant 0>
			ldc:5 == 564 <ldc Register b, Constant 12>
			ldc:6 == 565 <shl Register a, Register a, Register b>
			ldc:7 == 566 <ldc Register b, Constant 3>
			ldc:8 == 567 <or Register b, Register a, Register b>
		push_const:14 == 568 <@push_reg Register b>
			push_reg:10 == 568 <.define registerToPush Register b>
			push_reg:13 == 568 <ldc Register a, Constant 0>
			push_reg:14 == 569 <ldb Register a, Register a>
			push_reg:15 == 570 <stb Register a, Register b>
			push_reg:19 == 571 <ldc Register b, Constant 1>
			push_reg:20 == 572 <add Register a, Register a, Register b>
			push_reg:21 == 573 <ldc Register b, Constant 0>
			push_reg:22 == 574 <stb Register b, Register a>
	call:27 == 575 <@push_const Constant 0>
		push_const:6 == 575 <.define constantToPush Constant 0>
		push_const:12 == 575 <@ldc Register b, Constant 0>
			ldc:1 == 575 <.define writeReg Register b>
			ldc:2 == 575 <.define const Constant 0>
			ldc:4 == 575 <ldc Register a, Constant 0>
			ldc:5 == 576 <ldc Register b, Constant 12>
			ldc:6 == 577 <shl Register a, Register a, Register b>
			ldc:7 == 578 <ldc Register b, Constant 0>
			ldc:8 == 579 <or Register b, Register a, Register b>
		push_const:14 == 580 <@push_reg Register b>
			push_reg:10 == 580 <.define registerToPush Register b>
			push_reg:13 == 580 <ldc Register a, Constant 0>
			push_reg:14 == 581 <ldb Register a, Register a>
			push_reg:15 == 582 <stb Register a, Register b>
			push_reg:19 == 583 <ldc Register b, Constant 1>
			push_reg:20 == 584 <add Register a, Register a, Register b>
			push_reg:21 == 585 <ldc Register b, Constant 0>
			push_reg:22 == 586 <stb Register b, Register a>
	call:28 == 587 <@add >
		add:3 == 587 <.define lhs Register c>
		add:4 == 587 <.define rhs Register d>
		add:5 == 587 <.define result Register d>
		add:7 == 587 <@pop_reg Register d>
			pop_reg:10 == 587 <.define registerToLoad Register d>
			pop_reg:13 == 587 <ldc Register a, Constant 0>
			pop_reg:14 == 588 <ldb Register a, Register a>
			pop_reg:15 == 589 <ldc Register b, Constant 1>
			pop_reg:16 == 590 <sub Register a, Register a, Register b>
			pop_reg:17 == 591 <ldc Register b, Constant 0>
			pop_reg:18 == 592 <stb Register b, Register a>
			pop_reg:22 == 593 <ldb Register a, Register d>
		add:8 == 594 <@pop_reg Register c>
			pop_reg:10 == 594 <.define registerToLoad Register c>
			pop_reg:13 == 594 <ldc Register a, Constant 0>
			pop_reg:14 == 595 <ldb Register a, Register a>
			pop_reg:15 == 596 <ldc Register b, Constant 1>
			pop_reg:16 == 597 <sub Register a, Register a, Register b>
			pop_reg:17 == 598 <ldc Register b, Constant 0>
			pop_reg:18 == 599 <stb Register b, Register a>
			pop_reg:22 == 600 <ldb Register a, Register c>
		add:9 == 601 <add Register d, Register c, Register d>
		add:10 == 602 <@push_reg Register d>
			push_reg:10 == 602 <.define registerToPush Register d>
			push_reg:13 == 602 <ldc Register a, Constant 0>
			push_reg:14 == 603 <ldb Register a, Register a>
			push_reg:15 == 604 <stb Register a, Register d>
			push_reg:19 == 605 <ldc Register b, Constant 1>
			push_reg:20 == 606 <add Register a, Register a, Register b>
			push_reg:21 == 607 <ldc Register b, Constant 0>
			push_reg:22 == 608 <stb Register b, Register a>
	call:29 == 609 <@sub >
		sub:3 == 609 <.define lhs Register c>
		sub:4 == 609 <.define rhs Register d>
		sub:5 == 609 <.define result Register d>
		sub:7 == 609 <@pop_reg Register d>
			pop_reg:10 == 609 <.define registerToLoad Register d>
			pop_reg:13 == 609 <ldc Register a, Constant 0>
			pop_reg:14 == 610 <ldb Register a, Register a>
			pop_reg:15 == 611 <ldc Register b, Constant 1>
			pop_reg:16 == 612 <sub Register a, Register a, Register b>
			pop_reg:17 == 613 <ldc Register b, Constant 0>
			pop_reg:18 == 614 <stb Register b, Register a>
			pop_reg:22 == 615 <ldb Register a, Register d>
		sub:8 == 616 <@pop_reg Register c>
			pop_reg:10 == 616 <.define registerToLoad Register c>
			pop_reg:13 == 616 <ldc Register a, Constant 0>
			pop_reg:14 == 617 <ldb Register a, Register a>
			pop_reg:15 == 618 <ldc Register b, Constant 1>
			pop_reg:16 == 619 <sub Register a, Register a, Register b>
			pop_reg:17 == 620 <ldc Register b, Constant 0>
			pop_reg:18 == 621 <stb Register b, Register a>
			pop_reg:22 == 622 <ldb Register a, Register c>
		sub:9 == 623 <sub Register d, Register c, Register d>
		sub:10 == 624 <@push_reg Register d>
			push_reg:10 == 624 <.define registerToPush Register d>
			push_reg:13 == 624 <ldc Register a, Constant 0>
			push_reg:14 == 625 <ldb Register a, Register a>
			push_reg:15 == 626 <stb Register a, Register d>
			push_reg:19 == 627 <ldc Register b, Constant 1>
			push_reg:20 == 628 <add Register a, Register a, Register b>
			push_reg:21 == 629 <ldc Register b, Constant 0>
			push_reg:22 == 630 <stb Register b, Register a>
	call:30 == 631 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 631 <.define val Register c>
		pop_mem_v:7 == 631 <.define addr Constant 2>
		pop_mem_v:9 == 631 <@pop_reg Register c>
			pop_reg:10 == 631 <.define registerToLoad Register c>
			pop_reg:13 == 631 <ldc Register a, Constant 0>
			pop_reg:14 == 632 <ldb Register a, Register a>
			pop_reg:15 == 633 <ldc Register b, Constant 1>
			pop_reg:16 == 634 <sub Register a, Register a, Register b>
			pop_reg:17 == 635 <ldc Register b, Constant 0>
			pop_reg:18 == 636 <stb Register b, Register a>
			pop_reg:22 == 637 <ldb Register a, Register c>
		pop_mem_v:11 == 638 <@ldc Register b, Constant 2>
			ldc:1 == 638 <.define writeReg Register b>
			ldc:2 == 638 <.define const Constant 2>
			ldc:4 == 638 <ldc Register a, Constant 0>
			ldc:5 == 639 <ldc Register b, Constant 12>
			ldc:6 == 640 <shl Register a, Register a, Register b>
			ldc:7 == 641 <ldc Register b, Constant 2>
			ldc:8 == 642 <or Register b, Register a, Register b>
		pop_mem_v:12 == 643 <stb Register b, Register c>
	call:32 == 644 <@ldc Register a, Constant 1893>
		ldc:1 == 644 <.define writeReg Register a>
		ldc:2 == 644 <.define const Constant 1893>
		ldc:4 == 644 <ldc Register a, Constant 0>
		ldc:5 == 645 <ldc Register b, Constant 12>
		ldc:6 == 646 <shl Register a, Register a, Register b>
		ldc:7 == 647 <ldc Register b, Constant 1893>
		ldc:8 == 648 <or Register a, Register a, Register b>
	call:33 == 649 <jmp Register a>
	call:38 == 650 <ldc Register d, Constant 2>
	call:41 == 651 <ldb Register d, Register d>
	call:43 == 652 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 652 <.define val Register c>
		pop_mem_v:7 == 652 <.define addr Constant 3>
		pop_mem_v:9 == 652 <@pop_reg Register c>
			pop_reg:10 == 652 <.define registerToLoad Register c>
			pop_reg:13 == 652 <ldc Register a, Constant 0>
			pop_reg:14 == 653 <ldb Register a, Register a>
			pop_reg:15 == 654 <ldc Register b, Constant 1>
			pop_reg:16 == 655 <sub Register a, Register a, Register b>
			pop_reg:17 == 656 <ldc Register b, Constant 0>
			pop_reg:18 == 657 <stb Register b, Register a>
			pop_reg:22 == 658 <ldb Register a, Register c>
		pop_mem_v:11 == 659 <@ldc Register b, Constant 3>
			ldc:1 == 659 <.define writeReg Register b>
			ldc:2 == 659 <.define const Constant 3>
			ldc:4 == 659 <ldc Register a, Constant 0>
			ldc:5 == 660 <ldc Register b, Constant 12>
			ldc:6 == 661 <shl Register a, Register a, Register b>
			ldc:7 == 662 <ldc Register b, Constant 3>
			ldc:8 == 663 <or Register b, Register a, Register b>
		pop_mem_v:12 == 664 <stb Register b, Register c>
	call:44 == 665 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 665 <.define val Register c>
		pop_mem_v:7 == 665 <.define addr Constant 2>
		pop_mem_v:9 == 665 <@pop_reg Register c>
			pop_reg:10 == 665 <.define registerToLoad Register c>
			pop_reg:13 == 665 <ldc Register a, Constant 0>
			pop_reg:14 == 666 <ldb Register a, Register a>
			pop_reg:15 == 667 <ldc Register b, Constant 1>
			pop_reg:16 == 668 <sub Register a, Register a, Register b>
			pop_reg:17 == 669 <ldc Register b, Constant 0>
			pop_reg:18 == 670 <stb Register b, Register a>
			pop_reg:22 == 671 <ldb Register a, Register c>
		pop_mem_v:11 == 672 <@ldc Register b, Constant 2>
			ldc:1 == 672 <.define writeReg Register b>
			ldc:2 == 672 <.define const Constant 2>
			ldc:4 == 672 <ldc Register a, Constant 0>
			ldc:5 == 673 <ldc Register b, Constant 12>
			ldc:6 == 674 <shl Register a, Register a, Register b>
			ldc:7 == 675 <ldc Register b, Constant 2>
			ldc:8 == 676 <or Register b, Register a, Register b>
		pop_mem_v:12 == 677 <stb Register b, Register c>
	call:46 == 678 <ldc Register c, Constant 0>
	call:47 == 679 <stb Register c, Register d>
pong.pa2:79 == 680 <@ldc Register a, Constant 176>
	ldc:1 == 680 <.define writeReg Register a>
	ldc:2 == 680 <.define const Constant 176>
	ldc:4 == 680 <ldc Register a, Constant 0>
	ldc:5 == 681 <ldc Register b, Constant 12>
	ldc:6 == 682 <shl Register a, Register a, Register b>
	ldc:7 == 683 <ldc Register b, Constant 176>
	ldc:8 == 684 <or Register a, Register a, Register b>
pong.pa2:80 == 685 <jump Register a>
pong.pa2:86 == 686 <@function Constant 0>
	function:19 == 686 <.define loccount Constant 0>
	function:22 == 686 <ldc Register a, Constant 0>
	function:23 == 687 <ldb Register a, Register a>
	function:24 == 688 <ldc Register b, Constant 3>
	function:25 == 689 <stb Register b, Register a>
	function:28 == 690 <ldc Register a, Constant 0>
	function:29 == 691 <ldb Register a, Register b>
	function:30 == 692 <ldc Register c, Constant 0>
	function:31 == 693 <add Register b, Register b, Register c>
	function:32 == 694 <stb Register a, Register b>
pong.pa2:89 == 695 <ldc Register a, Constant 22>
pong.pa2:90 == 696 <ldc Register b, Constant 0>
pong.pa2:91 == 697 <stb Register a, Register b>
pong.pa2:93 == 698 <ldc Register a, Constant 18>
pong.pa2:94 == 699 <ldc Register b, Constant 32>
pong.pa2:95 == 700 <stb Register a, Register b>
pong.pa2:97 == 701 <ldc Register a, Constant 19>
pong.pa2:98 == 702 <ldc Register b, Constant 32>
pong.pa2:99 == 703 <stb Register a, Register b>
pong.pa2:106 == 704 <@ldc Register a, Constant 65535>
	ldc:1 == 704 <.define writeReg Register a>
	ldc:2 == 704 <.define const Constant 65535>
	ldc:4 == 704 <ldc Register a, Constant 15>
	ldc:5 == 705 <ldc Register b, Constant 12>
	ldc:6 == 706 <shl Register a, Register a, Register b>
	ldc:7 == 707 <ldc Register b, Constant 4095>
	ldc:8 == 708 <or Register a, Register a, Register b>
pong.pa2:107 == 709 <ldb Register a, Register a>
pong.pa2:113 == 710 <ldc Register b, Constant 1>
pong.pa2:114 == 711 <and Register a, Register a, Register b>
pong.pa2:116 == 712 <ldc Register b, Constant 2>
pong.pa2:117 == 713 <mul Register a, Register a, Register b>
pong.pa2:119 == 714 <ldc Register b, Constant 1>
pong.pa2:120 == 715 <sub Register a, Register a, Register b>
pong.pa2:122 == 716 <ldc Register b, Constant 20>
pong.pa2:123 == 717 <stb Register b, Register a>
pong.pa2:127 == 718 <ldc Register b, Constant 2>
pong.pa2:128 == 719 <and Register a, Register a, Register b>
pong.pa2:130 == 720 <ldc Register b, Constant 2>
pong.pa2:131 == 721 <mul Register a, Register a, Register b>
pong.pa2:133 == 722 <ldc Register b, Constant 1>
pong.pa2:134 == 723 <sub Register a, Register a, Register b>
pong.pa2:136 == 724 <ldc Register b, Constant 21>
pong.pa2:137 == 725 <stb Register b, Register a>
pong.pa2:139 == 726 <@return >
	return:2 == 726 <ldc Register b, Constant 3>
	return:3 == 727 <ldb Register b, Register b>
	return:4 == 728 <ldc Register a, Constant 0>
	return:5 == 729 <stb Register a, Register b>
	return:7 == 730 <@pop_reg Register d>
		pop_reg:10 == 730 <.define registerToLoad Register d>
		pop_reg:13 == 730 <ldc Register a, Constant 0>
		pop_reg:14 == 731 <ldb Register a, Register a>
		pop_reg:15 == 732 <ldc Register b, Constant 1>
		pop_reg:16 == 733 <sub Register a, Register a, Register b>
		pop_reg:17 == 734 <ldc Register b, Constant 0>
		pop_reg:18 == 735 <stb Register b, Register a>
		pop_reg:22 == 736 <ldb Register a, Register d>
	return:9 == 737 <jump Register d>
pong.pa2:150 == 738 <@function Constant 0>
	function:19 == 738 <.define loccount Constant 0>
	function:22 == 738 <ldc Register a, Constant 0>
	function:23 == 739 <ldb Register a, Register a>
	function:24 == 740 <ldc Register b, Constant 3>
	function:25 == 741 <stb Register b, Register a>
	function:28 == 742 <ldc Register a, Constant 0>
	function:29 == 743 <ldb Register a, Register b>
	function:30 == 744 <ldc Register c, Constant 0>
	function:31 == 745 <add Register b, Register b, Register c>
	function:32 == 746 <stb Register a, Register b>
pong.pa2:157 == 747 <@push_const Constant 128>
	push_const:6 == 747 <.define constantToPush Constant 128>
	push_const:12 == 747 <@ldc Register b, Constant 128>
		ldc:1 == 747 <.define writeReg Register b>
		ldc:2 == 747 <.define const Constant 128>
		ldc:4 == 747 <ldc Register a, Constant 0>
		ldc:5 == 748 <ldc Register b, Constant 12>
		ldc:6 == 749 <shl Register a, Register a, Register b>
		ldc:7 == 750 <ldc Register b, Constant 128>
		ldc:8 == 751 <or Register b, Register a, Register b>
	push_const:14 == 752 <@push_reg Register b>
		push_reg:10 == 752 <.define registerToPush Register b>
		push_reg:13 == 752 <ldc Register a, Constant 0>
		push_reg:14 == 753 <ldb Register a, Register a>
		push_reg:15 == 754 <stb Register a, Register b>
		push_reg:19 == 755 <ldc Register b, Constant 1>
		push_reg:20 == 756 <add Register a, Register a, Register b>
		push_reg:21 == 757 <ldc Register b, Constant 0>
		push_reg:22 == 758 <stb Register b, Register a>
pong.pa2:158 == 759 <@call_value Constant 1601, Constant 1>
	call_value:1 == 759 <@call Constant 1601, Constant 1>
		call:11 == 759 <.define functionLabel Constant 1601>
		call:12 == 759 <.define argcount Constant 1>
		call:15 == 759 <@push_mem Constant 2>
			push_mem:6 == 759 <.define addr Register b>
			push_mem:7 == 759 <.define value Register b>
			push_mem:9 == 759 <@ldc Register b, Constant 2>
				ldc:1 == 759 <.define writeReg Register b>
				ldc:2 == 759 <.define const Constant 2>
				ldc:4 == 759 <ldc Register a, Constant 0>
				ldc:5 == 760 <ldc Register b, Constant 12>
				ldc:6 == 761 <shl Register a, Register a, Register b>
				ldc:7 == 762 <ldc Register b, Constant 2>
				ldc:8 == 763 <or Register b, Register a, Register b>
			push_mem:10 == 764 <ldb Register b, Register b>
			push_mem:12 == 765 <@push_reg Register b>
				push_reg:10 == 765 <.define registerToPush Register b>
				push_reg:13 == 765 <ldc Register a, Constant 0>
				push_reg:14 == 766 <ldb Register a, Register a>
				push_reg:15 == 767 <stb Register a, Register b>
				push_reg:19 == 768 <ldc Register b, Constant 1>
				push_reg:20 == 769 <add Register a, Register a, Register b>
				push_reg:21 == 770 <ldc Register b, Constant 0>
				push_reg:22 == 771 <stb Register b, Register a>
		call:16 == 772 <@push_mem Constant 3>
			push_mem:6 == 772 <.define addr Register b>
			push_mem:7 == 772 <.define value Register b>
			push_mem:9 == 772 <@ldc Register b, Constant 3>
				ldc:1 == 772 <.define writeReg Register b>
				ldc:2 == 772 <.define const Constant 3>
				ldc:4 == 772 <ldc Register a, Constant 0>
				ldc:5 == 773 <ldc Register b, Constant 12>
				ldc:6 == 774 <shl Register a, Register a, Register b>
				ldc:7 == 775 <ldc Register b, Constant 3>
				ldc:8 == 776 <or Register b, Register a, Register b>
			push_mem:10 == 777 <ldb Register b, Register b>
			push_mem:12 == 778 <@push_reg Register b>
				push_reg:10 == 778 <.define registerToPush Register b>
				push_reg:13 == 778 <ldc Register a, Constant 0>
				push_reg:14 == 779 <ldb Register a, Register a>
				push_reg:15 == 780 <stb Register a, Register b>
				push_reg:19 == 781 <ldc Register b, Constant 1>
				push_reg:20 == 782 <add Register a, Register a, Register b>
				push_reg:21 == 783 <ldc Register b, Constant 0>
				push_reg:22 == 784 <stb Register b, Register a>
		call:19 == 785 <@push_const Constant 897>
			push_const:6 == 785 <.define constantToPush Constant 897>
			push_const:12 == 785 <@ldc Register b, Constant 897>
				ldc:1 == 785 <.define writeReg Register b>
				ldc:2 == 785 <.define const Constant 897>
				ldc:4 == 785 <ldc Register a, Constant 0>
				ldc:5 == 786 <ldc Register b, Constant 12>
				ldc:6 == 787 <shl Register a, Register a, Register b>
				ldc:7 == 788 <ldc Register b, Constant 897>
				ldc:8 == 789 <or Register b, Register a, Register b>
			push_const:14 == 790 <@push_reg Register b>
				push_reg:10 == 790 <.define registerToPush Register b>
				push_reg:13 == 790 <ldc Register a, Constant 0>
				push_reg:14 == 791 <ldb Register a, Register a>
				push_reg:15 == 792 <stb Register a, Register b>
				push_reg:19 == 793 <ldc Register b, Constant 1>
				push_reg:20 == 794 <add Register a, Register a, Register b>
				push_reg:21 == 795 <ldc Register b, Constant 0>
				push_reg:22 == 796 <stb Register b, Register a>
		call:24 == 797 <@push_mem Constant 0>
			push_mem:6 == 797 <.define addr Register b>
			push_mem:7 == 797 <.define value Register b>
			push_mem:9 == 797 <@ldc Register b, Constant 0>
				ldc:1 == 797 <.define writeReg Register b>
				ldc:2 == 797 <.define const Constant 0>
				ldc:4 == 797 <ldc Register a, Constant 0>
				ldc:5 == 798 <ldc Register b, Constant 12>
				ldc:6 == 799 <shl Register a, Register a, Register b>
				ldc:7 == 800 <ldc Register b, Constant 0>
				ldc:8 == 801 <or Register b, Register a, Register b>
			push_mem:10 == 802 <ldb Register b, Register b>
			push_mem:12 == 803 <@push_reg Register b>
				push_reg:10 == 803 <.define registerToPush Register b>
				push_reg:13 == 803 <ldc Register a, Constant 0>
				push_reg:14 == 804 <ldb Register a, Register a>
				push_reg:15 == 805 <stb Register a, Register b>
				push_reg:19 == 806 <ldc Register b, Constant 1>
				push_reg:20 == 807 <add Register a, Register a, Register b>
				push_reg:21 == 808 <ldc Register b, Constant 0>
				push_reg:22 == 809 <stb Register b, Register a>
		call:26 == 810 <@push_const Constant 3>
			push_const:6 == 810 <.define constantToPush Constant 3>
			push_const:12 == 810 <@ldc Register b, Constant 3>
				ldc:1 == 810 <.define writeReg Register b>
				ldc:2 == 810 <.define const Constant 3>
				ldc:4 == 810 <ldc Register a, Constant 0>
				ldc:5 == 811 <ldc Register b, Constant 12>
				ldc:6 == 812 <shl Register a, Register a, Register b>
				ldc:7 == 813 <ldc Register b, Constant 3>
				ldc:8 == 814 <or Register b, Register a, Register b>
			push_const:14 == 815 <@push_reg Register b>
				push_reg:10 == 815 <.define registerToPush Register b>
				push_reg:13 == 815 <ldc Register a, Constant 0>
				push_reg:14 == 816 <ldb Register a, Register a>
				push_reg:15 == 817 <stb Register a, Register b>
				push_reg:19 == 818 <ldc Register b, Constant 1>
				push_reg:20 == 819 <add Register a, Register a, Register b>
				push_reg:21 == 820 <ldc Register b, Constant 0>
				push_reg:22 == 821 <stb Register b, Register a>
		call:27 == 822 <@push_const Constant 1>
			push_const:6 == 822 <.define constantToPush Constant 1>
			push_const:12 == 822 <@ldc Register b, Constant 1>
				ldc:1 == 822 <.define writeReg Register b>
				ldc:2 == 822 <.define const Constant 1>
				ldc:4 == 822 <ldc Register a, Constant 0>
				ldc:5 == 823 <ldc Register b, Constant 12>
				ldc:6 == 824 <shl Register a, Register a, Register b>
				ldc:7 == 825 <ldc Register b, Constant 1>
				ldc:8 == 826 <or Register b, Register a, Register b>
			push_const:14 == 827 <@push_reg Register b>
				push_reg:10 == 827 <.define registerToPush Register b>
				push_reg:13 == 827 <ldc Register a, Constant 0>
				push_reg:14 == 828 <ldb Register a, Register a>
				push_reg:15 == 829 <stb Register a, Register b>
				push_reg:19 == 830 <ldc Register b, Constant 1>
				push_reg:20 == 831 <add Register a, Register a, Register b>
				push_reg:21 == 832 <ldc Register b, Constant 0>
				push_reg:22 == 833 <stb Register b, Register a>
		call:28 == 834 <@add >
			add:3 == 834 <.define lhs Register c>
			add:4 == 834 <.define rhs Register d>
			add:5 == 834 <.define result Register d>
			add:7 == 834 <@pop_reg Register d>
				pop_reg:10 == 834 <.define registerToLoad Register d>
				pop_reg:13 == 834 <ldc Register a, Constant 0>
				pop_reg:14 == 835 <ldb Register a, Register a>
				pop_reg:15 == 836 <ldc Register b, Constant 1>
				pop_reg:16 == 837 <sub Register a, Register a, Register b>
				pop_reg:17 == 838 <ldc Register b, Constant 0>
				pop_reg:18 == 839 <stb Register b, Register a>
				pop_reg:22 == 840 <ldb Register a, Register d>
			add:8 == 841 <@pop_reg Register c>
				pop_reg:10 == 841 <.define registerToLoad Register c>
				pop_reg:13 == 841 <ldc Register a, Constant 0>
				pop_reg:14 == 842 <ldb Register a, Register a>
				pop_reg:15 == 843 <ldc Register b, Constant 1>
				pop_reg:16 == 844 <sub Register a, Register a, Register b>
				pop_reg:17 == 845 <ldc Register b, Constant 0>
				pop_reg:18 == 846 <stb Register b, Register a>
				pop_reg:22 == 847 <ldb Register a, Register c>
			add:9 == 848 <add Register d, Register c, Register d>
			add:10 == 849 <@push_reg Register d>
				push_reg:10 == 849 <.define registerToPush Register d>
				push_reg:13 == 849 <ldc Register a, Constant 0>
				push_reg:14 == 850 <ldb Register a, Register a>
				push_reg:15 == 851 <stb Register a, Register d>
				push_reg:19 == 852 <ldc Register b, Constant 1>
				push_reg:20 == 853 <add Register a, Register a, Register b>
				push_reg:21 == 854 <ldc Register b, Constant 0>
				push_reg:22 == 855 <stb Register b, Register a>
		call:29 == 856 <@sub >
			sub:3 == 856 <.define lhs Register c>
			sub:4 == 856 <.define rhs Register d>
			sub:5 == 856 <.define result Register d>
			sub:7 == 856 <@pop_reg Register d>
				pop_reg:10 == 856 <.define registerToLoad Register d>
				pop_reg:13 == 856 <ldc Register a, Constant 0>
				pop_reg:14 == 857 <ldb Register a, Register a>
				pop_reg:15 == 858 <ldc Register b, Constant 1>
				pop_reg:16 == 859 <sub Register a, Register a, Register b>
				pop_reg:17 == 860 <ldc Register b, Constant 0>
				pop_reg:18 == 861 <stb Register b, Register a>
				pop_reg:22 == 862 <ldb Register a, Register d>
			sub:8 == 863 <@pop_reg Register c>
				pop_reg:10 == 863 <.define registerToLoad Register c>
				pop_reg:13 == 863 <ldc Register a, Constant 0>
				pop_reg:14 == 864 <ldb Register a, Register a>
				pop_reg:15 == 865 <ldc Register b, Constant 1>
				pop_reg:16 == 866 <sub Register a, Register a, Register b>
				pop_reg:17 == 867 <ldc Register b, Constant 0>
				pop_reg:18 == 868 <stb Register b, Register a>
				pop_reg:22 == 869 <ldb Register a, Register c>
			sub:9 == 870 <sub Register d, Register c, Register d>
			sub:10 == 871 <@push_reg Register d>
				push_reg:10 == 871 <.define registerToPush Register d>
				push_reg:13 == 871 <ldc Register a, Constant 0>
				push_reg:14 == 872 <ldb Register a, Register a>
				push_reg:15 == 873 <stb Register a, Register d>
				push_reg:19 == 874 <ldc Register b, Constant 1>
				push_reg:20 == 875 <add Register a, Register a, Register b>
				push_reg:21 == 876 <ldc Register b, Constant 0>
				push_reg:22 == 877 <stb Register b, Register a>
		call:30 == 878 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 878 <.define val Register c>
			pop_mem_v:7 == 878 <.define addr Constant 2>
			pop_mem_v:9 == 878 <@pop_reg Register c>
				pop_reg:10 == 878 <.define registerToLoad Register c>
				pop_reg:13 == 878 <ldc Register a, Constant 0>
				pop_reg:14 == 879 <ldb Register a, Register a>
				pop_reg:15 == 880 <ldc Register b, Constant 1>
				pop_reg:16 == 881 <sub Register a, Register a, Register b>
				pop_reg:17 == 882 <ldc Register b, Constant 0>
				pop_reg:18 == 883 <stb Register b, Register a>
				pop_reg:22 == 884 <ldb Register a, Register c>
			pop_mem_v:11 == 885 <@ldc Register b, Constant 2>
				ldc:1 == 885 <.define writeReg Register b>
				ldc:2 == 885 <.define const Constant 2>
				ldc:4 == 885 <ldc Register a, Constant 0>
				ldc:5 == 886 <ldc Register b, Constant 12>
				ldc:6 == 887 <shl Register a, Register a, Register b>
				ldc:7 == 888 <ldc Register b, Constant 2>
				ldc:8 == 889 <or Register b, Register a, Register b>
			pop_mem_v:12 == 890 <stb Register b, Register c>
		call:32 == 891 <@ldc Register a, Constant 1601>
			ldc:1 == 891 <.define writeReg Register a>
			ldc:2 == 891 <.define const Constant 1601>
			ldc:4 == 891 <ldc Register a, Constant 0>
			ldc:5 == 892 <ldc Register b, Constant 12>
			ldc:6 == 893 <shl Register a, Register a, Register b>
			ldc:7 == 894 <ldc Register b, Constant 1601>
			ldc:8 == 895 <or Register a, Register a, Register b>
		call:33 == 896 <jmp Register a>
		call:38 == 897 <ldc Register d, Constant 2>
		call:41 == 898 <ldb Register d, Register d>
		call:43 == 899 <@pop_mem_v Constant 3>
			pop_mem_v:6 == 899 <.define val Register c>
			pop_mem_v:7 == 899 <.define addr Constant 3>
			pop_mem_v:9 == 899 <@pop_reg Register c>
				pop_reg:10 == 899 <.define registerToLoad Register c>
				pop_reg:13 == 899 <ldc Register a, Constant 0>
				pop_reg:14 == 900 <ldb Register a, Register a>
				pop_reg:15 == 901 <ldc Register b, Constant 1>
				pop_reg:16 == 902 <sub Register a, Register a, Register b>
				pop_reg:17 == 903 <ldc Register b, Constant 0>
				pop_reg:18 == 904 <stb Register b, Register a>
				pop_reg:22 == 905 <ldb Register a, Register c>
			pop_mem_v:11 == 906 <@ldc Register b, Constant 3>
				ldc:1 == 906 <.define writeReg Register b>
				ldc:2 == 906 <.define const Constant 3>
				ldc:4 == 906 <ldc Register a, Constant 0>
				ldc:5 == 907 <ldc Register b, Constant 12>
				ldc:6 == 908 <shl Register a, Register a, Register b>
				ldc:7 == 909 <ldc Register b, Constant 3>
				ldc:8 == 910 <or Register b, Register a, Register b>
			pop_mem_v:12 == 911 <stb Register b, Register c>
		call:44 == 912 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 912 <.define val Register c>
			pop_mem_v:7 == 912 <.define addr Constant 2>
			pop_mem_v:9 == 912 <@pop_reg Register c>
				pop_reg:10 == 912 <.define registerToLoad Register c>
				pop_reg:13 == 912 <ldc Register a, Constant 0>
				pop_reg:14 == 913 <ldb Register a, Register a>
				pop_reg:15 == 914 <ldc Register b, Constant 1>
				pop_reg:16 == 915 <sub Register a, Register a, Register b>
				pop_reg:17 == 916 <ldc Register b, Constant 0>
				pop_reg:18 == 917 <stb Register b, Register a>
				pop_reg:22 == 918 <ldb Register a, Register c>
			pop_mem_v:11 == 919 <@ldc Register b, Constant 2>
				ldc:1 == 919 <.define writeReg Register b>
				ldc:2 == 919 <.define const Constant 2>
				ldc:4 == 919 <ldc Register a, Constant 0>
				ldc:5 == 920 <ldc Register b, Constant 12>
				ldc:6 == 921 <shl Register a, Register a, Register b>
				ldc:7 == 922 <ldc Register b, Constant 2>
				ldc:8 == 923 <or Register b, Register a, Register b>
			pop_mem_v:12 == 924 <stb Register b, Register c>
		call:46 == 925 <ldc Register c, Constant 0>
		call:47 == 926 <stb Register c, Register d>
	call_value:3 == 927 <@push_mem Constant 1>
		push_mem:6 == 927 <.define addr Register b>
		push_mem:7 == 927 <.define value Register b>
		push_mem:9 == 927 <@ldc Register b, Constant 1>
			ldc:1 == 927 <.define writeReg Register b>
			ldc:2 == 927 <.define const Constant 1>
			ldc:4 == 927 <ldc Register a, Constant 0>
			ldc:5 == 928 <ldc Register b, Constant 12>
			ldc:6 == 929 <shl Register a, Register a, Register b>
			ldc:7 == 930 <ldc Register b, Constant 1>
			ldc:8 == 931 <or Register b, Register a, Register b>
		push_mem:10 == 932 <ldb Register b, Register b>
		push_mem:12 == 933 <@push_reg Register b>
			push_reg:10 == 933 <.define registerToPush Register b>
			push_reg:13 == 933 <ldc Register a, Constant 0>
			push_reg:14 == 934 <ldb Register a, Register a>
			push_reg:15 == 935 <stb Register a, Register b>
			push_reg:19 == 936 <ldc Register b, Constant 1>
			push_reg:20 == 937 <add Register a, Register a, Register b>
			push_reg:21 == 938 <ldc Register b, Constant 0>
			push_reg:22 == 939 <stb Register b, Register a>
pong.pa2:160 == 940 <@push_const Constant 64>
	push_const:6 == 940 <.define constantToPush Constant 64>
	push_const:12 == 940 <@ldc Register b, Constant 64>
		ldc:1 == 940 <.define writeReg Register b>
		ldc:2 == 940 <.define const Constant 64>
		ldc:4 == 940 <ldc Register a, Constant 0>
		ldc:5 == 941 <ldc Register b, Constant 12>
		ldc:6 == 942 <shl Register a, Register a, Register b>
		ldc:7 == 943 <ldc Register b, Constant 64>
		ldc:8 == 944 <or Register b, Register a, Register b>
	push_const:14 == 945 <@push_reg Register b>
		push_reg:10 == 945 <.define registerToPush Register b>
		push_reg:13 == 945 <ldc Register a, Constant 0>
		push_reg:14 == 946 <ldb Register a, Register a>
		push_reg:15 == 947 <stb Register a, Register b>
		push_reg:19 == 948 <ldc Register b, Constant 1>
		push_reg:20 == 949 <add Register a, Register a, Register b>
		push_reg:21 == 950 <ldc Register b, Constant 0>
		push_reg:22 == 951 <stb Register b, Register a>
pong.pa2:161 == 952 <@call_value Constant 1601, Constant 1>
	call_value:1 == 952 <@call Constant 1601, Constant 1>
		call:11 == 952 <.define functionLabel Constant 1601>
		call:12 == 952 <.define argcount Constant 1>
		call:15 == 952 <@push_mem Constant 2>
			push_mem:6 == 952 <.define addr Register b>
			push_mem:7 == 952 <.define value Register b>
			push_mem:9 == 952 <@ldc Register b, Constant 2>
				ldc:1 == 952 <.define writeReg Register b>
				ldc:2 == 952 <.define const Constant 2>
				ldc:4 == 952 <ldc Register a, Constant 0>
				ldc:5 == 953 <ldc Register b, Constant 12>
				ldc:6 == 954 <shl Register a, Register a, Register b>
				ldc:7 == 955 <ldc Register b, Constant 2>
				ldc:8 == 956 <or Register b, Register a, Register b>
			push_mem:10 == 957 <ldb Register b, Register b>
			push_mem:12 == 958 <@push_reg Register b>
				push_reg:10 == 958 <.define registerToPush Register b>
				push_reg:13 == 958 <ldc Register a, Constant 0>
				push_reg:14 == 959 <ldb Register a, Register a>
				push_reg:15 == 960 <stb Register a, Register b>
				push_reg:19 == 961 <ldc Register b, Constant 1>
				push_reg:20 == 962 <add Register a, Register a, Register b>
				push_reg:21 == 963 <ldc Register b, Constant 0>
				push_reg:22 == 964 <stb Register b, Register a>
		call:16 == 965 <@push_mem Constant 3>
			push_mem:6 == 965 <.define addr Register b>
			push_mem:7 == 965 <.define value Register b>
			push_mem:9 == 965 <@ldc Register b, Constant 3>
				ldc:1 == 965 <.define writeReg Register b>
				ldc:2 == 965 <.define const Constant 3>
				ldc:4 == 965 <ldc Register a, Constant 0>
				ldc:5 == 966 <ldc Register b, Constant 12>
				ldc:6 == 967 <shl Register a, Register a, Register b>
				ldc:7 == 968 <ldc Register b, Constant 3>
				ldc:8 == 969 <or Register b, Register a, Register b>
			push_mem:10 == 970 <ldb Register b, Register b>
			push_mem:12 == 971 <@push_reg Register b>
				push_reg:10 == 971 <.define registerToPush Register b>
				push_reg:13 == 971 <ldc Register a, Constant 0>
				push_reg:14 == 972 <ldb Register a, Register a>
				push_reg:15 == 973 <stb Register a, Register b>
				push_reg:19 == 974 <ldc Register b, Constant 1>
				push_reg:20 == 975 <add Register a, Register a, Register b>
				push_reg:21 == 976 <ldc Register b, Constant 0>
				push_reg:22 == 977 <stb Register b, Register a>
		call:19 == 978 <@push_const Constant 1090>
			push_const:6 == 978 <.define constantToPush Constant 1090>
			push_const:12 == 978 <@ldc Register b, Constant 1090>
				ldc:1 == 978 <.define writeReg Register b>
				ldc:2 == 978 <.define const Constant 1090>
				ldc:4 == 978 <ldc Register a, Constant 0>
				ldc:5 == 979 <ldc Register b, Constant 12>
				ldc:6 == 980 <shl Register a, Register a, Register b>
				ldc:7 == 981 <ldc Register b, Constant 1090>
				ldc:8 == 982 <or Register b, Register a, Register b>
			push_const:14 == 983 <@push_reg Register b>
				push_reg:10 == 983 <.define registerToPush Register b>
				push_reg:13 == 983 <ldc Register a, Constant 0>
				push_reg:14 == 984 <ldb Register a, Register a>
				push_reg:15 == 985 <stb Register a, Register b>
				push_reg:19 == 986 <ldc Register b, Constant 1>
				push_reg:20 == 987 <add Register a, Register a, Register b>
				push_reg:21 == 988 <ldc Register b, Constant 0>
				push_reg:22 == 989 <stb Register b, Register a>
		call:24 == 990 <@push_mem Constant 0>
			push_mem:6 == 990 <.define addr Register b>
			push_mem:7 == 990 <.define value Register b>
			push_mem:9 == 990 <@ldc Register b, Constant 0>
				ldc:1 == 990 <.define writeReg Register b>
				ldc:2 == 990 <.define const Constant 0>
				ldc:4 == 990 <ldc Register a, Constant 0>
				ldc:5 == 991 <ldc Register b, Constant 12>
				ldc:6 == 992 <shl Register a, Register a, Register b>
				ldc:7 == 993 <ldc Register b, Constant 0>
				ldc:8 == 994 <or Register b, Register a, Register b>
			push_mem:10 == 995 <ldb Register b, Register b>
			push_mem:12 == 996 <@push_reg Register b>
				push_reg:10 == 996 <.define registerToPush Register b>
				push_reg:13 == 996 <ldc Register a, Constant 0>
				push_reg:14 == 997 <ldb Register a, Register a>
				push_reg:15 == 998 <stb Register a, Register b>
				push_reg:19 == 999 <ldc Register b, Constant 1>
				push_reg:20 == 1000 <add Register a, Register a, Register b>
				push_reg:21 == 1001 <ldc Register b, Constant 0>
				push_reg:22 == 1002 <stb Register b, Register a>
		call:26 == 1003 <@push_const Constant 3>
			push_const:6 == 1003 <.define constantToPush Constant 3>
			push_const:12 == 1003 <@ldc Register b, Constant 3>
				ldc:1 == 1003 <.define writeReg Register b>
				ldc:2 == 1003 <.define const Constant 3>
				ldc:4 == 1003 <ldc Register a, Constant 0>
				ldc:5 == 1004 <ldc Register b, Constant 12>
				ldc:6 == 1005 <shl Register a, Register a, Register b>
				ldc:7 == 1006 <ldc Register b, Constant 3>
				ldc:8 == 1007 <or Register b, Register a, Register b>
			push_const:14 == 1008 <@push_reg Register b>
				push_reg:10 == 1008 <.define registerToPush Register b>
				push_reg:13 == 1008 <ldc Register a, Constant 0>
				push_reg:14 == 1009 <ldb Register a, Register a>
				push_reg:15 == 1010 <stb Register a, Register b>
				push_reg:19 == 1011 <ldc Register b, Constant 1>
				push_reg:20 == 1012 <add Register a, Register a, Register b>
				push_reg:21 == 1013 <ldc Register b, Constant 0>
				push_reg:22 == 1014 <stb Register b, Register a>
		call:27 == 1015 <@push_const Constant 1>
			push_const:6 == 1015 <.define constantToPush Constant 1>
			push_const:12 == 1015 <@ldc Register b, Constant 1>
				ldc:1 == 1015 <.define writeReg Register b>
				ldc:2 == 1015 <.define const Constant 1>
				ldc:4 == 1015 <ldc Register a, Constant 0>
				ldc:5 == 1016 <ldc Register b, Constant 12>
				ldc:6 == 1017 <shl Register a, Register a, Register b>
				ldc:7 == 1018 <ldc Register b, Constant 1>
				ldc:8 == 1019 <or Register b, Register a, Register b>
			push_const:14 == 1020 <@push_reg Register b>
				push_reg:10 == 1020 <.define registerToPush Register b>
				push_reg:13 == 1020 <ldc Register a, Constant 0>
				push_reg:14 == 1021 <ldb Register a, Register a>
				push_reg:15 == 1022 <stb Register a, Register b>
				push_reg:19 == 1023 <ldc Register b, Constant 1>
				push_reg:20 == 1024 <add Register a, Register a, Register b>
				push_reg:21 == 1025 <ldc Register b, Constant 0>
				push_reg:22 == 1026 <stb Register b, Register a>
		call:28 == 1027 <@add >
			add:3 == 1027 <.define lhs Register c>
			add:4 == 1027 <.define rhs Register d>
			add:5 == 1027 <.define result Register d>
			add:7 == 1027 <@pop_reg Register d>
				pop_reg:10 == 1027 <.define registerToLoad Register d>
				pop_reg:13 == 1027 <ldc Register a, Constant 0>
				pop_reg:14 == 1028 <ldb Register a, Register a>
				pop_reg:15 == 1029 <ldc Register b, Constant 1>
				pop_reg:16 == 1030 <sub Register a, Register a, Register b>
				pop_reg:17 == 1031 <ldc Register b, Constant 0>
				pop_reg:18 == 1032 <stb Register b, Register a>
				pop_reg:22 == 1033 <ldb Register a, Register d>
			add:8 == 1034 <@pop_reg Register c>
				pop_reg:10 == 1034 <.define registerToLoad Register c>
				pop_reg:13 == 1034 <ldc Register a, Constant 0>
				pop_reg:14 == 1035 <ldb Register a, Register a>
				pop_reg:15 == 1036 <ldc Register b, Constant 1>
				pop_reg:16 == 1037 <sub Register a, Register a, Register b>
				pop_reg:17 == 1038 <ldc Register b, Constant 0>
				pop_reg:18 == 1039 <stb Register b, Register a>
				pop_reg:22 == 1040 <ldb Register a, Register c>
			add:9 == 1041 <add Register d, Register c, Register d>
			add:10 == 1042 <@push_reg Register d>
				push_reg:10 == 1042 <.define registerToPush Register d>
				push_reg:13 == 1042 <ldc Register a, Constant 0>
				push_reg:14 == 1043 <ldb Register a, Register a>
				push_reg:15 == 1044 <stb Register a, Register d>
				push_reg:19 == 1045 <ldc Register b, Constant 1>
				push_reg:20 == 1046 <add Register a, Register a, Register b>
				push_reg:21 == 1047 <ldc Register b, Constant 0>
				push_reg:22 == 1048 <stb Register b, Register a>
		call:29 == 1049 <@sub >
			sub:3 == 1049 <.define lhs Register c>
			sub:4 == 1049 <.define rhs Register d>
			sub:5 == 1049 <.define result Register d>
			sub:7 == 1049 <@pop_reg Register d>
				pop_reg:10 == 1049 <.define registerToLoad Register d>
				pop_reg:13 == 1049 <ldc Register a, Constant 0>
				pop_reg:14 == 1050 <ldb Register a, Register a>
				pop_reg:15 == 1051 <ldc Register b, Constant 1>
				pop_reg:16 == 1052 <sub Register a, Register a, Register b>
				pop_reg:17 == 1053 <ldc Register b, Constant 0>
				pop_reg:18 == 1054 <stb Register b, Register a>
				pop_reg:22 == 1055 <ldb Register a, Register d>
			sub:8 == 1056 <@pop_reg Register c>
				pop_reg:10 == 1056 <.define registerToLoad Register c>
				pop_reg:13 == 1056 <ldc Register a, Constant 0>
				pop_reg:14 == 1057 <ldb Register a, Register a>
				pop_reg:15 == 1058 <ldc Register b, Constant 1>
				pop_reg:16 == 1059 <sub Register a, Register a, Register b>
				pop_reg:17 == 1060 <ldc Register b, Constant 0>
				pop_reg:18 == 1061 <stb Register b, Register a>
				pop_reg:22 == 1062 <ldb Register a, Register c>
			sub:9 == 1063 <sub Register d, Register c, Register d>
			sub:10 == 1064 <@push_reg Register d>
				push_reg:10 == 1064 <.define registerToPush Register d>
				push_reg:13 == 1064 <ldc Register a, Constant 0>
				push_reg:14 == 1065 <ldb Register a, Register a>
				push_reg:15 == 1066 <stb Register a, Register d>
				push_reg:19 == 1067 <ldc Register b, Constant 1>
				push_reg:20 == 1068 <add Register a, Register a, Register b>
				push_reg:21 == 1069 <ldc Register b, Constant 0>
				push_reg:22 == 1070 <stb Register b, Register a>
		call:30 == 1071 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 1071 <.define val Register c>
			pop_mem_v:7 == 1071 <.define addr Constant 2>
			pop_mem_v:9 == 1071 <@pop_reg Register c>
				pop_reg:10 == 1071 <.define registerToLoad Register c>
				pop_reg:13 == 1071 <ldc Register a, Constant 0>
				pop_reg:14 == 1072 <ldb Register a, Register a>
				pop_reg:15 == 1073 <ldc Register b, Constant 1>
				pop_reg:16 == 1074 <sub Register a, Register a, Register b>
				pop_reg:17 == 1075 <ldc Register b, Constant 0>
				pop_reg:18 == 1076 <stb Register b, Register a>
				pop_reg:22 == 1077 <ldb Register a, Register c>
			pop_mem_v:11 == 1078 <@ldc Register b, Constant 2>
				ldc:1 == 1078 <.define writeReg Register b>
				ldc:2 == 1078 <.define const Constant 2>
				ldc:4 == 1078 <ldc Register a, Constant 0>
				ldc:5 == 1079 <ldc Register b, Constant 12>
				ldc:6 == 1080 <shl Register a, Register a, Register b>
				ldc:7 == 1081 <ldc Register b, Constant 2>
				ldc:8 == 1082 <or Register b, Register a, Register b>
			pop_mem_v:12 == 1083 <stb Register b, Register c>
		call:32 == 1084 <@ldc Register a, Constant 1601>
			ldc:1 == 1084 <.define writeReg Register a>
			ldc:2 == 1084 <.define const Constant 1601>
			ldc:4 == 1084 <ldc Register a, Constant 0>
			ldc:5 == 1085 <ldc Register b, Constant 12>
			ldc:6 == 1086 <shl Register a, Register a, Register b>
			ldc:7 == 1087 <ldc Register b, Constant 1601>
			ldc:8 == 1088 <or Register a, Register a, Register b>
		call:33 == 1089 <jmp Register a>
		call:38 == 1090 <ldc Register d, Constant 2>
		call:41 == 1091 <ldb Register d, Register d>
		call:43 == 1092 <@pop_mem_v Constant 3>
			pop_mem_v:6 == 1092 <.define val Register c>
			pop_mem_v:7 == 1092 <.define addr Constant 3>
			pop_mem_v:9 == 1092 <@pop_reg Register c>
				pop_reg:10 == 1092 <.define registerToLoad Register c>
				pop_reg:13 == 1092 <ldc Register a, Constant 0>
				pop_reg:14 == 1093 <ldb Register a, Register a>
				pop_reg:15 == 1094 <ldc Register b, Constant 1>
				pop_reg:16 == 1095 <sub Register a, Register a, Register b>
				pop_reg:17 == 1096 <ldc Register b, Constant 0>
				pop_reg:18 == 1097 <stb Register b, Register a>
				pop_reg:22 == 1098 <ldb Register a, Register c>
			pop_mem_v:11 == 1099 <@ldc Register b, Constant 3>
				ldc:1 == 1099 <.define writeReg Register b>
				ldc:2 == 1099 <.define const Constant 3>
				ldc:4 == 1099 <ldc Register a, Constant 0>
				ldc:5 == 1100 <ldc Register b, Constant 12>
				ldc:6 == 1101 <shl Register a, Register a, Register b>
				ldc:7 == 1102 <ldc Register b, Constant 3>
				ldc:8 == 1103 <or Register b, Register a, Register b>
			pop_mem_v:12 == 1104 <stb Register b, Register c>
		call:44 == 1105 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 1105 <.define val Register c>
			pop_mem_v:7 == 1105 <.define addr Constant 2>
			pop_mem_v:9 == 1105 <@pop_reg Register c>
				pop_reg:10 == 1105 <.define registerToLoad Register c>
				pop_reg:13 == 1105 <ldc Register a, Constant 0>
				pop_reg:14 == 1106 <ldb Register a, Register a>
				pop_reg:15 == 1107 <ldc Register b, Constant 1>
				pop_reg:16 == 1108 <sub Register a, Register a, Register b>
				pop_reg:17 == 1109 <ldc Register b, Constant 0>
				pop_reg:18 == 1110 <stb Register b, Register a>
				pop_reg:22 == 1111 <ldb Register a, Register c>
			pop_mem_v:11 == 1112 <@ldc Register b, Constant 2>
				ldc:1 == 1112 <.define writeReg Register b>
				ldc:2 == 1112 <.define const Constant 2>
				ldc:4 == 1112 <ldc Register a, Constant 0>
				ldc:5 == 1113 <ldc Register b, Constant 12>
				ldc:6 == 1114 <shl Register a, Register a, Register b>
				ldc:7 == 1115 <ldc Register b, Constant 2>
				ldc:8 == 1116 <or Register b, Register a, Register b>
			pop_mem_v:12 == 1117 <stb Register b, Register c>
		call:46 == 1118 <ldc Register c, Constant 0>
		call:47 == 1119 <stb Register c, Register d>
	call_value:3 == 1120 <@push_mem Constant 1>
		push_mem:6 == 1120 <.define addr Register b>
		push_mem:7 == 1120 <.define value Register b>
		push_mem:9 == 1120 <@ldc Register b, Constant 1>
			ldc:1 == 1120 <.define writeReg Register b>
			ldc:2 == 1120 <.define const Constant 1>
			ldc:4 == 1120 <ldc Register a, Constant 0>
			ldc:5 == 1121 <ldc Register b, Constant 12>
			ldc:6 == 1122 <shl Register a, Register a, Register b>
			ldc:7 == 1123 <ldc Register b, Constant 1>
			ldc:8 == 1124 <or Register b, Register a, Register b>
		push_mem:10 == 1125 <ldb Register b, Register b>
		push_mem:12 == 1126 <@push_reg Register b>
			push_reg:10 == 1126 <.define registerToPush Register b>
			push_reg:13 == 1126 <ldc Register a, Constant 0>
			push_reg:14 == 1127 <ldb Register a, Register a>
			push_reg:15 == 1128 <stb Register a, Register b>
			push_reg:19 == 1129 <ldc Register b, Constant 1>
			push_reg:20 == 1130 <add Register a, Register a, Register b>
			push_reg:21 == 1131 <ldc Register b, Constant 0>
			push_reg:22 == 1132 <stb Register b, Register a>
pong.pa2:163 == 1133 <@sub >
	sub:3 == 1133 <.define lhs Register c>
	sub:4 == 1133 <.define rhs Register d>
	sub:5 == 1133 <.define result Register d>
	sub:7 == 1133 <@pop_reg Register d>
		pop_reg:10 == 1133 <.define registerToLoad Register d>
		pop_reg:13 == 1133 <ldc Register a, Constant 0>
		pop_reg:14 == 1134 <ldb Register a, Register a>
		pop_reg:15 == 1135 <ldc Register b, Constant 1>
		pop_reg:16 == 1136 <sub Register a, Register a, Register b>
		pop_reg:17 == 1137 <ldc Register b, Constant 0>
		pop_reg:18 == 1138 <stb Register b, Register a>
		pop_reg:22 == 1139 <ldb Register a, Register d>
	sub:8 == 1140 <@pop_reg Register c>
		pop_reg:10 == 1140 <.define registerToLoad Register c>
		pop_reg:13 == 1140 <ldc Register a, Constant 0>
		pop_reg:14 == 1141 <ldb Register a, Register a>
		pop_reg:15 == 1142 <ldc Register b, Constant 1>
		pop_reg:16 == 1143 <sub Register a, Register a, Register b>
		pop_reg:17 == 1144 <ldc Register b, Constant 0>
		pop_reg:18 == 1145 <stb Register b, Register a>
		pop_reg:22 == 1146 <ldb Register a, Register c>
	sub:9 == 1147 <sub Register d, Register c, Register d>
	sub:10 == 1148 <@push_reg Register d>
		push_reg:10 == 1148 <.define registerToPush Register d>
		push_reg:13 == 1148 <ldc Register a, Constant 0>
		push_reg:14 == 1149 <ldb Register a, Register a>
		push_reg:15 == 1150 <stb Register a, Register d>
		push_reg:19 == 1151 <ldc Register b, Constant 1>
		push_reg:20 == 1152 <add Register a, Register a, Register b>
		push_reg:21 == 1153 <ldc Register b, Constant 0>
		push_reg:22 == 1154 <stb Register b, Register a>
pong.pa2:164 == 1155 <@pop_mem_v Constant 25>
	pop_mem_v:6 == 1155 <.define val Register c>
	pop_mem_v:7 == 1155 <.define addr Constant 25>
	pop_mem_v:9 == 1155 <@pop_reg Register c>
		pop_reg:10 == 1155 <.define registerToLoad Register c>
		pop_reg:13 == 1155 <ldc Register a, Constant 0>
		pop_reg:14 == 1156 <ldb Register a, Register a>
		pop_reg:15 == 1157 <ldc Register b, Constant 1>
		pop_reg:16 == 1158 <sub Register a, Register a, Register b>
		pop_reg:17 == 1159 <ldc Register b, Constant 0>
		pop_reg:18 == 1160 <stb Register b, Register a>
		pop_reg:22 == 1161 <ldb Register a, Register c>
	pop_mem_v:11 == 1162 <@ldc Register b, Constant 25>
		ldc:1 == 1162 <.define writeReg Register b>
		ldc:2 == 1162 <.define const Constant 25>
		ldc:4 == 1162 <ldc Register a, Constant 0>
		ldc:5 == 1163 <ldc Register b, Constant 12>
		ldc:6 == 1164 <shl Register a, Register a, Register b>
		ldc:7 == 1165 <ldc Register b, Constant 25>
		ldc:8 == 1166 <or Register b, Register a, Register b>
	pop_mem_v:12 == 1167 <stb Register b, Register c>
pong.pa2:167 == 1168 <@push_const Constant 8>
	push_const:6 == 1168 <.define constantToPush Constant 8>
	push_const:12 == 1168 <@ldc Register b, Constant 8>
		ldc:1 == 1168 <.define writeReg Register b>
		ldc:2 == 1168 <.define const Constant 8>
		ldc:4 == 1168 <ldc Register a, Constant 0>
		ldc:5 == 1169 <ldc Register b, Constant 12>
		ldc:6 == 1170 <shl Register a, Register a, Register b>
		ldc:7 == 1171 <ldc Register b, Constant 8>
		ldc:8 == 1172 <or Register b, Register a, Register b>
	push_const:14 == 1173 <@push_reg Register b>
		push_reg:10 == 1173 <.define registerToPush Register b>
		push_reg:13 == 1173 <ldc Register a, Constant 0>
		push_reg:14 == 1174 <ldb Register a, Register a>
		push_reg:15 == 1175 <stb Register a, Register b>
		push_reg:19 == 1176 <ldc Register b, Constant 1>
		push_reg:20 == 1177 <add Register a, Register a, Register b>
		push_reg:21 == 1178 <ldc Register b, Constant 0>
		push_reg:22 == 1179 <stb Register b, Register a>
pong.pa2:168 == 1180 <@call_value Constant 1601, Constant 1>
	call_value:1 == 1180 <@call Constant 1601, Constant 1>
		call:11 == 1180 <.define functionLabel Constant 1601>
		call:12 == 1180 <.define argcount Constant 1>
		call:15 == 1180 <@push_mem Constant 2>
			push_mem:6 == 1180 <.define addr Register b>
			push_mem:7 == 1180 <.define value Register b>
			push_mem:9 == 1180 <@ldc Register b, Constant 2>
				ldc:1 == 1180 <.define writeReg Register b>
				ldc:2 == 1180 <.define const Constant 2>
				ldc:4 == 1180 <ldc Register a, Constant 0>
				ldc:5 == 1181 <ldc Register b, Constant 12>
				ldc:6 == 1182 <shl Register a, Register a, Register b>
				ldc:7 == 1183 <ldc Register b, Constant 2>
				ldc:8 == 1184 <or Register b, Register a, Register b>
			push_mem:10 == 1185 <ldb Register b, Register b>
			push_mem:12 == 1186 <@push_reg Register b>
				push_reg:10 == 1186 <.define registerToPush Register b>
				push_reg:13 == 1186 <ldc Register a, Constant 0>
				push_reg:14 == 1187 <ldb Register a, Register a>
				push_reg:15 == 1188 <stb Register a, Register b>
				push_reg:19 == 1189 <ldc Register b, Constant 1>
				push_reg:20 == 1190 <add Register a, Register a, Register b>
				push_reg:21 == 1191 <ldc Register b, Constant 0>
				push_reg:22 == 1192 <stb Register b, Register a>
		call:16 == 1193 <@push_mem Constant 3>
			push_mem:6 == 1193 <.define addr Register b>
			push_mem:7 == 1193 <.define value Register b>
			push_mem:9 == 1193 <@ldc Register b, Constant 3>
				ldc:1 == 1193 <.define writeReg Register b>
				ldc:2 == 1193 <.define const Constant 3>
				ldc:4 == 1193 <ldc Register a, Constant 0>
				ldc:5 == 1194 <ldc Register b, Constant 12>
				ldc:6 == 1195 <shl Register a, Register a, Register b>
				ldc:7 == 1196 <ldc Register b, Constant 3>
				ldc:8 == 1197 <or Register b, Register a, Register b>
			push_mem:10 == 1198 <ldb Register b, Register b>
			push_mem:12 == 1199 <@push_reg Register b>
				push_reg:10 == 1199 <.define registerToPush Register b>
				push_reg:13 == 1199 <ldc Register a, Constant 0>
				push_reg:14 == 1200 <ldb Register a, Register a>
				push_reg:15 == 1201 <stb Register a, Register b>
				push_reg:19 == 1202 <ldc Register b, Constant 1>
				push_reg:20 == 1203 <add Register a, Register a, Register b>
				push_reg:21 == 1204 <ldc Register b, Constant 0>
				push_reg:22 == 1205 <stb Register b, Register a>
		call:19 == 1206 <@push_const Constant 1318>
			push_const:6 == 1206 <.define constantToPush Constant 1318>
			push_const:12 == 1206 <@ldc Register b, Constant 1318>
				ldc:1 == 1206 <.define writeReg Register b>
				ldc:2 == 1206 <.define const Constant 1318>
				ldc:4 == 1206 <ldc Register a, Constant 0>
				ldc:5 == 1207 <ldc Register b, Constant 12>
				ldc:6 == 1208 <shl Register a, Register a, Register b>
				ldc:7 == 1209 <ldc Register b, Constant 1318>
				ldc:8 == 1210 <or Register b, Register a, Register b>
			push_const:14 == 1211 <@push_reg Register b>
				push_reg:10 == 1211 <.define registerToPush Register b>
				push_reg:13 == 1211 <ldc Register a, Constant 0>
				push_reg:14 == 1212 <ldb Register a, Register a>
				push_reg:15 == 1213 <stb Register a, Register b>
				push_reg:19 == 1214 <ldc Register b, Constant 1>
				push_reg:20 == 1215 <add Register a, Register a, Register b>
				push_reg:21 == 1216 <ldc Register b, Constant 0>
				push_reg:22 == 1217 <stb Register b, Register a>
		call:24 == 1218 <@push_mem Constant 0>
			push_mem:6 == 1218 <.define addr Register b>
			push_mem:7 == 1218 <.define value Register b>
			push_mem:9 == 1218 <@ldc Register b, Constant 0>
				ldc:1 == 1218 <.define writeReg Register b>
				ldc:2 == 1218 <.define const Constant 0>
				ldc:4 == 1218 <ldc Register a, Constant 0>
				ldc:5 == 1219 <ldc Register b, Constant 12>
				ldc:6 == 1220 <shl Register a, Register a, Register b>
				ldc:7 == 1221 <ldc Register b, Constant 0>
				ldc:8 == 1222 <or Register b, Register a, Register b>
			push_mem:10 == 1223 <ldb Register b, Register b>
			push_mem:12 == 1224 <@push_reg Register b>
				push_reg:10 == 1224 <.define registerToPush Register b>
				push_reg:13 == 1224 <ldc Register a, Constant 0>
				push_reg:14 == 1225 <ldb Register a, Register a>
				push_reg:15 == 1226 <stb Register a, Register b>
				push_reg:19 == 1227 <ldc Register b, Constant 1>
				push_reg:20 == 1228 <add Register a, Register a, Register b>
				push_reg:21 == 1229 <ldc Register b, Constant 0>
				push_reg:22 == 1230 <stb Register b, Register a>
		call:26 == 1231 <@push_const Constant 3>
			push_const:6 == 1231 <.define constantToPush Constant 3>
			push_const:12 == 1231 <@ldc Register b, Constant 3>
				ldc:1 == 1231 <.define writeReg Register b>
				ldc:2 == 1231 <.define const Constant 3>
				ldc:4 == 1231 <ldc Register a, Constant 0>
				ldc:5 == 1232 <ldc Register b, Constant 12>
				ldc:6 == 1233 <shl Register a, Register a, Register b>
				ldc:7 == 1234 <ldc Register b, Constant 3>
				ldc:8 == 1235 <or Register b, Register a, Register b>
			push_const:14 == 1236 <@push_reg Register b>
				push_reg:10 == 1236 <.define registerToPush Register b>
				push_reg:13 == 1236 <ldc Register a, Constant 0>
				push_reg:14 == 1237 <ldb Register a, Register a>
				push_reg:15 == 1238 <stb Register a, Register b>
				push_reg:19 == 1239 <ldc Register b, Constant 1>
				push_reg:20 == 1240 <add Register a, Register a, Register b>
				push_reg:21 == 1241 <ldc Register b, Constant 0>
				push_reg:22 == 1242 <stb Register b, Register a>
		call:27 == 1243 <@push_const Constant 1>
			push_const:6 == 1243 <.define constantToPush Constant 1>
			push_const:12 == 1243 <@ldc Register b, Constant 1>
				ldc:1 == 1243 <.define writeReg Register b>
				ldc:2 == 1243 <.define const Constant 1>
				ldc:4 == 1243 <ldc Register a, Constant 0>
				ldc:5 == 1244 <ldc Register b, Constant 12>
				ldc:6 == 1245 <shl Register a, Register a, Register b>
				ldc:7 == 1246 <ldc Register b, Constant 1>
				ldc:8 == 1247 <or Register b, Register a, Register b>
			push_const:14 == 1248 <@push_reg Register b>
				push_reg:10 == 1248 <.define registerToPush Register b>
				push_reg:13 == 1248 <ldc Register a, Constant 0>
				push_reg:14 == 1249 <ldb Register a, Register a>
				push_reg:15 == 1250 <stb Register a, Register b>
				push_reg:19 == 1251 <ldc Register b, Constant 1>
				push_reg:20 == 1252 <add Register a, Register a, Register b>
				push_reg:21 == 1253 <ldc Register b, Constant 0>
				push_reg:22 == 1254 <stb Register b, Register a>
		call:28 == 1255 <@add >
			add:3 == 1255 <.define lhs Register c>
			add:4 == 1255 <.define rhs Register d>
			add:5 == 1255 <.define result Register d>
			add:7 == 1255 <@pop_reg Register d>
				pop_reg:10 == 1255 <.define registerToLoad Register d>
				pop_reg:13 == 1255 <ldc Register a, Constant 0>
				pop_reg:14 == 1256 <ldb Register a, Register a>
				pop_reg:15 == 1257 <ldc Register b, Constant 1>
				pop_reg:16 == 1258 <sub Register a, Register a, Register b>
				pop_reg:17 == 1259 <ldc Register b, Constant 0>
				pop_reg:18 == 1260 <stb Register b, Register a>
				pop_reg:22 == 1261 <ldb Register a, Register d>
			add:8 == 1262 <@pop_reg Register c>
				pop_reg:10 == 1262 <.define registerToLoad Register c>
				pop_reg:13 == 1262 <ldc Register a, Constant 0>
				pop_reg:14 == 1263 <ldb Register a, Register a>
				pop_reg:15 == 1264 <ldc Register b, Constant 1>
				pop_reg:16 == 1265 <sub Register a, Register a, Register b>
				pop_reg:17 == 1266 <ldc Register b, Constant 0>
				pop_reg:18 == 1267 <stb Register b, Register a>
				pop_reg:22 == 1268 <ldb Register a, Register c>
			add:9 == 1269 <add Register d, Register c, Register d>
			add:10 == 1270 <@push_reg Register d>
				push_reg:10 == 1270 <.define registerToPush Register d>
				push_reg:13 == 1270 <ldc Register a, Constant 0>
				push_reg:14 == 1271 <ldb Register a, Register a>
				push_reg:15 == 1272 <stb Register a, Register d>
				push_reg:19 == 1273 <ldc Register b, Constant 1>
				push_reg:20 == 1274 <add Register a, Register a, Register b>
				push_reg:21 == 1275 <ldc Register b, Constant 0>
				push_reg:22 == 1276 <stb Register b, Register a>
		call:29 == 1277 <@sub >
			sub:3 == 1277 <.define lhs Register c>
			sub:4 == 1277 <.define rhs Register d>
			sub:5 == 1277 <.define result Register d>
			sub:7 == 1277 <@pop_reg Register d>
				pop_reg:10 == 1277 <.define registerToLoad Register d>
				pop_reg:13 == 1277 <ldc Register a, Constant 0>
				pop_reg:14 == 1278 <ldb Register a, Register a>
				pop_reg:15 == 1279 <ldc Register b, Constant 1>
				pop_reg:16 == 1280 <sub Register a, Register a, Register b>
				pop_reg:17 == 1281 <ldc Register b, Constant 0>
				pop_reg:18 == 1282 <stb Register b, Register a>
				pop_reg:22 == 1283 <ldb Register a, Register d>
			sub:8 == 1284 <@pop_reg Register c>
				pop_reg:10 == 1284 <.define registerToLoad Register c>
				pop_reg:13 == 1284 <ldc Register a, Constant 0>
				pop_reg:14 == 1285 <ldb Register a, Register a>
				pop_reg:15 == 1286 <ldc Register b, Constant 1>
				pop_reg:16 == 1287 <sub Register a, Register a, Register b>
				pop_reg:17 == 1288 <ldc Register b, Constant 0>
				pop_reg:18 == 1289 <stb Register b, Register a>
				pop_reg:22 == 1290 <ldb Register a, Register c>
			sub:9 == 1291 <sub Register d, Register c, Register d>
			sub:10 == 1292 <@push_reg Register d>
				push_reg:10 == 1292 <.define registerToPush Register d>
				push_reg:13 == 1292 <ldc Register a, Constant 0>
				push_reg:14 == 1293 <ldb Register a, Register a>
				push_reg:15 == 1294 <stb Register a, Register d>
				push_reg:19 == 1295 <ldc Register b, Constant 1>
				push_reg:20 == 1296 <add Register a, Register a, Register b>
				push_reg:21 == 1297 <ldc Register b, Constant 0>
				push_reg:22 == 1298 <stb Register b, Register a>
		call:30 == 1299 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 1299 <.define val Register c>
			pop_mem_v:7 == 1299 <.define addr Constant 2>
			pop_mem_v:9 == 1299 <@pop_reg Register c>
				pop_reg:10 == 1299 <.define registerToLoad Register c>
				pop_reg:13 == 1299 <ldc Register a, Constant 0>
				pop_reg:14 == 1300 <ldb Register a, Register a>
				pop_reg:15 == 1301 <ldc Register b, Constant 1>
				pop_reg:16 == 1302 <sub Register a, Register a, Register b>
				pop_reg:17 == 1303 <ldc Register b, Constant 0>
				pop_reg:18 == 1304 <stb Register b, Register a>
				pop_reg:22 == 1305 <ldb Register a, Register c>
			pop_mem_v:11 == 1306 <@ldc Register b, Constant 2>
				ldc:1 == 1306 <.define writeReg Register b>
				ldc:2 == 1306 <.define const Constant 2>
				ldc:4 == 1306 <ldc Register a, Constant 0>
				ldc:5 == 1307 <ldc Register b, Constant 12>
				ldc:6 == 1308 <shl Register a, Register a, Register b>
				ldc:7 == 1309 <ldc Register b, Constant 2>
				ldc:8 == 1310 <or Register b, Register a, Register b>
			pop_mem_v:12 == 1311 <stb Register b, Register c>
		call:32 == 1312 <@ldc Register a, Constant 1601>
			ldc:1 == 1312 <.define writeReg Register a>
			ldc:2 == 1312 <.define const Constant 1601>
			ldc:4 == 1312 <ldc Register a, Constant 0>
			ldc:5 == 1313 <ldc Register b, Constant 12>
			ldc:6 == 1314 <shl Register a, Register a, Register b>
			ldc:7 == 1315 <ldc Register b, Constant 1601>
			ldc:8 == 1316 <or Register a, Register a, Register b>
		call:33 == 1317 <jmp Register a>
		call:38 == 1318 <ldc Register d, Constant 2>
		call:41 == 1319 <ldb Register d, Register d>
		call:43 == 1320 <@pop_mem_v Constant 3>
			pop_mem_v:6 == 1320 <.define val Register c>
			pop_mem_v:7 == 1320 <.define addr Constant 3>
			pop_mem_v:9 == 1320 <@pop_reg Register c>
				pop_reg:10 == 1320 <.define registerToLoad Register c>
				pop_reg:13 == 1320 <ldc Register a, Constant 0>
				pop_reg:14 == 1321 <ldb Register a, Register a>
				pop_reg:15 == 1322 <ldc Register b, Constant 1>
				pop_reg:16 == 1323 <sub Register a, Register a, Register b>
				pop_reg:17 == 1324 <ldc Register b, Constant 0>
				pop_reg:18 == 1325 <stb Register b, Register a>
				pop_reg:22 == 1326 <ldb Register a, Register c>
			pop_mem_v:11 == 1327 <@ldc Register b, Constant 3>
				ldc:1 == 1327 <.define writeReg Register b>
				ldc:2 == 1327 <.define const Constant 3>
				ldc:4 == 1327 <ldc Register a, Constant 0>
				ldc:5 == 1328 <ldc Register b, Constant 12>
				ldc:6 == 1329 <shl Register a, Register a, Register b>
				ldc:7 == 1330 <ldc Register b, Constant 3>
				ldc:8 == 1331 <or Register b, Register a, Register b>
			pop_mem_v:12 == 1332 <stb Register b, Register c>
		call:44 == 1333 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 1333 <.define val Register c>
			pop_mem_v:7 == 1333 <.define addr Constant 2>
			pop_mem_v:9 == 1333 <@pop_reg Register c>
				pop_reg:10 == 1333 <.define registerToLoad Register c>
				pop_reg:13 == 1333 <ldc Register a, Constant 0>
				pop_reg:14 == 1334 <ldb Register a, Register a>
				pop_reg:15 == 1335 <ldc Register b, Constant 1>
				pop_reg:16 == 1336 <sub Register a, Register a, Register b>
				pop_reg:17 == 1337 <ldc Register b, Constant 0>
				pop_reg:18 == 1338 <stb Register b, Register a>
				pop_reg:22 == 1339 <ldb Register a, Register c>
			pop_mem_v:11 == 1340 <@ldc Register b, Constant 2>
				ldc:1 == 1340 <.define writeReg Register b>
				ldc:2 == 1340 <.define const Constant 2>
				ldc:4 == 1340 <ldc Register a, Constant 0>
				ldc:5 == 1341 <ldc Register b, Constant 12>
				ldc:6 == 1342 <shl Register a, Register a, Register b>
				ldc:7 == 1343 <ldc Register b, Constant 2>
				ldc:8 == 1344 <or Register b, Register a, Register b>
			pop_mem_v:12 == 1345 <stb Register b, Register c>
		call:46 == 1346 <ldc Register c, Constant 0>
		call:47 == 1347 <stb Register c, Register d>
	call_value:3 == 1348 <@push_mem Constant 1>
		push_mem:6 == 1348 <.define addr Register b>
		push_mem:7 == 1348 <.define value Register b>
		push_mem:9 == 1348 <@ldc Register b, Constant 1>
			ldc:1 == 1348 <.define writeReg Register b>
			ldc:2 == 1348 <.define const Constant 1>
			ldc:4 == 1348 <ldc Register a, Constant 0>
			ldc:5 == 1349 <ldc Register b, Constant 12>
			ldc:6 == 1350 <shl Register a, Register a, Register b>
			ldc:7 == 1351 <ldc Register b, Constant 1>
			ldc:8 == 1352 <or Register b, Register a, Register b>
		push_mem:10 == 1353 <ldb Register b, Register b>
		push_mem:12 == 1354 <@push_reg Register b>
			push_reg:10 == 1354 <.define registerToPush Register b>
			push_reg:13 == 1354 <ldc Register a, Constant 0>
			push_reg:14 == 1355 <ldb Register a, Register a>
			push_reg:15 == 1356 <stb Register a, Register b>
			push_reg:19 == 1357 <ldc Register b, Constant 1>
			push_reg:20 == 1358 <add Register a, Register a, Register b>
			push_reg:21 == 1359 <ldc Register b, Constant 0>
			push_reg:22 == 1360 <stb Register b, Register a>
pong.pa2:170 == 1361 <@push_const Constant 1>
	push_const:6 == 1361 <.define constantToPush Constant 1>
	push_const:12 == 1361 <@ldc Register b, Constant 1>
		ldc:1 == 1361 <.define writeReg Register b>
		ldc:2 == 1361 <.define const Constant 1>
		ldc:4 == 1361 <ldc Register a, Constant 0>
		ldc:5 == 1362 <ldc Register b, Constant 12>
		ldc:6 == 1363 <shl Register a, Register a, Register b>
		ldc:7 == 1364 <ldc Register b, Constant 1>
		ldc:8 == 1365 <or Register b, Register a, Register b>
	push_const:14 == 1366 <@push_reg Register b>
		push_reg:10 == 1366 <.define registerToPush Register b>
		push_reg:13 == 1366 <ldc Register a, Constant 0>
		push_reg:14 == 1367 <ldb Register a, Register a>
		push_reg:15 == 1368 <stb Register a, Register b>
		push_reg:19 == 1369 <ldc Register b, Constant 1>
		push_reg:20 == 1370 <add Register a, Register a, Register b>
		push_reg:21 == 1371 <ldc Register b, Constant 0>
		push_reg:22 == 1372 <stb Register b, Register a>
pong.pa2:171 == 1373 <@call_value Constant 1601, Constant 1>
	call_value:1 == 1373 <@call Constant 1601, Constant 1>
		call:11 == 1373 <.define functionLabel Constant 1601>
		call:12 == 1373 <.define argcount Constant 1>
		call:15 == 1373 <@push_mem Constant 2>
			push_mem:6 == 1373 <.define addr Register b>
			push_mem:7 == 1373 <.define value Register b>
			push_mem:9 == 1373 <@ldc Register b, Constant 2>
				ldc:1 == 1373 <.define writeReg Register b>
				ldc:2 == 1373 <.define const Constant 2>
				ldc:4 == 1373 <ldc Register a, Constant 0>
				ldc:5 == 1374 <ldc Register b, Constant 12>
				ldc:6 == 1375 <shl Register a, Register a, Register b>
				ldc:7 == 1376 <ldc Register b, Constant 2>
				ldc:8 == 1377 <or Register b, Register a, Register b>
			push_mem:10 == 1378 <ldb Register b, Register b>
			push_mem:12 == 1379 <@push_reg Register b>
				push_reg:10 == 1379 <.define registerToPush Register b>
				push_reg:13 == 1379 <ldc Register a, Constant 0>
				push_reg:14 == 1380 <ldb Register a, Register a>
				push_reg:15 == 1381 <stb Register a, Register b>
				push_reg:19 == 1382 <ldc Register b, Constant 1>
				push_reg:20 == 1383 <add Register a, Register a, Register b>
				push_reg:21 == 1384 <ldc Register b, Constant 0>
				push_reg:22 == 1385 <stb Register b, Register a>
		call:16 == 1386 <@push_mem Constant 3>
			push_mem:6 == 1386 <.define addr Register b>
			push_mem:7 == 1386 <.define value Register b>
			push_mem:9 == 1386 <@ldc Register b, Constant 3>
				ldc:1 == 1386 <.define writeReg Register b>
				ldc:2 == 1386 <.define const Constant 3>
				ldc:4 == 1386 <ldc Register a, Constant 0>
				ldc:5 == 1387 <ldc Register b, Constant 12>
				ldc:6 == 1388 <shl Register a, Register a, Register b>
				ldc:7 == 1389 <ldc Register b, Constant 3>
				ldc:8 == 1390 <or Register b, Register a, Register b>
			push_mem:10 == 1391 <ldb Register b, Register b>
			push_mem:12 == 1392 <@push_reg Register b>
				push_reg:10 == 1392 <.define registerToPush Register b>
				push_reg:13 == 1392 <ldc Register a, Constant 0>
				push_reg:14 == 1393 <ldb Register a, Register a>
				push_reg:15 == 1394 <stb Register a, Register b>
				push_reg:19 == 1395 <ldc Register b, Constant 1>
				push_reg:20 == 1396 <add Register a, Register a, Register b>
				push_reg:21 == 1397 <ldc Register b, Constant 0>
				push_reg:22 == 1398 <stb Register b, Register a>
		call:19 == 1399 <@push_const Constant 1511>
			push_const:6 == 1399 <.define constantToPush Constant 1511>
			push_const:12 == 1399 <@ldc Register b, Constant 1511>
				ldc:1 == 1399 <.define writeReg Register b>
				ldc:2 == 1399 <.define const Constant 1511>
				ldc:4 == 1399 <ldc Register a, Constant 0>
				ldc:5 == 1400 <ldc Register b, Constant 12>
				ldc:6 == 1401 <shl Register a, Register a, Register b>
				ldc:7 == 1402 <ldc Register b, Constant 1511>
				ldc:8 == 1403 <or Register b, Register a, Register b>
			push_const:14 == 1404 <@push_reg Register b>
				push_reg:10 == 1404 <.define registerToPush Register b>
				push_reg:13 == 1404 <ldc Register a, Constant 0>
				push_reg:14 == 1405 <ldb Register a, Register a>
				push_reg:15 == 1406 <stb Register a, Register b>
				push_reg:19 == 1407 <ldc Register b, Constant 1>
				push_reg:20 == 1408 <add Register a, Register a, Register b>
				push_reg:21 == 1409 <ldc Register b, Constant 0>
				push_reg:22 == 1410 <stb Register b, Register a>
		call:24 == 1411 <@push_mem Constant 0>
			push_mem:6 == 1411 <.define addr Register b>
			push_mem:7 == 1411 <.define value Register b>
			push_mem:9 == 1411 <@ldc Register b, Constant 0>
				ldc:1 == 1411 <.define writeReg Register b>
				ldc:2 == 1411 <.define const Constant 0>
				ldc:4 == 1411 <ldc Register a, Constant 0>
				ldc:5 == 1412 <ldc Register b, Constant 12>
				ldc:6 == 1413 <shl Register a, Register a, Register b>
				ldc:7 == 1414 <ldc Register b, Constant 0>
				ldc:8 == 1415 <or Register b, Register a, Register b>
			push_mem:10 == 1416 <ldb Register b, Register b>
			push_mem:12 == 1417 <@push_reg Register b>
				push_reg:10 == 1417 <.define registerToPush Register b>
				push_reg:13 == 1417 <ldc Register a, Constant 0>
				push_reg:14 == 1418 <ldb Register a, Register a>
				push_reg:15 == 1419 <stb Register a, Register b>
				push_reg:19 == 1420 <ldc Register b, Constant 1>
				push_reg:20 == 1421 <add Register a, Register a, Register b>
				push_reg:21 == 1422 <ldc Register b, Constant 0>
				push_reg:22 == 1423 <stb Register b, Register a>
		call:26 == 1424 <@push_const Constant 3>
			push_const:6 == 1424 <.define constantToPush Constant 3>
			push_const:12 == 1424 <@ldc Register b, Constant 3>
				ldc:1 == 1424 <.define writeReg Register b>
				ldc:2 == 1424 <.define const Constant 3>
				ldc:4 == 1424 <ldc Register a, Constant 0>
				ldc:5 == 1425 <ldc Register b, Constant 12>
				ldc:6 == 1426 <shl Register a, Register a, Register b>
				ldc:7 == 1427 <ldc Register b, Constant 3>
				ldc:8 == 1428 <or Register b, Register a, Register b>
			push_const:14 == 1429 <@push_reg Register b>
				push_reg:10 == 1429 <.define registerToPush Register b>
				push_reg:13 == 1429 <ldc Register a, Constant 0>
				push_reg:14 == 1430 <ldb Register a, Register a>
				push_reg:15 == 1431 <stb Register a, Register b>
				push_reg:19 == 1432 <ldc Register b, Constant 1>
				push_reg:20 == 1433 <add Register a, Register a, Register b>
				push_reg:21 == 1434 <ldc Register b, Constant 0>
				push_reg:22 == 1435 <stb Register b, Register a>
		call:27 == 1436 <@push_const Constant 1>
			push_const:6 == 1436 <.define constantToPush Constant 1>
			push_const:12 == 1436 <@ldc Register b, Constant 1>
				ldc:1 == 1436 <.define writeReg Register b>
				ldc:2 == 1436 <.define const Constant 1>
				ldc:4 == 1436 <ldc Register a, Constant 0>
				ldc:5 == 1437 <ldc Register b, Constant 12>
				ldc:6 == 1438 <shl Register a, Register a, Register b>
				ldc:7 == 1439 <ldc Register b, Constant 1>
				ldc:8 == 1440 <or Register b, Register a, Register b>
			push_const:14 == 1441 <@push_reg Register b>
				push_reg:10 == 1441 <.define registerToPush Register b>
				push_reg:13 == 1441 <ldc Register a, Constant 0>
				push_reg:14 == 1442 <ldb Register a, Register a>
				push_reg:15 == 1443 <stb Register a, Register b>
				push_reg:19 == 1444 <ldc Register b, Constant 1>
				push_reg:20 == 1445 <add Register a, Register a, Register b>
				push_reg:21 == 1446 <ldc Register b, Constant 0>
				push_reg:22 == 1447 <stb Register b, Register a>
		call:28 == 1448 <@add >
			add:3 == 1448 <.define lhs Register c>
			add:4 == 1448 <.define rhs Register d>
			add:5 == 1448 <.define result Register d>
			add:7 == 1448 <@pop_reg Register d>
				pop_reg:10 == 1448 <.define registerToLoad Register d>
				pop_reg:13 == 1448 <ldc Register a, Constant 0>
				pop_reg:14 == 1449 <ldb Register a, Register a>
				pop_reg:15 == 1450 <ldc Register b, Constant 1>
				pop_reg:16 == 1451 <sub Register a, Register a, Register b>
				pop_reg:17 == 1452 <ldc Register b, Constant 0>
				pop_reg:18 == 1453 <stb Register b, Register a>
				pop_reg:22 == 1454 <ldb Register a, Register d>
			add:8 == 1455 <@pop_reg Register c>
				pop_reg:10 == 1455 <.define registerToLoad Register c>
				pop_reg:13 == 1455 <ldc Register a, Constant 0>
				pop_reg:14 == 1456 <ldb Register a, Register a>
				pop_reg:15 == 1457 <ldc Register b, Constant 1>
				pop_reg:16 == 1458 <sub Register a, Register a, Register b>
				pop_reg:17 == 1459 <ldc Register b, Constant 0>
				pop_reg:18 == 1460 <stb Register b, Register a>
				pop_reg:22 == 1461 <ldb Register a, Register c>
			add:9 == 1462 <add Register d, Register c, Register d>
			add:10 == 1463 <@push_reg Register d>
				push_reg:10 == 1463 <.define registerToPush Register d>
				push_reg:13 == 1463 <ldc Register a, Constant 0>
				push_reg:14 == 1464 <ldb Register a, Register a>
				push_reg:15 == 1465 <stb Register a, Register d>
				push_reg:19 == 1466 <ldc Register b, Constant 1>
				push_reg:20 == 1467 <add Register a, Register a, Register b>
				push_reg:21 == 1468 <ldc Register b, Constant 0>
				push_reg:22 == 1469 <stb Register b, Register a>
		call:29 == 1470 <@sub >
			sub:3 == 1470 <.define lhs Register c>
			sub:4 == 1470 <.define rhs Register d>
			sub:5 == 1470 <.define result Register d>
			sub:7 == 1470 <@pop_reg Register d>
				pop_reg:10 == 1470 <.define registerToLoad Register d>
				pop_reg:13 == 1470 <ldc Register a, Constant 0>
				pop_reg:14 == 1471 <ldb Register a, Register a>
				pop_reg:15 == 1472 <ldc Register b, Constant 1>
				pop_reg:16 == 1473 <sub Register a, Register a, Register b>
				pop_reg:17 == 1474 <ldc Register b, Constant 0>
				pop_reg:18 == 1475 <stb Register b, Register a>
				pop_reg:22 == 1476 <ldb Register a, Register d>
			sub:8 == 1477 <@pop_reg Register c>
				pop_reg:10 == 1477 <.define registerToLoad Register c>
				pop_reg:13 == 1477 <ldc Register a, Constant 0>
				pop_reg:14 == 1478 <ldb Register a, Register a>
				pop_reg:15 == 1479 <ldc Register b, Constant 1>
				pop_reg:16 == 1480 <sub Register a, Register a, Register b>
				pop_reg:17 == 1481 <ldc Register b, Constant 0>
				pop_reg:18 == 1482 <stb Register b, Register a>
				pop_reg:22 == 1483 <ldb Register a, Register c>
			sub:9 == 1484 <sub Register d, Register c, Register d>
			sub:10 == 1485 <@push_reg Register d>
				push_reg:10 == 1485 <.define registerToPush Register d>
				push_reg:13 == 1485 <ldc Register a, Constant 0>
				push_reg:14 == 1486 <ldb Register a, Register a>
				push_reg:15 == 1487 <stb Register a, Register d>
				push_reg:19 == 1488 <ldc Register b, Constant 1>
				push_reg:20 == 1489 <add Register a, Register a, Register b>
				push_reg:21 == 1490 <ldc Register b, Constant 0>
				push_reg:22 == 1491 <stb Register b, Register a>
		call:30 == 1492 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 1492 <.define val Register c>
			pop_mem_v:7 == 1492 <.define addr Constant 2>
			pop_mem_v:9 == 1492 <@pop_reg Register c>
				pop_reg:10 == 1492 <.define registerToLoad Register c>
				pop_reg:13 == 1492 <ldc Register a, Constant 0>
				pop_reg:14 == 1493 <ldb Register a, Register a>
				pop_reg:15 == 1494 <ldc Register b, Constant 1>
				pop_reg:16 == 1495 <sub Register a, Register a, Register b>
				pop_reg:17 == 1496 <ldc Register b, Constant 0>
				pop_reg:18 == 1497 <stb Register b, Register a>
				pop_reg:22 == 1498 <ldb Register a, Register c>
			pop_mem_v:11 == 1499 <@ldc Register b, Constant 2>
				ldc:1 == 1499 <.define writeReg Register b>
				ldc:2 == 1499 <.define const Constant 2>
				ldc:4 == 1499 <ldc Register a, Constant 0>
				ldc:5 == 1500 <ldc Register b, Constant 12>
				ldc:6 == 1501 <shl Register a, Register a, Register b>
				ldc:7 == 1502 <ldc Register b, Constant 2>
				ldc:8 == 1503 <or Register b, Register a, Register b>
			pop_mem_v:12 == 1504 <stb Register b, Register c>
		call:32 == 1505 <@ldc Register a, Constant 1601>
			ldc:1 == 1505 <.define writeReg Register a>
			ldc:2 == 1505 <.define const Constant 1601>
			ldc:4 == 1505 <ldc Register a, Constant 0>
			ldc:5 == 1506 <ldc Register b, Constant 12>
			ldc:6 == 1507 <shl Register a, Register a, Register b>
			ldc:7 == 1508 <ldc Register b, Constant 1601>
			ldc:8 == 1509 <or Register a, Register a, Register b>
		call:33 == 1510 <jmp Register a>
		call:38 == 1511 <ldc Register d, Constant 2>
		call:41 == 1512 <ldb Register d, Register d>
		call:43 == 1513 <@pop_mem_v Constant 3>
			pop_mem_v:6 == 1513 <.define val Register c>
			pop_mem_v:7 == 1513 <.define addr Constant 3>
			pop_mem_v:9 == 1513 <@pop_reg Register c>
				pop_reg:10 == 1513 <.define registerToLoad Register c>
				pop_reg:13 == 1513 <ldc Register a, Constant 0>
				pop_reg:14 == 1514 <ldb Register a, Register a>
				pop_reg:15 == 1515 <ldc Register b, Constant 1>
				pop_reg:16 == 1516 <sub Register a, Register a, Register b>
				pop_reg:17 == 1517 <ldc Register b, Constant 0>
				pop_reg:18 == 1518 <stb Register b, Register a>
				pop_reg:22 == 1519 <ldb Register a, Register c>
			pop_mem_v:11 == 1520 <@ldc Register b, Constant 3>
				ldc:1 == 1520 <.define writeReg Register b>
				ldc:2 == 1520 <.define const Constant 3>
				ldc:4 == 1520 <ldc Register a, Constant 0>
				ldc:5 == 1521 <ldc Register b, Constant 12>
				ldc:6 == 1522 <shl Register a, Register a, Register b>
				ldc:7 == 1523 <ldc Register b, Constant 3>
				ldc:8 == 1524 <or Register b, Register a, Register b>
			pop_mem_v:12 == 1525 <stb Register b, Register c>
		call:44 == 1526 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 1526 <.define val Register c>
			pop_mem_v:7 == 1526 <.define addr Constant 2>
			pop_mem_v:9 == 1526 <@pop_reg Register c>
				pop_reg:10 == 1526 <.define registerToLoad Register c>
				pop_reg:13 == 1526 <ldc Register a, Constant 0>
				pop_reg:14 == 1527 <ldb Register a, Register a>
				pop_reg:15 == 1528 <ldc Register b, Constant 1>
				pop_reg:16 == 1529 <sub Register a, Register a, Register b>
				pop_reg:17 == 1530 <ldc Register b, Constant 0>
				pop_reg:18 == 1531 <stb Register b, Register a>
				pop_reg:22 == 1532 <ldb Register a, Register c>
			pop_mem_v:11 == 1533 <@ldc Register b, Constant 2>
				ldc:1 == 1533 <.define writeReg Register b>
				ldc:2 == 1533 <.define const Constant 2>
				ldc:4 == 1533 <ldc Register a, Constant 0>
				ldc:5 == 1534 <ldc Register b, Constant 12>
				ldc:6 == 1535 <shl Register a, Register a, Register b>
				ldc:7 == 1536 <ldc Register b, Constant 2>
				ldc:8 == 1537 <or Register b, Register a, Register b>
			pop_mem_v:12 == 1538 <stb Register b, Register c>
		call:46 == 1539 <ldc Register c, Constant 0>
		call:47 == 1540 <stb Register c, Register d>
	call_value:3 == 1541 <@push_mem Constant 1>
		push_mem:6 == 1541 <.define addr Register b>
		push_mem:7 == 1541 <.define value Register b>
		push_mem:9 == 1541 <@ldc Register b, Constant 1>
			ldc:1 == 1541 <.define writeReg Register b>
			ldc:2 == 1541 <.define const Constant 1>
			ldc:4 == 1541 <ldc Register a, Constant 0>
			ldc:5 == 1542 <ldc Register b, Constant 12>
			ldc:6 == 1543 <shl Register a, Register a, Register b>
			ldc:7 == 1544 <ldc Register b, Constant 1>
			ldc:8 == 1545 <or Register b, Register a, Register b>
		push_mem:10 == 1546 <ldb Register b, Register b>
		push_mem:12 == 1547 <@push_reg Register b>
			push_reg:10 == 1547 <.define registerToPush Register b>
			push_reg:13 == 1547 <ldc Register a, Constant 0>
			push_reg:14 == 1548 <ldb Register a, Register a>
			push_reg:15 == 1549 <stb Register a, Register b>
			push_reg:19 == 1550 <ldc Register b, Constant 1>
			push_reg:20 == 1551 <add Register a, Register a, Register b>
			push_reg:21 == 1552 <ldc Register b, Constant 0>
			push_reg:22 == 1553 <stb Register b, Register a>
pong.pa2:173 == 1554 <@sub >
	sub:3 == 1554 <.define lhs Register c>
	sub:4 == 1554 <.define rhs Register d>
	sub:5 == 1554 <.define result Register d>
	sub:7 == 1554 <@pop_reg Register d>
		pop_reg:10 == 1554 <.define registerToLoad Register d>
		pop_reg:13 == 1554 <ldc Register a, Constant 0>
		pop_reg:14 == 1555 <ldb Register a, Register a>
		pop_reg:15 == 1556 <ldc Register b, Constant 1>
		pop_reg:16 == 1557 <sub Register a, Register a, Register b>
		pop_reg:17 == 1558 <ldc Register b, Constant 0>
		pop_reg:18 == 1559 <stb Register b, Register a>
		pop_reg:22 == 1560 <ldb Register a, Register d>
	sub:8 == 1561 <@pop_reg Register c>
		pop_reg:10 == 1561 <.define registerToLoad Register c>
		pop_reg:13 == 1561 <ldc Register a, Constant 0>
		pop_reg:14 == 1562 <ldb Register a, Register a>
		pop_reg:15 == 1563 <ldc Register b, Constant 1>
		pop_reg:16 == 1564 <sub Register a, Register a, Register b>
		pop_reg:17 == 1565 <ldc Register b, Constant 0>
		pop_reg:18 == 1566 <stb Register b, Register a>
		pop_reg:22 == 1567 <ldb Register a, Register c>
	sub:9 == 1568 <sub Register d, Register c, Register d>
	sub:10 == 1569 <@push_reg Register d>
		push_reg:10 == 1569 <.define registerToPush Register d>
		push_reg:13 == 1569 <ldc Register a, Constant 0>
		push_reg:14 == 1570 <ldb Register a, Register a>
		push_reg:15 == 1571 <stb Register a, Register d>
		push_reg:19 == 1572 <ldc Register b, Constant 1>
		push_reg:20 == 1573 <add Register a, Register a, Register b>
		push_reg:21 == 1574 <ldc Register b, Constant 0>
		push_reg:22 == 1575 <stb Register b, Register a>
pong.pa2:174 == 1576 <@pop_mem_v Constant 26>
	pop_mem_v:6 == 1576 <.define val Register c>
	pop_mem_v:7 == 1576 <.define addr Constant 26>
	pop_mem_v:9 == 1576 <@pop_reg Register c>
		pop_reg:10 == 1576 <.define registerToLoad Register c>
		pop_reg:13 == 1576 <ldc Register a, Constant 0>
		pop_reg:14 == 1577 <ldb Register a, Register a>
		pop_reg:15 == 1578 <ldc Register b, Constant 1>
		pop_reg:16 == 1579 <sub Register a, Register a, Register b>
		pop_reg:17 == 1580 <ldc Register b, Constant 0>
		pop_reg:18 == 1581 <stb Register b, Register a>
		pop_reg:22 == 1582 <ldb Register a, Register c>
	pop_mem_v:11 == 1583 <@ldc Register b, Constant 26>
		ldc:1 == 1583 <.define writeReg Register b>
		ldc:2 == 1583 <.define const Constant 26>
		ldc:4 == 1583 <ldc Register a, Constant 0>
		ldc:5 == 1584 <ldc Register b, Constant 12>
		ldc:6 == 1585 <shl Register a, Register a, Register b>
		ldc:7 == 1586 <ldc Register b, Constant 26>
		ldc:8 == 1587 <or Register b, Register a, Register b>
	pop_mem_v:12 == 1588 <stb Register b, Register c>
pong.pa2:177 == 1589 <@return >
	return:2 == 1589 <ldc Register b, Constant 3>
	return:3 == 1590 <ldb Register b, Register b>
	return:4 == 1591 <ldc Register a, Constant 0>
	return:5 == 1592 <stb Register a, Register b>
	return:7 == 1593 <@pop_reg Register d>
		pop_reg:10 == 1593 <.define registerToLoad Register d>
		pop_reg:13 == 1593 <ldc Register a, Constant 0>
		pop_reg:14 == 1594 <ldb Register a, Register a>
		pop_reg:15 == 1595 <ldc Register b, Constant 1>
		pop_reg:16 == 1596 <sub Register a, Register a, Register b>
		pop_reg:17 == 1597 <ldc Register b, Constant 0>
		pop_reg:18 == 1598 <stb Register b, Register a>
		pop_reg:22 == 1599 <ldb Register a, Register d>
	return:9 == 1600 <jump Register d>
pong.pa2:185 == 1601 <@function Constant 0>
	function:19 == 1601 <.define loccount Constant 0>
	function:22 == 1601 <ldc Register a, Constant 0>
	function:23 == 1602 <ldb Register a, Register a>
	function:24 == 1603 <ldc Register b, Constant 3>
	function:25 == 1604 <stb Register b, Register a>
	function:28 == 1605 <ldc Register a, Constant 0>
	function:29 == 1606 <ldb Register a, Register b>
	function:30 == 1607 <ldc Register c, Constant 0>
	function:31 == 1608 <add Register b, Register b, Register c>
	function:32 == 1609 <stb Register a, Register b>
pong.pa2:191 == 1610 <@push_mem Constant 24576>
	push_mem:6 == 1610 <.define addr Register b>
	push_mem:7 == 1610 <.define value Register b>
	push_mem:9 == 1610 <@ldc Register b, Constant 24576>
		ldc:1 == 1610 <.define writeReg Register b>
		ldc:2 == 1610 <.define const Constant 24576>
		ldc:4 == 1610 <ldc Register a, Constant 6>
		ldc:5 == 1611 <ldc Register b, Constant 12>
		ldc:6 == 1612 <shl Register a, Register a, Register b>
		ldc:7 == 1613 <ldc Register b, Constant 0>
		ldc:8 == 1614 <or Register b, Register a, Register b>
	push_mem:10 == 1615 <ldb Register b, Register b>
	push_mem:12 == 1616 <@push_reg Register b>
		push_reg:10 == 1616 <.define registerToPush Register b>
		push_reg:13 == 1616 <ldc Register a, Constant 0>
		push_reg:14 == 1617 <ldb Register a, Register a>
		push_reg:15 == 1618 <stb Register a, Register b>
		push_reg:19 == 1619 <ldc Register b, Constant 1>
		push_reg:20 == 1620 <add Register a, Register a, Register b>
		push_reg:21 == 1621 <ldc Register b, Constant 0>
		push_reg:22 == 1622 <stb Register b, Register a>
pong.pa2:192 == 1623 <@push_arg Constant 0>
	push_arg:3 == 1623 <.define slot Constant 0>
	push_arg:6 == 1623 <ldc Register a, Constant 2>
	push_arg:7 == 1624 <ldb Register a, Register a>
	push_arg:8 == 1625 <ldc Register b, Constant 0>
	push_arg:9 == 1626 <add Register a, Register a, Register b>
	push_arg:10 == 1627 <ldb Register a, Register b>
	push_arg:12 == 1628 <@push_reg Register b>
		push_reg:10 == 1628 <.define registerToPush Register b>
		push_reg:13 == 1628 <ldc Register a, Constant 0>
		push_reg:14 == 1629 <ldb Register a, Register a>
		push_reg:15 == 1630 <stb Register a, Register b>
		push_reg:19 == 1631 <ldc Register b, Constant 1>
		push_reg:20 == 1632 <add Register a, Register a, Register b>
		push_reg:21 == 1633 <ldc Register b, Constant 0>
		push_reg:22 == 1634 <stb Register b, Register a>
pong.pa2:193 == 1635 <@and >
	and:3 == 1635 <.define lhs Register c>
	and:4 == 1635 <.define rhs Register d>
	and:5 == 1635 <.define result Register d>
	and:7 == 1635 <@pop_reg Register d>
		pop_reg:10 == 1635 <.define registerToLoad Register d>
		pop_reg:13 == 1635 <ldc Register a, Constant 0>
		pop_reg:14 == 1636 <ldb Register a, Register a>
		pop_reg:15 == 1637 <ldc Register b, Constant 1>
		pop_reg:16 == 1638 <sub Register a, Register a, Register b>
		pop_reg:17 == 1639 <ldc Register b, Constant 0>
		pop_reg:18 == 1640 <stb Register b, Register a>
		pop_reg:22 == 1641 <ldb Register a, Register d>
	and:8 == 1642 <@pop_reg Register c>
		pop_reg:10 == 1642 <.define registerToLoad Register c>
		pop_reg:13 == 1642 <ldc Register a, Constant 0>
		pop_reg:14 == 1643 <ldb Register a, Register a>
		pop_reg:15 == 1644 <ldc Register b, Constant 1>
		pop_reg:16 == 1645 <sub Register a, Register a, Register b>
		pop_reg:17 == 1646 <ldc Register b, Constant 0>
		pop_reg:18 == 1647 <stb Register b, Register a>
		pop_reg:22 == 1648 <ldb Register a, Register c>
	and:9 == 1649 <and Register d, Register c, Register d>
	and:10 == 1650 <@push_reg Register d>
		push_reg:10 == 1650 <.define registerToPush Register d>
		push_reg:13 == 1650 <ldc Register a, Constant 0>
		push_reg:14 == 1651 <ldb Register a, Register a>
		push_reg:15 == 1652 <stb Register a, Register d>
		push_reg:19 == 1653 <ldc Register b, Constant 1>
		push_reg:20 == 1654 <add Register a, Register a, Register b>
		push_reg:21 == 1655 <ldc Register b, Constant 0>
		push_reg:22 == 1656 <stb Register b, Register a>
pong.pa2:194 == 1657 <@push_const Constant 0>
	push_const:6 == 1657 <.define constantToPush Constant 0>
	push_const:12 == 1657 <@ldc Register b, Constant 0>
		ldc:1 == 1657 <.define writeReg Register b>
		ldc:2 == 1657 <.define const Constant 0>
		ldc:4 == 1657 <ldc Register a, Constant 0>
		ldc:5 == 1658 <ldc Register b, Constant 12>
		ldc:6 == 1659 <shl Register a, Register a, Register b>
		ldc:7 == 1660 <ldc Register b, Constant 0>
		ldc:8 == 1661 <or Register b, Register a, Register b>
	push_const:14 == 1662 <@push_reg Register b>
		push_reg:10 == 1662 <.define registerToPush Register b>
		push_reg:13 == 1662 <ldc Register a, Constant 0>
		push_reg:14 == 1663 <ldb Register a, Register a>
		push_reg:15 == 1664 <stb Register a, Register b>
		push_reg:19 == 1665 <ldc Register b, Constant 1>
		push_reg:20 == 1666 <add Register a, Register a, Register b>
		push_reg:21 == 1667 <ldc Register b, Constant 0>
		push_reg:22 == 1668 <stb Register b, Register a>
pong.pa2:195 == 1669 <@gt >
	gt:1 == 1669 <@pop_reg Register d>
		pop_reg:10 == 1669 <.define registerToLoad Register d>
		pop_reg:13 == 1669 <ldc Register a, Constant 0>
		pop_reg:14 == 1670 <ldb Register a, Register a>
		pop_reg:15 == 1671 <ldc Register b, Constant 1>
		pop_reg:16 == 1672 <sub Register a, Register a, Register b>
		pop_reg:17 == 1673 <ldc Register b, Constant 0>
		pop_reg:18 == 1674 <stb Register b, Register a>
		pop_reg:22 == 1675 <ldb Register a, Register d>
	gt:2 == 1676 <@pop_reg Register c>
		pop_reg:10 == 1676 <.define registerToLoad Register c>
		pop_reg:13 == 1676 <ldc Register a, Constant 0>
		pop_reg:14 == 1677 <ldb Register a, Register a>
		pop_reg:15 == 1678 <ldc Register b, Constant 1>
		pop_reg:16 == 1679 <sub Register a, Register a, Register b>
		pop_reg:17 == 1680 <ldc Register b, Constant 0>
		pop_reg:18 == 1681 <stb Register b, Register a>
		pop_reg:22 == 1682 <ldb Register a, Register c>
	gt:3 == 1683 <cgt Register b, Register c, Register d>
	gt:4 == 1684 <@push_reg Register b>
		push_reg:10 == 1684 <.define registerToPush Register b>
		push_reg:13 == 1684 <ldc Register a, Constant 0>
		push_reg:14 == 1685 <ldb Register a, Register a>
		push_reg:15 == 1686 <stb Register a, Register b>
		push_reg:19 == 1687 <ldc Register b, Constant 1>
		push_reg:20 == 1688 <add Register a, Register a, Register b>
		push_reg:21 == 1689 <ldc Register b, Constant 0>
		push_reg:22 == 1690 <stb Register b, Register a>
pong.pa2:196 == 1691 <@push_const Constant 1>
	push_const:6 == 1691 <.define constantToPush Constant 1>
	push_const:12 == 1691 <@ldc Register b, Constant 1>
		ldc:1 == 1691 <.define writeReg Register b>
		ldc:2 == 1691 <.define const Constant 1>
		ldc:4 == 1691 <ldc Register a, Constant 0>
		ldc:5 == 1692 <ldc Register b, Constant 12>
		ldc:6 == 1693 <shl Register a, Register a, Register b>
		ldc:7 == 1694 <ldc Register b, Constant 1>
		ldc:8 == 1695 <or Register b, Register a, Register b>
	push_const:14 == 1696 <@push_reg Register b>
		push_reg:10 == 1696 <.define registerToPush Register b>
		push_reg:13 == 1696 <ldc Register a, Constant 0>
		push_reg:14 == 1697 <ldb Register a, Register a>
		push_reg:15 == 1698 <stb Register a, Register b>
		push_reg:19 == 1699 <ldc Register b, Constant 1>
		push_reg:20 == 1700 <add Register a, Register a, Register b>
		push_reg:21 == 1701 <ldc Register b, Constant 0>
		push_reg:22 == 1702 <stb Register b, Register a>
pong.pa2:197 == 1703 <@and >
	and:3 == 1703 <.define lhs Register c>
	and:4 == 1703 <.define rhs Register d>
	and:5 == 1703 <.define result Register d>
	and:7 == 1703 <@pop_reg Register d>
		pop_reg:10 == 1703 <.define registerToLoad Register d>
		pop_reg:13 == 1703 <ldc Register a, Constant 0>
		pop_reg:14 == 1704 <ldb Register a, Register a>
		pop_reg:15 == 1705 <ldc Register b, Constant 1>
		pop_reg:16 == 1706 <sub Register a, Register a, Register b>
		pop_reg:17 == 1707 <ldc Register b, Constant 0>
		pop_reg:18 == 1708 <stb Register b, Register a>
		pop_reg:22 == 1709 <ldb Register a, Register d>
	and:8 == 1710 <@pop_reg Register c>
		pop_reg:10 == 1710 <.define registerToLoad Register c>
		pop_reg:13 == 1710 <ldc Register a, Constant 0>
		pop_reg:14 == 1711 <ldb Register a, Register a>
		pop_reg:15 == 1712 <ldc Register b, Constant 1>
		pop_reg:16 == 1713 <sub Register a, Register a, Register b>
		pop_reg:17 == 1714 <ldc Register b, Constant 0>
		pop_reg:18 == 1715 <stb Register b, Register a>
		pop_reg:22 == 1716 <ldb Register a, Register c>
	and:9 == 1717 <and Register d, Register c, Register d>
	and:10 == 1718 <@push_reg Register d>
		push_reg:10 == 1718 <.define registerToPush Register d>
		push_reg:13 == 1718 <ldc Register a, Constant 0>
		push_reg:14 == 1719 <ldb Register a, Register a>
		push_reg:15 == 1720 <stb Register a, Register d>
		push_reg:19 == 1721 <ldc Register b, Constant 1>
		push_reg:20 == 1722 <add Register a, Register a, Register b>
		push_reg:21 == 1723 <ldc Register b, Constant 0>
		push_reg:22 == 1724 <stb Register b, Register a>
pong.pa2:199 == 1725 <@return_value >
	return_value:4 == 1725 <@pop_mem_v Constant 1>
		pop_mem_v:6 == 1725 <.define val Register c>
		pop_mem_v:7 == 1725 <.define addr Constant 1>
		pop_mem_v:9 == 1725 <@pop_reg Register c>
			pop_reg:10 == 1725 <.define registerToLoad Register c>
			pop_reg:13 == 1725 <ldc Register a, Constant 0>
			pop_reg:14 == 1726 <ldb Register a, Register a>
			pop_reg:15 == 1727 <ldc Register b, Constant 1>
			pop_reg:16 == 1728 <sub Register a, Register a, Register b>
			pop_reg:17 == 1729 <ldc Register b, Constant 0>
			pop_reg:18 == 1730 <stb Register b, Register a>
			pop_reg:22 == 1731 <ldb Register a, Register c>
		pop_mem_v:11 == 1732 <@ldc Register b, Constant 1>
			ldc:1 == 1732 <.define writeReg Register b>
			ldc:2 == 1732 <.define const Constant 1>
			ldc:4 == 1732 <ldc Register a, Constant 0>
			ldc:5 == 1733 <ldc Register b, Constant 12>
			ldc:6 == 1734 <shl Register a, Register a, Register b>
			ldc:7 == 1735 <ldc Register b, Constant 1>
			ldc:8 == 1736 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1737 <stb Register b, Register c>
	return_value:6 == 1738 <@return >
		return:2 == 1738 <ldc Register b, Constant 3>
		return:3 == 1739 <ldb Register b, Register b>
		return:4 == 1740 <ldc Register a, Constant 0>
		return:5 == 1741 <stb Register a, Register b>
		return:7 == 1742 <@pop_reg Register d>
			pop_reg:10 == 1742 <.define registerToLoad Register d>
			pop_reg:13 == 1742 <ldc Register a, Constant 0>
			pop_reg:14 == 1743 <ldb Register a, Register a>
			pop_reg:15 == 1744 <ldc Register b, Constant 1>
			pop_reg:16 == 1745 <sub Register a, Register a, Register b>
			pop_reg:17 == 1746 <ldc Register b, Constant 0>
			pop_reg:18 == 1747 <stb Register b, Register a>
			pop_reg:22 == 1748 <ldb Register a, Register d>
		return:9 == 1749 <jump Register d>
pong.pa2:206 == 1750 <@function Constant 0>
	function:19 == 1750 <.define loccount Constant 0>
	function:22 == 1750 <ldc Register a, Constant 0>
	function:23 == 1751 <ldb Register a, Register a>
	function:24 == 1752 <ldc Register b, Constant 3>
	function:25 == 1753 <stb Register b, Register a>
	function:28 == 1754 <ldc Register a, Constant 0>
	function:29 == 1755 <ldb Register a, Register b>
	function:30 == 1756 <ldc Register c, Constant 0>
	function:31 == 1757 <add Register b, Register b, Register c>
	function:32 == 1758 <stb Register a, Register b>
pong.pa2:210 == 1759 <@push_mem Constant 16>
	push_mem:6 == 1759 <.define addr Register b>
	push_mem:7 == 1759 <.define value Register b>
	push_mem:9 == 1759 <@ldc Register b, Constant 16>
		ldc:1 == 1759 <.define writeReg Register b>
		ldc:2 == 1759 <.define const Constant 16>
		ldc:4 == 1759 <ldc Register a, Constant 0>
		ldc:5 == 1760 <ldc Register b, Constant 12>
		ldc:6 == 1761 <shl Register a, Register a, Register b>
		ldc:7 == 1762 <ldc Register b, Constant 16>
		ldc:8 == 1763 <or Register b, Register a, Register b>
	push_mem:10 == 1764 <ldb Register b, Register b>
	push_mem:12 == 1765 <@push_reg Register b>
		push_reg:10 == 1765 <.define registerToPush Register b>
		push_reg:13 == 1765 <ldc Register a, Constant 0>
		push_reg:14 == 1766 <ldb Register a, Register a>
		push_reg:15 == 1767 <stb Register a, Register b>
		push_reg:19 == 1768 <ldc Register b, Constant 1>
		push_reg:20 == 1769 <add Register a, Register a, Register b>
		push_reg:21 == 1770 <ldc Register b, Constant 0>
		push_reg:22 == 1771 <stb Register b, Register a>
pong.pa2:211 == 1772 <@push_mem Constant 25>
	push_mem:6 == 1772 <.define addr Register b>
	push_mem:7 == 1772 <.define value Register b>
	push_mem:9 == 1772 <@ldc Register b, Constant 25>
		ldc:1 == 1772 <.define writeReg Register b>
		ldc:2 == 1772 <.define const Constant 25>
		ldc:4 == 1772 <ldc Register a, Constant 0>
		ldc:5 == 1773 <ldc Register b, Constant 12>
		ldc:6 == 1774 <shl Register a, Register a, Register b>
		ldc:7 == 1775 <ldc Register b, Constant 25>
		ldc:8 == 1776 <or Register b, Register a, Register b>
	push_mem:10 == 1777 <ldb Register b, Register b>
	push_mem:12 == 1778 <@push_reg Register b>
		push_reg:10 == 1778 <.define registerToPush Register b>
		push_reg:13 == 1778 <ldc Register a, Constant 0>
		push_reg:14 == 1779 <ldb Register a, Register a>
		push_reg:15 == 1780 <stb Register a, Register b>
		push_reg:19 == 1781 <ldc Register b, Constant 1>
		push_reg:20 == 1782 <add Register a, Register a, Register b>
		push_reg:21 == 1783 <ldc Register b, Constant 0>
		push_reg:22 == 1784 <stb Register b, Register a>
pong.pa2:212 == 1785 <@add >
	add:3 == 1785 <.define lhs Register c>
	add:4 == 1785 <.define rhs Register d>
	add:5 == 1785 <.define result Register d>
	add:7 == 1785 <@pop_reg Register d>
		pop_reg:10 == 1785 <.define registerToLoad Register d>
		pop_reg:13 == 1785 <ldc Register a, Constant 0>
		pop_reg:14 == 1786 <ldb Register a, Register a>
		pop_reg:15 == 1787 <ldc Register b, Constant 1>
		pop_reg:16 == 1788 <sub Register a, Register a, Register b>
		pop_reg:17 == 1789 <ldc Register b, Constant 0>
		pop_reg:18 == 1790 <stb Register b, Register a>
		pop_reg:22 == 1791 <ldb Register a, Register d>
	add:8 == 1792 <@pop_reg Register c>
		pop_reg:10 == 1792 <.define registerToLoad Register c>
		pop_reg:13 == 1792 <ldc Register a, Constant 0>
		pop_reg:14 == 1793 <ldb Register a, Register a>
		pop_reg:15 == 1794 <ldc Register b, Constant 1>
		pop_reg:16 == 1795 <sub Register a, Register a, Register b>
		pop_reg:17 == 1796 <ldc Register b, Constant 0>
		pop_reg:18 == 1797 <stb Register b, Register a>
		pop_reg:22 == 1798 <ldb Register a, Register c>
	add:9 == 1799 <add Register d, Register c, Register d>
	add:10 == 1800 <@push_reg Register d>
		push_reg:10 == 1800 <.define registerToPush Register d>
		push_reg:13 == 1800 <ldc Register a, Constant 0>
		push_reg:14 == 1801 <ldb Register a, Register a>
		push_reg:15 == 1802 <stb Register a, Register d>
		push_reg:19 == 1803 <ldc Register b, Constant 1>
		push_reg:20 == 1804 <add Register a, Register a, Register b>
		push_reg:21 == 1805 <ldc Register b, Constant 0>
		push_reg:22 == 1806 <stb Register b, Register a>
pong.pa2:213 == 1807 <@pop_mem_v Constant 16>
	pop_mem_v:6 == 1807 <.define val Register c>
	pop_mem_v:7 == 1807 <.define addr Constant 16>
	pop_mem_v:9 == 1807 <@pop_reg Register c>
		pop_reg:10 == 1807 <.define registerToLoad Register c>
		pop_reg:13 == 1807 <ldc Register a, Constant 0>
		pop_reg:14 == 1808 <ldb Register a, Register a>
		pop_reg:15 == 1809 <ldc Register b, Constant 1>
		pop_reg:16 == 1810 <sub Register a, Register a, Register b>
		pop_reg:17 == 1811 <ldc Register b, Constant 0>
		pop_reg:18 == 1812 <stb Register b, Register a>
		pop_reg:22 == 1813 <ldb Register a, Register c>
	pop_mem_v:11 == 1814 <@ldc Register b, Constant 16>
		ldc:1 == 1814 <.define writeReg Register b>
		ldc:2 == 1814 <.define const Constant 16>
		ldc:4 == 1814 <ldc Register a, Constant 0>
		ldc:5 == 1815 <ldc Register b, Constant 12>
		ldc:6 == 1816 <shl Register a, Register a, Register b>
		ldc:7 == 1817 <ldc Register b, Constant 16>
		ldc:8 == 1818 <or Register b, Register a, Register b>
	pop_mem_v:12 == 1819 <stb Register b, Register c>
pong.pa2:215 == 1820 <@push_mem Constant 17>
	push_mem:6 == 1820 <.define addr Register b>
	push_mem:7 == 1820 <.define value Register b>
	push_mem:9 == 1820 <@ldc Register b, Constant 17>
		ldc:1 == 1820 <.define writeReg Register b>
		ldc:2 == 1820 <.define const Constant 17>
		ldc:4 == 1820 <ldc Register a, Constant 0>
		ldc:5 == 1821 <ldc Register b, Constant 12>
		ldc:6 == 1822 <shl Register a, Register a, Register b>
		ldc:7 == 1823 <ldc Register b, Constant 17>
		ldc:8 == 1824 <or Register b, Register a, Register b>
	push_mem:10 == 1825 <ldb Register b, Register b>
	push_mem:12 == 1826 <@push_reg Register b>
		push_reg:10 == 1826 <.define registerToPush Register b>
		push_reg:13 == 1826 <ldc Register a, Constant 0>
		push_reg:14 == 1827 <ldb Register a, Register a>
		push_reg:15 == 1828 <stb Register a, Register b>
		push_reg:19 == 1829 <ldc Register b, Constant 1>
		push_reg:20 == 1830 <add Register a, Register a, Register b>
		push_reg:21 == 1831 <ldc Register b, Constant 0>
		push_reg:22 == 1832 <stb Register b, Register a>
pong.pa2:216 == 1833 <@push_mem Constant 26>
	push_mem:6 == 1833 <.define addr Register b>
	push_mem:7 == 1833 <.define value Register b>
	push_mem:9 == 1833 <@ldc Register b, Constant 26>
		ldc:1 == 1833 <.define writeReg Register b>
		ldc:2 == 1833 <.define const Constant 26>
		ldc:4 == 1833 <ldc Register a, Constant 0>
		ldc:5 == 1834 <ldc Register b, Constant 12>
		ldc:6 == 1835 <shl Register a, Register a, Register b>
		ldc:7 == 1836 <ldc Register b, Constant 26>
		ldc:8 == 1837 <or Register b, Register a, Register b>
	push_mem:10 == 1838 <ldb Register b, Register b>
	push_mem:12 == 1839 <@push_reg Register b>
		push_reg:10 == 1839 <.define registerToPush Register b>
		push_reg:13 == 1839 <ldc Register a, Constant 0>
		push_reg:14 == 1840 <ldb Register a, Register a>
		push_reg:15 == 1841 <stb Register a, Register b>
		push_reg:19 == 1842 <ldc Register b, Constant 1>
		push_reg:20 == 1843 <add Register a, Register a, Register b>
		push_reg:21 == 1844 <ldc Register b, Constant 0>
		push_reg:22 == 1845 <stb Register b, Register a>
pong.pa2:217 == 1846 <@add >
	add:3 == 1846 <.define lhs Register c>
	add:4 == 1846 <.define rhs Register d>
	add:5 == 1846 <.define result Register d>
	add:7 == 1846 <@pop_reg Register d>
		pop_reg:10 == 1846 <.define registerToLoad Register d>
		pop_reg:13 == 1846 <ldc Register a, Constant 0>
		pop_reg:14 == 1847 <ldb Register a, Register a>
		pop_reg:15 == 1848 <ldc Register b, Constant 1>
		pop_reg:16 == 1849 <sub Register a, Register a, Register b>
		pop_reg:17 == 1850 <ldc Register b, Constant 0>
		pop_reg:18 == 1851 <stb Register b, Register a>
		pop_reg:22 == 1852 <ldb Register a, Register d>
	add:8 == 1853 <@pop_reg Register c>
		pop_reg:10 == 1853 <.define registerToLoad Register c>
		pop_reg:13 == 1853 <ldc Register a, Constant 0>
		pop_reg:14 == 1854 <ldb Register a, Register a>
		pop_reg:15 == 1855 <ldc Register b, Constant 1>
		pop_reg:16 == 1856 <sub Register a, Register a, Register b>
		pop_reg:17 == 1857 <ldc Register b, Constant 0>
		pop_reg:18 == 1858 <stb Register b, Register a>
		pop_reg:22 == 1859 <ldb Register a, Register c>
	add:9 == 1860 <add Register d, Register c, Register d>
	add:10 == 1861 <@push_reg Register d>
		push_reg:10 == 1861 <.define registerToPush Register d>
		push_reg:13 == 1861 <ldc Register a, Constant 0>
		push_reg:14 == 1862 <ldb Register a, Register a>
		push_reg:15 == 1863 <stb Register a, Register d>
		push_reg:19 == 1864 <ldc Register b, Constant 1>
		push_reg:20 == 1865 <add Register a, Register a, Register b>
		push_reg:21 == 1866 <ldc Register b, Constant 0>
		push_reg:22 == 1867 <stb Register b, Register a>
pong.pa2:218 == 1868 <@pop_mem_v Constant 17>
	pop_mem_v:6 == 1868 <.define val Register c>
	pop_mem_v:7 == 1868 <.define addr Constant 17>
	pop_mem_v:9 == 1868 <@pop_reg Register c>
		pop_reg:10 == 1868 <.define registerToLoad Register c>
		pop_reg:13 == 1868 <ldc Register a, Constant 0>
		pop_reg:14 == 1869 <ldb Register a, Register a>
		pop_reg:15 == 1870 <ldc Register b, Constant 1>
		pop_reg:16 == 1871 <sub Register a, Register a, Register b>
		pop_reg:17 == 1872 <ldc Register b, Constant 0>
		pop_reg:18 == 1873 <stb Register b, Register a>
		pop_reg:22 == 1874 <ldb Register a, Register c>
	pop_mem_v:11 == 1875 <@ldc Register b, Constant 17>
		ldc:1 == 1875 <.define writeReg Register b>
		ldc:2 == 1875 <.define const Constant 17>
		ldc:4 == 1875 <ldc Register a, Constant 0>
		ldc:5 == 1876 <ldc Register b, Constant 12>
		ldc:6 == 1877 <shl Register a, Register a, Register b>
		ldc:7 == 1878 <ldc Register b, Constant 17>
		ldc:8 == 1879 <or Register b, Register a, Register b>
	pop_mem_v:12 == 1880 <stb Register b, Register c>
pong.pa2:232 == 1881 <@return >
	return:2 == 1881 <ldc Register b, Constant 3>
	return:3 == 1882 <ldb Register b, Register b>
	return:4 == 1883 <ldc Register a, Constant 0>
	return:5 == 1884 <stb Register a, Register b>
	return:7 == 1885 <@pop_reg Register d>
		pop_reg:10 == 1885 <.define registerToLoad Register d>
		pop_reg:13 == 1885 <ldc Register a, Constant 0>
		pop_reg:14 == 1886 <ldb Register a, Register a>
		pop_reg:15 == 1887 <ldc Register b, Constant 1>
		pop_reg:16 == 1888 <sub Register a, Register a, Register b>
		pop_reg:17 == 1889 <ldc Register b, Constant 0>
		pop_reg:18 == 1890 <stb Register b, Register a>
		pop_reg:22 == 1891 <ldb Register a, Register d>
	return:9 == 1892 <jump Register d>
pong.pa2:239 == 1893 <@function Constant 0>
	function:19 == 1893 <.define loccount Constant 0>
	function:22 == 1893 <ldc Register a, Constant 0>
	function:23 == 1894 <ldb Register a, Register a>
	function:24 == 1895 <ldc Register b, Constant 3>
	function:25 == 1896 <stb Register b, Register a>
	function:28 == 1897 <ldc Register a, Constant 0>
	function:29 == 1898 <ldb Register a, Register b>
	function:30 == 1899 <ldc Register c, Constant 0>
	function:31 == 1900 <add Register b, Register b, Register c>
	function:32 == 1901 <stb Register a, Register b>
pong.pa2:242 == 1902 <@call Constant 2708, Constant 0>
	call:11 == 1902 <.define functionLabel Constant 2708>
	call:12 == 1902 <.define argcount Constant 0>
	call:15 == 1902 <@push_mem Constant 2>
		push_mem:6 == 1902 <.define addr Register b>
		push_mem:7 == 1902 <.define value Register b>
		push_mem:9 == 1902 <@ldc Register b, Constant 2>
			ldc:1 == 1902 <.define writeReg Register b>
			ldc:2 == 1902 <.define const Constant 2>
			ldc:4 == 1902 <ldc Register a, Constant 0>
			ldc:5 == 1903 <ldc Register b, Constant 12>
			ldc:6 == 1904 <shl Register a, Register a, Register b>
			ldc:7 == 1905 <ldc Register b, Constant 2>
			ldc:8 == 1906 <or Register b, Register a, Register b>
		push_mem:10 == 1907 <ldb Register b, Register b>
		push_mem:12 == 1908 <@push_reg Register b>
			push_reg:10 == 1908 <.define registerToPush Register b>
			push_reg:13 == 1908 <ldc Register a, Constant 0>
			push_reg:14 == 1909 <ldb Register a, Register a>
			push_reg:15 == 1910 <stb Register a, Register b>
			push_reg:19 == 1911 <ldc Register b, Constant 1>
			push_reg:20 == 1912 <add Register a, Register a, Register b>
			push_reg:21 == 1913 <ldc Register b, Constant 0>
			push_reg:22 == 1914 <stb Register b, Register a>
	call:16 == 1915 <@push_mem Constant 3>
		push_mem:6 == 1915 <.define addr Register b>
		push_mem:7 == 1915 <.define value Register b>
		push_mem:9 == 1915 <@ldc Register b, Constant 3>
			ldc:1 == 1915 <.define writeReg Register b>
			ldc:2 == 1915 <.define const Constant 3>
			ldc:4 == 1915 <ldc Register a, Constant 0>
			ldc:5 == 1916 <ldc Register b, Constant 12>
			ldc:6 == 1917 <shl Register a, Register a, Register b>
			ldc:7 == 1918 <ldc Register b, Constant 3>
			ldc:8 == 1919 <or Register b, Register a, Register b>
		push_mem:10 == 1920 <ldb Register b, Register b>
		push_mem:12 == 1921 <@push_reg Register b>
			push_reg:10 == 1921 <.define registerToPush Register b>
			push_reg:13 == 1921 <ldc Register a, Constant 0>
			push_reg:14 == 1922 <ldb Register a, Register a>
			push_reg:15 == 1923 <stb Register a, Register b>
			push_reg:19 == 1924 <ldc Register b, Constant 1>
			push_reg:20 == 1925 <add Register a, Register a, Register b>
			push_reg:21 == 1926 <ldc Register b, Constant 0>
			push_reg:22 == 1927 <stb Register b, Register a>
	call:19 == 1928 <@push_const Constant 2040>
		push_const:6 == 1928 <.define constantToPush Constant 2040>
		push_const:12 == 1928 <@ldc Register b, Constant 2040>
			ldc:1 == 1928 <.define writeReg Register b>
			ldc:2 == 1928 <.define const Constant 2040>
			ldc:4 == 1928 <ldc Register a, Constant 0>
			ldc:5 == 1929 <ldc Register b, Constant 12>
			ldc:6 == 1930 <shl Register a, Register a, Register b>
			ldc:7 == 1931 <ldc Register b, Constant 2040>
			ldc:8 == 1932 <or Register b, Register a, Register b>
		push_const:14 == 1933 <@push_reg Register b>
			push_reg:10 == 1933 <.define registerToPush Register b>
			push_reg:13 == 1933 <ldc Register a, Constant 0>
			push_reg:14 == 1934 <ldb Register a, Register a>
			push_reg:15 == 1935 <stb Register a, Register b>
			push_reg:19 == 1936 <ldc Register b, Constant 1>
			push_reg:20 == 1937 <add Register a, Register a, Register b>
			push_reg:21 == 1938 <ldc Register b, Constant 0>
			push_reg:22 == 1939 <stb Register b, Register a>
	call:24 == 1940 <@push_mem Constant 0>
		push_mem:6 == 1940 <.define addr Register b>
		push_mem:7 == 1940 <.define value Register b>
		push_mem:9 == 1940 <@ldc Register b, Constant 0>
			ldc:1 == 1940 <.define writeReg Register b>
			ldc:2 == 1940 <.define const Constant 0>
			ldc:4 == 1940 <ldc Register a, Constant 0>
			ldc:5 == 1941 <ldc Register b, Constant 12>
			ldc:6 == 1942 <shl Register a, Register a, Register b>
			ldc:7 == 1943 <ldc Register b, Constant 0>
			ldc:8 == 1944 <or Register b, Register a, Register b>
		push_mem:10 == 1945 <ldb Register b, Register b>
		push_mem:12 == 1946 <@push_reg Register b>
			push_reg:10 == 1946 <.define registerToPush Register b>
			push_reg:13 == 1946 <ldc Register a, Constant 0>
			push_reg:14 == 1947 <ldb Register a, Register a>
			push_reg:15 == 1948 <stb Register a, Register b>
			push_reg:19 == 1949 <ldc Register b, Constant 1>
			push_reg:20 == 1950 <add Register a, Register a, Register b>
			push_reg:21 == 1951 <ldc Register b, Constant 0>
			push_reg:22 == 1952 <stb Register b, Register a>
	call:26 == 1953 <@push_const Constant 3>
		push_const:6 == 1953 <.define constantToPush Constant 3>
		push_const:12 == 1953 <@ldc Register b, Constant 3>
			ldc:1 == 1953 <.define writeReg Register b>
			ldc:2 == 1953 <.define const Constant 3>
			ldc:4 == 1953 <ldc Register a, Constant 0>
			ldc:5 == 1954 <ldc Register b, Constant 12>
			ldc:6 == 1955 <shl Register a, Register a, Register b>
			ldc:7 == 1956 <ldc Register b, Constant 3>
			ldc:8 == 1957 <or Register b, Register a, Register b>
		push_const:14 == 1958 <@push_reg Register b>
			push_reg:10 == 1958 <.define registerToPush Register b>
			push_reg:13 == 1958 <ldc Register a, Constant 0>
			push_reg:14 == 1959 <ldb Register a, Register a>
			push_reg:15 == 1960 <stb Register a, Register b>
			push_reg:19 == 1961 <ldc Register b, Constant 1>
			push_reg:20 == 1962 <add Register a, Register a, Register b>
			push_reg:21 == 1963 <ldc Register b, Constant 0>
			push_reg:22 == 1964 <stb Register b, Register a>
	call:27 == 1965 <@push_const Constant 0>
		push_const:6 == 1965 <.define constantToPush Constant 0>
		push_const:12 == 1965 <@ldc Register b, Constant 0>
			ldc:1 == 1965 <.define writeReg Register b>
			ldc:2 == 1965 <.define const Constant 0>
			ldc:4 == 1965 <ldc Register a, Constant 0>
			ldc:5 == 1966 <ldc Register b, Constant 12>
			ldc:6 == 1967 <shl Register a, Register a, Register b>
			ldc:7 == 1968 <ldc Register b, Constant 0>
			ldc:8 == 1969 <or Register b, Register a, Register b>
		push_const:14 == 1970 <@push_reg Register b>
			push_reg:10 == 1970 <.define registerToPush Register b>
			push_reg:13 == 1970 <ldc Register a, Constant 0>
			push_reg:14 == 1971 <ldb Register a, Register a>
			push_reg:15 == 1972 <stb Register a, Register b>
			push_reg:19 == 1973 <ldc Register b, Constant 1>
			push_reg:20 == 1974 <add Register a, Register a, Register b>
			push_reg:21 == 1975 <ldc Register b, Constant 0>
			push_reg:22 == 1976 <stb Register b, Register a>
	call:28 == 1977 <@add >
		add:3 == 1977 <.define lhs Register c>
		add:4 == 1977 <.define rhs Register d>
		add:5 == 1977 <.define result Register d>
		add:7 == 1977 <@pop_reg Register d>
			pop_reg:10 == 1977 <.define registerToLoad Register d>
			pop_reg:13 == 1977 <ldc Register a, Constant 0>
			pop_reg:14 == 1978 <ldb Register a, Register a>
			pop_reg:15 == 1979 <ldc Register b, Constant 1>
			pop_reg:16 == 1980 <sub Register a, Register a, Register b>
			pop_reg:17 == 1981 <ldc Register b, Constant 0>
			pop_reg:18 == 1982 <stb Register b, Register a>
			pop_reg:22 == 1983 <ldb Register a, Register d>
		add:8 == 1984 <@pop_reg Register c>
			pop_reg:10 == 1984 <.define registerToLoad Register c>
			pop_reg:13 == 1984 <ldc Register a, Constant 0>
			pop_reg:14 == 1985 <ldb Register a, Register a>
			pop_reg:15 == 1986 <ldc Register b, Constant 1>
			pop_reg:16 == 1987 <sub Register a, Register a, Register b>
			pop_reg:17 == 1988 <ldc Register b, Constant 0>
			pop_reg:18 == 1989 <stb Register b, Register a>
			pop_reg:22 == 1990 <ldb Register a, Register c>
		add:9 == 1991 <add Register d, Register c, Register d>
		add:10 == 1992 <@push_reg Register d>
			push_reg:10 == 1992 <.define registerToPush Register d>
			push_reg:13 == 1992 <ldc Register a, Constant 0>
			push_reg:14 == 1993 <ldb Register a, Register a>
			push_reg:15 == 1994 <stb Register a, Register d>
			push_reg:19 == 1995 <ldc Register b, Constant 1>
			push_reg:20 == 1996 <add Register a, Register a, Register b>
			push_reg:21 == 1997 <ldc Register b, Constant 0>
			push_reg:22 == 1998 <stb Register b, Register a>
	call:29 == 1999 <@sub >
		sub:3 == 1999 <.define lhs Register c>
		sub:4 == 1999 <.define rhs Register d>
		sub:5 == 1999 <.define result Register d>
		sub:7 == 1999 <@pop_reg Register d>
			pop_reg:10 == 1999 <.define registerToLoad Register d>
			pop_reg:13 == 1999 <ldc Register a, Constant 0>
			pop_reg:14 == 2000 <ldb Register a, Register a>
			pop_reg:15 == 2001 <ldc Register b, Constant 1>
			pop_reg:16 == 2002 <sub Register a, Register a, Register b>
			pop_reg:17 == 2003 <ldc Register b, Constant 0>
			pop_reg:18 == 2004 <stb Register b, Register a>
			pop_reg:22 == 2005 <ldb Register a, Register d>
		sub:8 == 2006 <@pop_reg Register c>
			pop_reg:10 == 2006 <.define registerToLoad Register c>
			pop_reg:13 == 2006 <ldc Register a, Constant 0>
			pop_reg:14 == 2007 <ldb Register a, Register a>
			pop_reg:15 == 2008 <ldc Register b, Constant 1>
			pop_reg:16 == 2009 <sub Register a, Register a, Register b>
			pop_reg:17 == 2010 <ldc Register b, Constant 0>
			pop_reg:18 == 2011 <stb Register b, Register a>
			pop_reg:22 == 2012 <ldb Register a, Register c>
		sub:9 == 2013 <sub Register d, Register c, Register d>
		sub:10 == 2014 <@push_reg Register d>
			push_reg:10 == 2014 <.define registerToPush Register d>
			push_reg:13 == 2014 <ldc Register a, Constant 0>
			push_reg:14 == 2015 <ldb Register a, Register a>
			push_reg:15 == 2016 <stb Register a, Register d>
			push_reg:19 == 2017 <ldc Register b, Constant 1>
			push_reg:20 == 2018 <add Register a, Register a, Register b>
			push_reg:21 == 2019 <ldc Register b, Constant 0>
			push_reg:22 == 2020 <stb Register b, Register a>
	call:30 == 2021 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 2021 <.define val Register c>
		pop_mem_v:7 == 2021 <.define addr Constant 2>
		pop_mem_v:9 == 2021 <@pop_reg Register c>
			pop_reg:10 == 2021 <.define registerToLoad Register c>
			pop_reg:13 == 2021 <ldc Register a, Constant 0>
			pop_reg:14 == 2022 <ldb Register a, Register a>
			pop_reg:15 == 2023 <ldc Register b, Constant 1>
			pop_reg:16 == 2024 <sub Register a, Register a, Register b>
			pop_reg:17 == 2025 <ldc Register b, Constant 0>
			pop_reg:18 == 2026 <stb Register b, Register a>
			pop_reg:22 == 2027 <ldb Register a, Register c>
		pop_mem_v:11 == 2028 <@ldc Register b, Constant 2>
			ldc:1 == 2028 <.define writeReg Register b>
			ldc:2 == 2028 <.define const Constant 2>
			ldc:4 == 2028 <ldc Register a, Constant 0>
			ldc:5 == 2029 <ldc Register b, Constant 12>
			ldc:6 == 2030 <shl Register a, Register a, Register b>
			ldc:7 == 2031 <ldc Register b, Constant 2>
			ldc:8 == 2032 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2033 <stb Register b, Register c>
	call:32 == 2034 <@ldc Register a, Constant 2708>
		ldc:1 == 2034 <.define writeReg Register a>
		ldc:2 == 2034 <.define const Constant 2708>
		ldc:4 == 2034 <ldc Register a, Constant 0>
		ldc:5 == 2035 <ldc Register b, Constant 12>
		ldc:6 == 2036 <shl Register a, Register a, Register b>
		ldc:7 == 2037 <ldc Register b, Constant 2708>
		ldc:8 == 2038 <or Register a, Register a, Register b>
	call:33 == 2039 <jmp Register a>
	call:38 == 2040 <ldc Register d, Constant 2>
	call:41 == 2041 <ldb Register d, Register d>
	call:43 == 2042 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 2042 <.define val Register c>
		pop_mem_v:7 == 2042 <.define addr Constant 3>
		pop_mem_v:9 == 2042 <@pop_reg Register c>
			pop_reg:10 == 2042 <.define registerToLoad Register c>
			pop_reg:13 == 2042 <ldc Register a, Constant 0>
			pop_reg:14 == 2043 <ldb Register a, Register a>
			pop_reg:15 == 2044 <ldc Register b, Constant 1>
			pop_reg:16 == 2045 <sub Register a, Register a, Register b>
			pop_reg:17 == 2046 <ldc Register b, Constant 0>
			pop_reg:18 == 2047 <stb Register b, Register a>
			pop_reg:22 == 2048 <ldb Register a, Register c>
		pop_mem_v:11 == 2049 <@ldc Register b, Constant 3>
			ldc:1 == 2049 <.define writeReg Register b>
			ldc:2 == 2049 <.define const Constant 3>
			ldc:4 == 2049 <ldc Register a, Constant 0>
			ldc:5 == 2050 <ldc Register b, Constant 12>
			ldc:6 == 2051 <shl Register a, Register a, Register b>
			ldc:7 == 2052 <ldc Register b, Constant 3>
			ldc:8 == 2053 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2054 <stb Register b, Register c>
	call:44 == 2055 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 2055 <.define val Register c>
		pop_mem_v:7 == 2055 <.define addr Constant 2>
		pop_mem_v:9 == 2055 <@pop_reg Register c>
			pop_reg:10 == 2055 <.define registerToLoad Register c>
			pop_reg:13 == 2055 <ldc Register a, Constant 0>
			pop_reg:14 == 2056 <ldb Register a, Register a>
			pop_reg:15 == 2057 <ldc Register b, Constant 1>
			pop_reg:16 == 2058 <sub Register a, Register a, Register b>
			pop_reg:17 == 2059 <ldc Register b, Constant 0>
			pop_reg:18 == 2060 <stb Register b, Register a>
			pop_reg:22 == 2061 <ldb Register a, Register c>
		pop_mem_v:11 == 2062 <@ldc Register b, Constant 2>
			ldc:1 == 2062 <.define writeReg Register b>
			ldc:2 == 2062 <.define const Constant 2>
			ldc:4 == 2062 <ldc Register a, Constant 0>
			ldc:5 == 2063 <ldc Register b, Constant 12>
			ldc:6 == 2064 <shl Register a, Register a, Register b>
			ldc:7 == 2065 <ldc Register b, Constant 2>
			ldc:8 == 2066 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2067 <stb Register b, Register c>
	call:46 == 2068 <ldc Register c, Constant 0>
	call:47 == 2069 <stb Register c, Register d>
pong.pa2:244 == 2070 <@push_mem Constant 18>
	push_mem:6 == 2070 <.define addr Register b>
	push_mem:7 == 2070 <.define value Register b>
	push_mem:9 == 2070 <@ldc Register b, Constant 18>
		ldc:1 == 2070 <.define writeReg Register b>
		ldc:2 == 2070 <.define const Constant 18>
		ldc:4 == 2070 <ldc Register a, Constant 0>
		ldc:5 == 2071 <ldc Register b, Constant 12>
		ldc:6 == 2072 <shl Register a, Register a, Register b>
		ldc:7 == 2073 <ldc Register b, Constant 18>
		ldc:8 == 2074 <or Register b, Register a, Register b>
	push_mem:10 == 2075 <ldb Register b, Register b>
	push_mem:12 == 2076 <@push_reg Register b>
		push_reg:10 == 2076 <.define registerToPush Register b>
		push_reg:13 == 2076 <ldc Register a, Constant 0>
		push_reg:14 == 2077 <ldb Register a, Register a>
		push_reg:15 == 2078 <stb Register a, Register b>
		push_reg:19 == 2079 <ldc Register b, Constant 1>
		push_reg:20 == 2080 <add Register a, Register a, Register b>
		push_reg:21 == 2081 <ldc Register b, Constant 0>
		push_reg:22 == 2082 <stb Register b, Register a>
pong.pa2:245 == 2083 <@push_mem Constant 19>
	push_mem:6 == 2083 <.define addr Register b>
	push_mem:7 == 2083 <.define value Register b>
	push_mem:9 == 2083 <@ldc Register b, Constant 19>
		ldc:1 == 2083 <.define writeReg Register b>
		ldc:2 == 2083 <.define const Constant 19>
		ldc:4 == 2083 <ldc Register a, Constant 0>
		ldc:5 == 2084 <ldc Register b, Constant 12>
		ldc:6 == 2085 <shl Register a, Register a, Register b>
		ldc:7 == 2086 <ldc Register b, Constant 19>
		ldc:8 == 2087 <or Register b, Register a, Register b>
	push_mem:10 == 2088 <ldb Register b, Register b>
	push_mem:12 == 2089 <@push_reg Register b>
		push_reg:10 == 2089 <.define registerToPush Register b>
		push_reg:13 == 2089 <ldc Register a, Constant 0>
		push_reg:14 == 2090 <ldb Register a, Register a>
		push_reg:15 == 2091 <stb Register a, Register b>
		push_reg:19 == 2092 <ldc Register b, Constant 1>
		push_reg:20 == 2093 <add Register a, Register a, Register b>
		push_reg:21 == 2094 <ldc Register b, Constant 0>
		push_reg:22 == 2095 <stb Register b, Register a>
pong.pa2:247 == 2096 <@push_const Constant 0>
	push_const:6 == 2096 <.define constantToPush Constant 0>
	push_const:12 == 2096 <@ldc Register b, Constant 0>
		ldc:1 == 2096 <.define writeReg Register b>
		ldc:2 == 2096 <.define const Constant 0>
		ldc:4 == 2096 <ldc Register a, Constant 0>
		ldc:5 == 2097 <ldc Register b, Constant 12>
		ldc:6 == 2098 <shl Register a, Register a, Register b>
		ldc:7 == 2099 <ldc Register b, Constant 0>
		ldc:8 == 2100 <or Register b, Register a, Register b>
	push_const:14 == 2101 <@push_reg Register b>
		push_reg:10 == 2101 <.define registerToPush Register b>
		push_reg:13 == 2101 <ldc Register a, Constant 0>
		push_reg:14 == 2102 <ldb Register a, Register a>
		push_reg:15 == 2103 <stb Register a, Register b>
		push_reg:19 == 2104 <ldc Register b, Constant 1>
		push_reg:20 == 2105 <add Register a, Register a, Register b>
		push_reg:21 == 2106 <ldc Register b, Constant 0>
		push_reg:22 == 2107 <stb Register b, Register a>
pong.pa2:248 == 2108 <@call Constant 3715, Constant 3>
	call:11 == 2108 <.define functionLabel Constant 3715>
	call:12 == 2108 <.define argcount Constant 3>
	call:15 == 2108 <@push_mem Constant 2>
		push_mem:6 == 2108 <.define addr Register b>
		push_mem:7 == 2108 <.define value Register b>
		push_mem:9 == 2108 <@ldc Register b, Constant 2>
			ldc:1 == 2108 <.define writeReg Register b>
			ldc:2 == 2108 <.define const Constant 2>
			ldc:4 == 2108 <ldc Register a, Constant 0>
			ldc:5 == 2109 <ldc Register b, Constant 12>
			ldc:6 == 2110 <shl Register a, Register a, Register b>
			ldc:7 == 2111 <ldc Register b, Constant 2>
			ldc:8 == 2112 <or Register b, Register a, Register b>
		push_mem:10 == 2113 <ldb Register b, Register b>
		push_mem:12 == 2114 <@push_reg Register b>
			push_reg:10 == 2114 <.define registerToPush Register b>
			push_reg:13 == 2114 <ldc Register a, Constant 0>
			push_reg:14 == 2115 <ldb Register a, Register a>
			push_reg:15 == 2116 <stb Register a, Register b>
			push_reg:19 == 2117 <ldc Register b, Constant 1>
			push_reg:20 == 2118 <add Register a, Register a, Register b>
			push_reg:21 == 2119 <ldc Register b, Constant 0>
			push_reg:22 == 2120 <stb Register b, Register a>
	call:16 == 2121 <@push_mem Constant 3>
		push_mem:6 == 2121 <.define addr Register b>
		push_mem:7 == 2121 <.define value Register b>
		push_mem:9 == 2121 <@ldc Register b, Constant 3>
			ldc:1 == 2121 <.define writeReg Register b>
			ldc:2 == 2121 <.define const Constant 3>
			ldc:4 == 2121 <ldc Register a, Constant 0>
			ldc:5 == 2122 <ldc Register b, Constant 12>
			ldc:6 == 2123 <shl Register a, Register a, Register b>
			ldc:7 == 2124 <ldc Register b, Constant 3>
			ldc:8 == 2125 <or Register b, Register a, Register b>
		push_mem:10 == 2126 <ldb Register b, Register b>
		push_mem:12 == 2127 <@push_reg Register b>
			push_reg:10 == 2127 <.define registerToPush Register b>
			push_reg:13 == 2127 <ldc Register a, Constant 0>
			push_reg:14 == 2128 <ldb Register a, Register a>
			push_reg:15 == 2129 <stb Register a, Register b>
			push_reg:19 == 2130 <ldc Register b, Constant 1>
			push_reg:20 == 2131 <add Register a, Register a, Register b>
			push_reg:21 == 2132 <ldc Register b, Constant 0>
			push_reg:22 == 2133 <stb Register b, Register a>
	call:19 == 2134 <@push_const Constant 2246>
		push_const:6 == 2134 <.define constantToPush Constant 2246>
		push_const:12 == 2134 <@ldc Register b, Constant 2246>
			ldc:1 == 2134 <.define writeReg Register b>
			ldc:2 == 2134 <.define const Constant 2246>
			ldc:4 == 2134 <ldc Register a, Constant 0>
			ldc:5 == 2135 <ldc Register b, Constant 12>
			ldc:6 == 2136 <shl Register a, Register a, Register b>
			ldc:7 == 2137 <ldc Register b, Constant 2246>
			ldc:8 == 2138 <or Register b, Register a, Register b>
		push_const:14 == 2139 <@push_reg Register b>
			push_reg:10 == 2139 <.define registerToPush Register b>
			push_reg:13 == 2139 <ldc Register a, Constant 0>
			push_reg:14 == 2140 <ldb Register a, Register a>
			push_reg:15 == 2141 <stb Register a, Register b>
			push_reg:19 == 2142 <ldc Register b, Constant 1>
			push_reg:20 == 2143 <add Register a, Register a, Register b>
			push_reg:21 == 2144 <ldc Register b, Constant 0>
			push_reg:22 == 2145 <stb Register b, Register a>
	call:24 == 2146 <@push_mem Constant 0>
		push_mem:6 == 2146 <.define addr Register b>
		push_mem:7 == 2146 <.define value Register b>
		push_mem:9 == 2146 <@ldc Register b, Constant 0>
			ldc:1 == 2146 <.define writeReg Register b>
			ldc:2 == 2146 <.define const Constant 0>
			ldc:4 == 2146 <ldc Register a, Constant 0>
			ldc:5 == 2147 <ldc Register b, Constant 12>
			ldc:6 == 2148 <shl Register a, Register a, Register b>
			ldc:7 == 2149 <ldc Register b, Constant 0>
			ldc:8 == 2150 <or Register b, Register a, Register b>
		push_mem:10 == 2151 <ldb Register b, Register b>
		push_mem:12 == 2152 <@push_reg Register b>
			push_reg:10 == 2152 <.define registerToPush Register b>
			push_reg:13 == 2152 <ldc Register a, Constant 0>
			push_reg:14 == 2153 <ldb Register a, Register a>
			push_reg:15 == 2154 <stb Register a, Register b>
			push_reg:19 == 2155 <ldc Register b, Constant 1>
			push_reg:20 == 2156 <add Register a, Register a, Register b>
			push_reg:21 == 2157 <ldc Register b, Constant 0>
			push_reg:22 == 2158 <stb Register b, Register a>
	call:26 == 2159 <@push_const Constant 3>
		push_const:6 == 2159 <.define constantToPush Constant 3>
		push_const:12 == 2159 <@ldc Register b, Constant 3>
			ldc:1 == 2159 <.define writeReg Register b>
			ldc:2 == 2159 <.define const Constant 3>
			ldc:4 == 2159 <ldc Register a, Constant 0>
			ldc:5 == 2160 <ldc Register b, Constant 12>
			ldc:6 == 2161 <shl Register a, Register a, Register b>
			ldc:7 == 2162 <ldc Register b, Constant 3>
			ldc:8 == 2163 <or Register b, Register a, Register b>
		push_const:14 == 2164 <@push_reg Register b>
			push_reg:10 == 2164 <.define registerToPush Register b>
			push_reg:13 == 2164 <ldc Register a, Constant 0>
			push_reg:14 == 2165 <ldb Register a, Register a>
			push_reg:15 == 2166 <stb Register a, Register b>
			push_reg:19 == 2167 <ldc Register b, Constant 1>
			push_reg:20 == 2168 <add Register a, Register a, Register b>
			push_reg:21 == 2169 <ldc Register b, Constant 0>
			push_reg:22 == 2170 <stb Register b, Register a>
	call:27 == 2171 <@push_const Constant 3>
		push_const:6 == 2171 <.define constantToPush Constant 3>
		push_const:12 == 2171 <@ldc Register b, Constant 3>
			ldc:1 == 2171 <.define writeReg Register b>
			ldc:2 == 2171 <.define const Constant 3>
			ldc:4 == 2171 <ldc Register a, Constant 0>
			ldc:5 == 2172 <ldc Register b, Constant 12>
			ldc:6 == 2173 <shl Register a, Register a, Register b>
			ldc:7 == 2174 <ldc Register b, Constant 3>
			ldc:8 == 2175 <or Register b, Register a, Register b>
		push_const:14 == 2176 <@push_reg Register b>
			push_reg:10 == 2176 <.define registerToPush Register b>
			push_reg:13 == 2176 <ldc Register a, Constant 0>
			push_reg:14 == 2177 <ldb Register a, Register a>
			push_reg:15 == 2178 <stb Register a, Register b>
			push_reg:19 == 2179 <ldc Register b, Constant 1>
			push_reg:20 == 2180 <add Register a, Register a, Register b>
			push_reg:21 == 2181 <ldc Register b, Constant 0>
			push_reg:22 == 2182 <stb Register b, Register a>
	call:28 == 2183 <@add >
		add:3 == 2183 <.define lhs Register c>
		add:4 == 2183 <.define rhs Register d>
		add:5 == 2183 <.define result Register d>
		add:7 == 2183 <@pop_reg Register d>
			pop_reg:10 == 2183 <.define registerToLoad Register d>
			pop_reg:13 == 2183 <ldc Register a, Constant 0>
			pop_reg:14 == 2184 <ldb Register a, Register a>
			pop_reg:15 == 2185 <ldc Register b, Constant 1>
			pop_reg:16 == 2186 <sub Register a, Register a, Register b>
			pop_reg:17 == 2187 <ldc Register b, Constant 0>
			pop_reg:18 == 2188 <stb Register b, Register a>
			pop_reg:22 == 2189 <ldb Register a, Register d>
		add:8 == 2190 <@pop_reg Register c>
			pop_reg:10 == 2190 <.define registerToLoad Register c>
			pop_reg:13 == 2190 <ldc Register a, Constant 0>
			pop_reg:14 == 2191 <ldb Register a, Register a>
			pop_reg:15 == 2192 <ldc Register b, Constant 1>
			pop_reg:16 == 2193 <sub Register a, Register a, Register b>
			pop_reg:17 == 2194 <ldc Register b, Constant 0>
			pop_reg:18 == 2195 <stb Register b, Register a>
			pop_reg:22 == 2196 <ldb Register a, Register c>
		add:9 == 2197 <add Register d, Register c, Register d>
		add:10 == 2198 <@push_reg Register d>
			push_reg:10 == 2198 <.define registerToPush Register d>
			push_reg:13 == 2198 <ldc Register a, Constant 0>
			push_reg:14 == 2199 <ldb Register a, Register a>
			push_reg:15 == 2200 <stb Register a, Register d>
			push_reg:19 == 2201 <ldc Register b, Constant 1>
			push_reg:20 == 2202 <add Register a, Register a, Register b>
			push_reg:21 == 2203 <ldc Register b, Constant 0>
			push_reg:22 == 2204 <stb Register b, Register a>
	call:29 == 2205 <@sub >
		sub:3 == 2205 <.define lhs Register c>
		sub:4 == 2205 <.define rhs Register d>
		sub:5 == 2205 <.define result Register d>
		sub:7 == 2205 <@pop_reg Register d>
			pop_reg:10 == 2205 <.define registerToLoad Register d>
			pop_reg:13 == 2205 <ldc Register a, Constant 0>
			pop_reg:14 == 2206 <ldb Register a, Register a>
			pop_reg:15 == 2207 <ldc Register b, Constant 1>
			pop_reg:16 == 2208 <sub Register a, Register a, Register b>
			pop_reg:17 == 2209 <ldc Register b, Constant 0>
			pop_reg:18 == 2210 <stb Register b, Register a>
			pop_reg:22 == 2211 <ldb Register a, Register d>
		sub:8 == 2212 <@pop_reg Register c>
			pop_reg:10 == 2212 <.define registerToLoad Register c>
			pop_reg:13 == 2212 <ldc Register a, Constant 0>
			pop_reg:14 == 2213 <ldb Register a, Register a>
			pop_reg:15 == 2214 <ldc Register b, Constant 1>
			pop_reg:16 == 2215 <sub Register a, Register a, Register b>
			pop_reg:17 == 2216 <ldc Register b, Constant 0>
			pop_reg:18 == 2217 <stb Register b, Register a>
			pop_reg:22 == 2218 <ldb Register a, Register c>
		sub:9 == 2219 <sub Register d, Register c, Register d>
		sub:10 == 2220 <@push_reg Register d>
			push_reg:10 == 2220 <.define registerToPush Register d>
			push_reg:13 == 2220 <ldc Register a, Constant 0>
			push_reg:14 == 2221 <ldb Register a, Register a>
			push_reg:15 == 2222 <stb Register a, Register d>
			push_reg:19 == 2223 <ldc Register b, Constant 1>
			push_reg:20 == 2224 <add Register a, Register a, Register b>
			push_reg:21 == 2225 <ldc Register b, Constant 0>
			push_reg:22 == 2226 <stb Register b, Register a>
	call:30 == 2227 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 2227 <.define val Register c>
		pop_mem_v:7 == 2227 <.define addr Constant 2>
		pop_mem_v:9 == 2227 <@pop_reg Register c>
			pop_reg:10 == 2227 <.define registerToLoad Register c>
			pop_reg:13 == 2227 <ldc Register a, Constant 0>
			pop_reg:14 == 2228 <ldb Register a, Register a>
			pop_reg:15 == 2229 <ldc Register b, Constant 1>
			pop_reg:16 == 2230 <sub Register a, Register a, Register b>
			pop_reg:17 == 2231 <ldc Register b, Constant 0>
			pop_reg:18 == 2232 <stb Register b, Register a>
			pop_reg:22 == 2233 <ldb Register a, Register c>
		pop_mem_v:11 == 2234 <@ldc Register b, Constant 2>
			ldc:1 == 2234 <.define writeReg Register b>
			ldc:2 == 2234 <.define const Constant 2>
			ldc:4 == 2234 <ldc Register a, Constant 0>
			ldc:5 == 2235 <ldc Register b, Constant 12>
			ldc:6 == 2236 <shl Register a, Register a, Register b>
			ldc:7 == 2237 <ldc Register b, Constant 2>
			ldc:8 == 2238 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2239 <stb Register b, Register c>
	call:32 == 2240 <@ldc Register a, Constant 3715>
		ldc:1 == 2240 <.define writeReg Register a>
		ldc:2 == 2240 <.define const Constant 3715>
		ldc:4 == 2240 <ldc Register a, Constant 0>
		ldc:5 == 2241 <ldc Register b, Constant 12>
		ldc:6 == 2242 <shl Register a, Register a, Register b>
		ldc:7 == 2243 <ldc Register b, Constant 3715>
		ldc:8 == 2244 <or Register a, Register a, Register b>
	call:33 == 2245 <jmp Register a>
	call:38 == 2246 <ldc Register d, Constant 2>
	call:41 == 2247 <ldb Register d, Register d>
	call:43 == 2248 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 2248 <.define val Register c>
		pop_mem_v:7 == 2248 <.define addr Constant 3>
		pop_mem_v:9 == 2248 <@pop_reg Register c>
			pop_reg:10 == 2248 <.define registerToLoad Register c>
			pop_reg:13 == 2248 <ldc Register a, Constant 0>
			pop_reg:14 == 2249 <ldb Register a, Register a>
			pop_reg:15 == 2250 <ldc Register b, Constant 1>
			pop_reg:16 == 2251 <sub Register a, Register a, Register b>
			pop_reg:17 == 2252 <ldc Register b, Constant 0>
			pop_reg:18 == 2253 <stb Register b, Register a>
			pop_reg:22 == 2254 <ldb Register a, Register c>
		pop_mem_v:11 == 2255 <@ldc Register b, Constant 3>
			ldc:1 == 2255 <.define writeReg Register b>
			ldc:2 == 2255 <.define const Constant 3>
			ldc:4 == 2255 <ldc Register a, Constant 0>
			ldc:5 == 2256 <ldc Register b, Constant 12>
			ldc:6 == 2257 <shl Register a, Register a, Register b>
			ldc:7 == 2258 <ldc Register b, Constant 3>
			ldc:8 == 2259 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2260 <stb Register b, Register c>
	call:44 == 2261 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 2261 <.define val Register c>
		pop_mem_v:7 == 2261 <.define addr Constant 2>
		pop_mem_v:9 == 2261 <@pop_reg Register c>
			pop_reg:10 == 2261 <.define registerToLoad Register c>
			pop_reg:13 == 2261 <ldc Register a, Constant 0>
			pop_reg:14 == 2262 <ldb Register a, Register a>
			pop_reg:15 == 2263 <ldc Register b, Constant 1>
			pop_reg:16 == 2264 <sub Register a, Register a, Register b>
			pop_reg:17 == 2265 <ldc Register b, Constant 0>
			pop_reg:18 == 2266 <stb Register b, Register a>
			pop_reg:22 == 2267 <ldb Register a, Register c>
		pop_mem_v:11 == 2268 <@ldc Register b, Constant 2>
			ldc:1 == 2268 <.define writeReg Register b>
			ldc:2 == 2268 <.define const Constant 2>
			ldc:4 == 2268 <ldc Register a, Constant 0>
			ldc:5 == 2269 <ldc Register b, Constant 12>
			ldc:6 == 2270 <shl Register a, Register a, Register b>
			ldc:7 == 2271 <ldc Register b, Constant 2>
			ldc:8 == 2272 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2273 <stb Register b, Register c>
	call:46 == 2274 <ldc Register c, Constant 0>
	call:47 == 2275 <stb Register c, Register d>
pong.pa2:250 == 2276 <@push_const Constant 56>
	push_const:6 == 2276 <.define constantToPush Constant 56>
	push_const:12 == 2276 <@ldc Register b, Constant 56>
		ldc:1 == 2276 <.define writeReg Register b>
		ldc:2 == 2276 <.define const Constant 56>
		ldc:4 == 2276 <ldc Register a, Constant 0>
		ldc:5 == 2277 <ldc Register b, Constant 12>
		ldc:6 == 2278 <shl Register a, Register a, Register b>
		ldc:7 == 2279 <ldc Register b, Constant 56>
		ldc:8 == 2280 <or Register b, Register a, Register b>
	push_const:14 == 2281 <@push_reg Register b>
		push_reg:10 == 2281 <.define registerToPush Register b>
		push_reg:13 == 2281 <ldc Register a, Constant 0>
		push_reg:14 == 2282 <ldb Register a, Register a>
		push_reg:15 == 2283 <stb Register a, Register b>
		push_reg:19 == 2284 <ldc Register b, Constant 1>
		push_reg:20 == 2285 <add Register a, Register a, Register b>
		push_reg:21 == 2286 <ldc Register b, Constant 0>
		push_reg:22 == 2287 <stb Register b, Register a>
pong.pa2:251 == 2288 <@push_mem Constant 17>
	push_mem:6 == 2288 <.define addr Register b>
	push_mem:7 == 2288 <.define value Register b>
	push_mem:9 == 2288 <@ldc Register b, Constant 17>
		ldc:1 == 2288 <.define writeReg Register b>
		ldc:2 == 2288 <.define const Constant 17>
		ldc:4 == 2288 <ldc Register a, Constant 0>
		ldc:5 == 2289 <ldc Register b, Constant 12>
		ldc:6 == 2290 <shl Register a, Register a, Register b>
		ldc:7 == 2291 <ldc Register b, Constant 17>
		ldc:8 == 2292 <or Register b, Register a, Register b>
	push_mem:10 == 2293 <ldb Register b, Register b>
	push_mem:12 == 2294 <@push_reg Register b>
		push_reg:10 == 2294 <.define registerToPush Register b>
		push_reg:13 == 2294 <ldc Register a, Constant 0>
		push_reg:14 == 2295 <ldb Register a, Register a>
		push_reg:15 == 2296 <stb Register a, Register b>
		push_reg:19 == 2297 <ldc Register b, Constant 1>
		push_reg:20 == 2298 <add Register a, Register a, Register b>
		push_reg:21 == 2299 <ldc Register b, Constant 0>
		push_reg:22 == 2300 <stb Register b, Register a>
pong.pa2:252 == 2301 <@push_const Constant 9>
	push_const:6 == 2301 <.define constantToPush Constant 9>
	push_const:12 == 2301 <@ldc Register b, Constant 9>
		ldc:1 == 2301 <.define writeReg Register b>
		ldc:2 == 2301 <.define const Constant 9>
		ldc:4 == 2301 <ldc Register a, Constant 0>
		ldc:5 == 2302 <ldc Register b, Constant 12>
		ldc:6 == 2303 <shl Register a, Register a, Register b>
		ldc:7 == 2304 <ldc Register b, Constant 9>
		ldc:8 == 2305 <or Register b, Register a, Register b>
	push_const:14 == 2306 <@push_reg Register b>
		push_reg:10 == 2306 <.define registerToPush Register b>
		push_reg:13 == 2306 <ldc Register a, Constant 0>
		push_reg:14 == 2307 <ldb Register a, Register a>
		push_reg:15 == 2308 <stb Register a, Register b>
		push_reg:19 == 2309 <ldc Register b, Constant 1>
		push_reg:20 == 2310 <add Register a, Register a, Register b>
		push_reg:21 == 2311 <ldc Register b, Constant 0>
		push_reg:22 == 2312 <stb Register b, Register a>
pong.pa2:253 == 2313 <@call Constant 2929, Constant 3>
	call:11 == 2313 <.define functionLabel Constant 2929>
	call:12 == 2313 <.define argcount Constant 3>
	call:15 == 2313 <@push_mem Constant 2>
		push_mem:6 == 2313 <.define addr Register b>
		push_mem:7 == 2313 <.define value Register b>
		push_mem:9 == 2313 <@ldc Register b, Constant 2>
			ldc:1 == 2313 <.define writeReg Register b>
			ldc:2 == 2313 <.define const Constant 2>
			ldc:4 == 2313 <ldc Register a, Constant 0>
			ldc:5 == 2314 <ldc Register b, Constant 12>
			ldc:6 == 2315 <shl Register a, Register a, Register b>
			ldc:7 == 2316 <ldc Register b, Constant 2>
			ldc:8 == 2317 <or Register b, Register a, Register b>
		push_mem:10 == 2318 <ldb Register b, Register b>
		push_mem:12 == 2319 <@push_reg Register b>
			push_reg:10 == 2319 <.define registerToPush Register b>
			push_reg:13 == 2319 <ldc Register a, Constant 0>
			push_reg:14 == 2320 <ldb Register a, Register a>
			push_reg:15 == 2321 <stb Register a, Register b>
			push_reg:19 == 2322 <ldc Register b, Constant 1>
			push_reg:20 == 2323 <add Register a, Register a, Register b>
			push_reg:21 == 2324 <ldc Register b, Constant 0>
			push_reg:22 == 2325 <stb Register b, Register a>
	call:16 == 2326 <@push_mem Constant 3>
		push_mem:6 == 2326 <.define addr Register b>
		push_mem:7 == 2326 <.define value Register b>
		push_mem:9 == 2326 <@ldc Register b, Constant 3>
			ldc:1 == 2326 <.define writeReg Register b>
			ldc:2 == 2326 <.define const Constant 3>
			ldc:4 == 2326 <ldc Register a, Constant 0>
			ldc:5 == 2327 <ldc Register b, Constant 12>
			ldc:6 == 2328 <shl Register a, Register a, Register b>
			ldc:7 == 2329 <ldc Register b, Constant 3>
			ldc:8 == 2330 <or Register b, Register a, Register b>
		push_mem:10 == 2331 <ldb Register b, Register b>
		push_mem:12 == 2332 <@push_reg Register b>
			push_reg:10 == 2332 <.define registerToPush Register b>
			push_reg:13 == 2332 <ldc Register a, Constant 0>
			push_reg:14 == 2333 <ldb Register a, Register a>
			push_reg:15 == 2334 <stb Register a, Register b>
			push_reg:19 == 2335 <ldc Register b, Constant 1>
			push_reg:20 == 2336 <add Register a, Register a, Register b>
			push_reg:21 == 2337 <ldc Register b, Constant 0>
			push_reg:22 == 2338 <stb Register b, Register a>
	call:19 == 2339 <@push_const Constant 2451>
		push_const:6 == 2339 <.define constantToPush Constant 2451>
		push_const:12 == 2339 <@ldc Register b, Constant 2451>
			ldc:1 == 2339 <.define writeReg Register b>
			ldc:2 == 2339 <.define const Constant 2451>
			ldc:4 == 2339 <ldc Register a, Constant 0>
			ldc:5 == 2340 <ldc Register b, Constant 12>
			ldc:6 == 2341 <shl Register a, Register a, Register b>
			ldc:7 == 2342 <ldc Register b, Constant 2451>
			ldc:8 == 2343 <or Register b, Register a, Register b>
		push_const:14 == 2344 <@push_reg Register b>
			push_reg:10 == 2344 <.define registerToPush Register b>
			push_reg:13 == 2344 <ldc Register a, Constant 0>
			push_reg:14 == 2345 <ldb Register a, Register a>
			push_reg:15 == 2346 <stb Register a, Register b>
			push_reg:19 == 2347 <ldc Register b, Constant 1>
			push_reg:20 == 2348 <add Register a, Register a, Register b>
			push_reg:21 == 2349 <ldc Register b, Constant 0>
			push_reg:22 == 2350 <stb Register b, Register a>
	call:24 == 2351 <@push_mem Constant 0>
		push_mem:6 == 2351 <.define addr Register b>
		push_mem:7 == 2351 <.define value Register b>
		push_mem:9 == 2351 <@ldc Register b, Constant 0>
			ldc:1 == 2351 <.define writeReg Register b>
			ldc:2 == 2351 <.define const Constant 0>
			ldc:4 == 2351 <ldc Register a, Constant 0>
			ldc:5 == 2352 <ldc Register b, Constant 12>
			ldc:6 == 2353 <shl Register a, Register a, Register b>
			ldc:7 == 2354 <ldc Register b, Constant 0>
			ldc:8 == 2355 <or Register b, Register a, Register b>
		push_mem:10 == 2356 <ldb Register b, Register b>
		push_mem:12 == 2357 <@push_reg Register b>
			push_reg:10 == 2357 <.define registerToPush Register b>
			push_reg:13 == 2357 <ldc Register a, Constant 0>
			push_reg:14 == 2358 <ldb Register a, Register a>
			push_reg:15 == 2359 <stb Register a, Register b>
			push_reg:19 == 2360 <ldc Register b, Constant 1>
			push_reg:20 == 2361 <add Register a, Register a, Register b>
			push_reg:21 == 2362 <ldc Register b, Constant 0>
			push_reg:22 == 2363 <stb Register b, Register a>
	call:26 == 2364 <@push_const Constant 3>
		push_const:6 == 2364 <.define constantToPush Constant 3>
		push_const:12 == 2364 <@ldc Register b, Constant 3>
			ldc:1 == 2364 <.define writeReg Register b>
			ldc:2 == 2364 <.define const Constant 3>
			ldc:4 == 2364 <ldc Register a, Constant 0>
			ldc:5 == 2365 <ldc Register b, Constant 12>
			ldc:6 == 2366 <shl Register a, Register a, Register b>
			ldc:7 == 2367 <ldc Register b, Constant 3>
			ldc:8 == 2368 <or Register b, Register a, Register b>
		push_const:14 == 2369 <@push_reg Register b>
			push_reg:10 == 2369 <.define registerToPush Register b>
			push_reg:13 == 2369 <ldc Register a, Constant 0>
			push_reg:14 == 2370 <ldb Register a, Register a>
			push_reg:15 == 2371 <stb Register a, Register b>
			push_reg:19 == 2372 <ldc Register b, Constant 1>
			push_reg:20 == 2373 <add Register a, Register a, Register b>
			push_reg:21 == 2374 <ldc Register b, Constant 0>
			push_reg:22 == 2375 <stb Register b, Register a>
	call:27 == 2376 <@push_const Constant 3>
		push_const:6 == 2376 <.define constantToPush Constant 3>
		push_const:12 == 2376 <@ldc Register b, Constant 3>
			ldc:1 == 2376 <.define writeReg Register b>
			ldc:2 == 2376 <.define const Constant 3>
			ldc:4 == 2376 <ldc Register a, Constant 0>
			ldc:5 == 2377 <ldc Register b, Constant 12>
			ldc:6 == 2378 <shl Register a, Register a, Register b>
			ldc:7 == 2379 <ldc Register b, Constant 3>
			ldc:8 == 2380 <or Register b, Register a, Register b>
		push_const:14 == 2381 <@push_reg Register b>
			push_reg:10 == 2381 <.define registerToPush Register b>
			push_reg:13 == 2381 <ldc Register a, Constant 0>
			push_reg:14 == 2382 <ldb Register a, Register a>
			push_reg:15 == 2383 <stb Register a, Register b>
			push_reg:19 == 2384 <ldc Register b, Constant 1>
			push_reg:20 == 2385 <add Register a, Register a, Register b>
			push_reg:21 == 2386 <ldc Register b, Constant 0>
			push_reg:22 == 2387 <stb Register b, Register a>
	call:28 == 2388 <@add >
		add:3 == 2388 <.define lhs Register c>
		add:4 == 2388 <.define rhs Register d>
		add:5 == 2388 <.define result Register d>
		add:7 == 2388 <@pop_reg Register d>
			pop_reg:10 == 2388 <.define registerToLoad Register d>
			pop_reg:13 == 2388 <ldc Register a, Constant 0>
			pop_reg:14 == 2389 <ldb Register a, Register a>
			pop_reg:15 == 2390 <ldc Register b, Constant 1>
			pop_reg:16 == 2391 <sub Register a, Register a, Register b>
			pop_reg:17 == 2392 <ldc Register b, Constant 0>
			pop_reg:18 == 2393 <stb Register b, Register a>
			pop_reg:22 == 2394 <ldb Register a, Register d>
		add:8 == 2395 <@pop_reg Register c>
			pop_reg:10 == 2395 <.define registerToLoad Register c>
			pop_reg:13 == 2395 <ldc Register a, Constant 0>
			pop_reg:14 == 2396 <ldb Register a, Register a>
			pop_reg:15 == 2397 <ldc Register b, Constant 1>
			pop_reg:16 == 2398 <sub Register a, Register a, Register b>
			pop_reg:17 == 2399 <ldc Register b, Constant 0>
			pop_reg:18 == 2400 <stb Register b, Register a>
			pop_reg:22 == 2401 <ldb Register a, Register c>
		add:9 == 2402 <add Register d, Register c, Register d>
		add:10 == 2403 <@push_reg Register d>
			push_reg:10 == 2403 <.define registerToPush Register d>
			push_reg:13 == 2403 <ldc Register a, Constant 0>
			push_reg:14 == 2404 <ldb Register a, Register a>
			push_reg:15 == 2405 <stb Register a, Register d>
			push_reg:19 == 2406 <ldc Register b, Constant 1>
			push_reg:20 == 2407 <add Register a, Register a, Register b>
			push_reg:21 == 2408 <ldc Register b, Constant 0>
			push_reg:22 == 2409 <stb Register b, Register a>
	call:29 == 2410 <@sub >
		sub:3 == 2410 <.define lhs Register c>
		sub:4 == 2410 <.define rhs Register d>
		sub:5 == 2410 <.define result Register d>
		sub:7 == 2410 <@pop_reg Register d>
			pop_reg:10 == 2410 <.define registerToLoad Register d>
			pop_reg:13 == 2410 <ldc Register a, Constant 0>
			pop_reg:14 == 2411 <ldb Register a, Register a>
			pop_reg:15 == 2412 <ldc Register b, Constant 1>
			pop_reg:16 == 2413 <sub Register a, Register a, Register b>
			pop_reg:17 == 2414 <ldc Register b, Constant 0>
			pop_reg:18 == 2415 <stb Register b, Register a>
			pop_reg:22 == 2416 <ldb Register a, Register d>
		sub:8 == 2417 <@pop_reg Register c>
			pop_reg:10 == 2417 <.define registerToLoad Register c>
			pop_reg:13 == 2417 <ldc Register a, Constant 0>
			pop_reg:14 == 2418 <ldb Register a, Register a>
			pop_reg:15 == 2419 <ldc Register b, Constant 1>
			pop_reg:16 == 2420 <sub Register a, Register a, Register b>
			pop_reg:17 == 2421 <ldc Register b, Constant 0>
			pop_reg:18 == 2422 <stb Register b, Register a>
			pop_reg:22 == 2423 <ldb Register a, Register c>
		sub:9 == 2424 <sub Register d, Register c, Register d>
		sub:10 == 2425 <@push_reg Register d>
			push_reg:10 == 2425 <.define registerToPush Register d>
			push_reg:13 == 2425 <ldc Register a, Constant 0>
			push_reg:14 == 2426 <ldb Register a, Register a>
			push_reg:15 == 2427 <stb Register a, Register d>
			push_reg:19 == 2428 <ldc Register b, Constant 1>
			push_reg:20 == 2429 <add Register a, Register a, Register b>
			push_reg:21 == 2430 <ldc Register b, Constant 0>
			push_reg:22 == 2431 <stb Register b, Register a>
	call:30 == 2432 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 2432 <.define val Register c>
		pop_mem_v:7 == 2432 <.define addr Constant 2>
		pop_mem_v:9 == 2432 <@pop_reg Register c>
			pop_reg:10 == 2432 <.define registerToLoad Register c>
			pop_reg:13 == 2432 <ldc Register a, Constant 0>
			pop_reg:14 == 2433 <ldb Register a, Register a>
			pop_reg:15 == 2434 <ldc Register b, Constant 1>
			pop_reg:16 == 2435 <sub Register a, Register a, Register b>
			pop_reg:17 == 2436 <ldc Register b, Constant 0>
			pop_reg:18 == 2437 <stb Register b, Register a>
			pop_reg:22 == 2438 <ldb Register a, Register c>
		pop_mem_v:11 == 2439 <@ldc Register b, Constant 2>
			ldc:1 == 2439 <.define writeReg Register b>
			ldc:2 == 2439 <.define const Constant 2>
			ldc:4 == 2439 <ldc Register a, Constant 0>
			ldc:5 == 2440 <ldc Register b, Constant 12>
			ldc:6 == 2441 <shl Register a, Register a, Register b>
			ldc:7 == 2442 <ldc Register b, Constant 2>
			ldc:8 == 2443 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2444 <stb Register b, Register c>
	call:32 == 2445 <@ldc Register a, Constant 2929>
		ldc:1 == 2445 <.define writeReg Register a>
		ldc:2 == 2445 <.define const Constant 2929>
		ldc:4 == 2445 <ldc Register a, Constant 0>
		ldc:5 == 2446 <ldc Register b, Constant 12>
		ldc:6 == 2447 <shl Register a, Register a, Register b>
		ldc:7 == 2448 <ldc Register b, Constant 2929>
		ldc:8 == 2449 <or Register a, Register a, Register b>
	call:33 == 2450 <jmp Register a>
	call:38 == 2451 <ldc Register d, Constant 2>
	call:41 == 2452 <ldb Register d, Register d>
	call:43 == 2453 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 2453 <.define val Register c>
		pop_mem_v:7 == 2453 <.define addr Constant 3>
		pop_mem_v:9 == 2453 <@pop_reg Register c>
			pop_reg:10 == 2453 <.define registerToLoad Register c>
			pop_reg:13 == 2453 <ldc Register a, Constant 0>
			pop_reg:14 == 2454 <ldb Register a, Register a>
			pop_reg:15 == 2455 <ldc Register b, Constant 1>
			pop_reg:16 == 2456 <sub Register a, Register a, Register b>
			pop_reg:17 == 2457 <ldc Register b, Constant 0>
			pop_reg:18 == 2458 <stb Register b, Register a>
			pop_reg:22 == 2459 <ldb Register a, Register c>
		pop_mem_v:11 == 2460 <@ldc Register b, Constant 3>
			ldc:1 == 2460 <.define writeReg Register b>
			ldc:2 == 2460 <.define const Constant 3>
			ldc:4 == 2460 <ldc Register a, Constant 0>
			ldc:5 == 2461 <ldc Register b, Constant 12>
			ldc:6 == 2462 <shl Register a, Register a, Register b>
			ldc:7 == 2463 <ldc Register b, Constant 3>
			ldc:8 == 2464 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2465 <stb Register b, Register c>
	call:44 == 2466 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 2466 <.define val Register c>
		pop_mem_v:7 == 2466 <.define addr Constant 2>
		pop_mem_v:9 == 2466 <@pop_reg Register c>
			pop_reg:10 == 2466 <.define registerToLoad Register c>
			pop_reg:13 == 2466 <ldc Register a, Constant 0>
			pop_reg:14 == 2467 <ldb Register a, Register a>
			pop_reg:15 == 2468 <ldc Register b, Constant 1>
			pop_reg:16 == 2469 <sub Register a, Register a, Register b>
			pop_reg:17 == 2470 <ldc Register b, Constant 0>
			pop_reg:18 == 2471 <stb Register b, Register a>
			pop_reg:22 == 2472 <ldb Register a, Register c>
		pop_mem_v:11 == 2473 <@ldc Register b, Constant 2>
			ldc:1 == 2473 <.define writeReg Register b>
			ldc:2 == 2473 <.define const Constant 2>
			ldc:4 == 2473 <ldc Register a, Constant 0>
			ldc:5 == 2474 <ldc Register b, Constant 12>
			ldc:6 == 2475 <shl Register a, Register a, Register b>
			ldc:7 == 2476 <ldc Register b, Constant 2>
			ldc:8 == 2477 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2478 <stb Register b, Register c>
	call:46 == 2479 <ldc Register c, Constant 0>
	call:47 == 2480 <stb Register c, Register d>
pong.pa2:255 == 2481 <@push_const Constant 8>
	push_const:6 == 2481 <.define constantToPush Constant 8>
	push_const:12 == 2481 <@ldc Register b, Constant 8>
		ldc:1 == 2481 <.define writeReg Register b>
		ldc:2 == 2481 <.define const Constant 8>
		ldc:4 == 2481 <ldc Register a, Constant 0>
		ldc:5 == 2482 <ldc Register b, Constant 12>
		ldc:6 == 2483 <shl Register a, Register a, Register b>
		ldc:7 == 2484 <ldc Register b, Constant 8>
		ldc:8 == 2485 <or Register b, Register a, Register b>
	push_const:14 == 2486 <@push_reg Register b>
		push_reg:10 == 2486 <.define registerToPush Register b>
		push_reg:13 == 2486 <ldc Register a, Constant 0>
		push_reg:14 == 2487 <ldb Register a, Register a>
		push_reg:15 == 2488 <stb Register a, Register b>
		push_reg:19 == 2489 <ldc Register b, Constant 1>
		push_reg:20 == 2490 <add Register a, Register a, Register b>
		push_reg:21 == 2491 <ldc Register b, Constant 0>
		push_reg:22 == 2492 <stb Register b, Register a>
pong.pa2:256 == 2493 <@push_mem Constant 16>
	push_mem:6 == 2493 <.define addr Register b>
	push_mem:7 == 2493 <.define value Register b>
	push_mem:9 == 2493 <@ldc Register b, Constant 16>
		ldc:1 == 2493 <.define writeReg Register b>
		ldc:2 == 2493 <.define const Constant 16>
		ldc:4 == 2493 <ldc Register a, Constant 0>
		ldc:5 == 2494 <ldc Register b, Constant 12>
		ldc:6 == 2495 <shl Register a, Register a, Register b>
		ldc:7 == 2496 <ldc Register b, Constant 16>
		ldc:8 == 2497 <or Register b, Register a, Register b>
	push_mem:10 == 2498 <ldb Register b, Register b>
	push_mem:12 == 2499 <@push_reg Register b>
		push_reg:10 == 2499 <.define registerToPush Register b>
		push_reg:13 == 2499 <ldc Register a, Constant 0>
		push_reg:14 == 2500 <ldb Register a, Register a>
		push_reg:15 == 2501 <stb Register a, Register b>
		push_reg:19 == 2502 <ldc Register b, Constant 1>
		push_reg:20 == 2503 <add Register a, Register a, Register b>
		push_reg:21 == 2504 <ldc Register b, Constant 0>
		push_reg:22 == 2505 <stb Register b, Register a>
pong.pa2:257 == 2506 <@push_const Constant 8>
	push_const:6 == 2506 <.define constantToPush Constant 8>
	push_const:12 == 2506 <@ldc Register b, Constant 8>
		ldc:1 == 2506 <.define writeReg Register b>
		ldc:2 == 2506 <.define const Constant 8>
		ldc:4 == 2506 <ldc Register a, Constant 0>
		ldc:5 == 2507 <ldc Register b, Constant 12>
		ldc:6 == 2508 <shl Register a, Register a, Register b>
		ldc:7 == 2509 <ldc Register b, Constant 8>
		ldc:8 == 2510 <or Register b, Register a, Register b>
	push_const:14 == 2511 <@push_reg Register b>
		push_reg:10 == 2511 <.define registerToPush Register b>
		push_reg:13 == 2511 <ldc Register a, Constant 0>
		push_reg:14 == 2512 <ldb Register a, Register a>
		push_reg:15 == 2513 <stb Register a, Register b>
		push_reg:19 == 2514 <ldc Register b, Constant 1>
		push_reg:20 == 2515 <add Register a, Register a, Register b>
		push_reg:21 == 2516 <ldc Register b, Constant 0>
		push_reg:22 == 2517 <stb Register b, Register a>
pong.pa2:258 == 2518 <@call Constant 2929, Constant 3>
	call:11 == 2518 <.define functionLabel Constant 2929>
	call:12 == 2518 <.define argcount Constant 3>
	call:15 == 2518 <@push_mem Constant 2>
		push_mem:6 == 2518 <.define addr Register b>
		push_mem:7 == 2518 <.define value Register b>
		push_mem:9 == 2518 <@ldc Register b, Constant 2>
			ldc:1 == 2518 <.define writeReg Register b>
			ldc:2 == 2518 <.define const Constant 2>
			ldc:4 == 2518 <ldc Register a, Constant 0>
			ldc:5 == 2519 <ldc Register b, Constant 12>
			ldc:6 == 2520 <shl Register a, Register a, Register b>
			ldc:7 == 2521 <ldc Register b, Constant 2>
			ldc:8 == 2522 <or Register b, Register a, Register b>
		push_mem:10 == 2523 <ldb Register b, Register b>
		push_mem:12 == 2524 <@push_reg Register b>
			push_reg:10 == 2524 <.define registerToPush Register b>
			push_reg:13 == 2524 <ldc Register a, Constant 0>
			push_reg:14 == 2525 <ldb Register a, Register a>
			push_reg:15 == 2526 <stb Register a, Register b>
			push_reg:19 == 2527 <ldc Register b, Constant 1>
			push_reg:20 == 2528 <add Register a, Register a, Register b>
			push_reg:21 == 2529 <ldc Register b, Constant 0>
			push_reg:22 == 2530 <stb Register b, Register a>
	call:16 == 2531 <@push_mem Constant 3>
		push_mem:6 == 2531 <.define addr Register b>
		push_mem:7 == 2531 <.define value Register b>
		push_mem:9 == 2531 <@ldc Register b, Constant 3>
			ldc:1 == 2531 <.define writeReg Register b>
			ldc:2 == 2531 <.define const Constant 3>
			ldc:4 == 2531 <ldc Register a, Constant 0>
			ldc:5 == 2532 <ldc Register b, Constant 12>
			ldc:6 == 2533 <shl Register a, Register a, Register b>
			ldc:7 == 2534 <ldc Register b, Constant 3>
			ldc:8 == 2535 <or Register b, Register a, Register b>
		push_mem:10 == 2536 <ldb Register b, Register b>
		push_mem:12 == 2537 <@push_reg Register b>
			push_reg:10 == 2537 <.define registerToPush Register b>
			push_reg:13 == 2537 <ldc Register a, Constant 0>
			push_reg:14 == 2538 <ldb Register a, Register a>
			push_reg:15 == 2539 <stb Register a, Register b>
			push_reg:19 == 2540 <ldc Register b, Constant 1>
			push_reg:20 == 2541 <add Register a, Register a, Register b>
			push_reg:21 == 2542 <ldc Register b, Constant 0>
			push_reg:22 == 2543 <stb Register b, Register a>
	call:19 == 2544 <@push_const Constant 2656>
		push_const:6 == 2544 <.define constantToPush Constant 2656>
		push_const:12 == 2544 <@ldc Register b, Constant 2656>
			ldc:1 == 2544 <.define writeReg Register b>
			ldc:2 == 2544 <.define const Constant 2656>
			ldc:4 == 2544 <ldc Register a, Constant 0>
			ldc:5 == 2545 <ldc Register b, Constant 12>
			ldc:6 == 2546 <shl Register a, Register a, Register b>
			ldc:7 == 2547 <ldc Register b, Constant 2656>
			ldc:8 == 2548 <or Register b, Register a, Register b>
		push_const:14 == 2549 <@push_reg Register b>
			push_reg:10 == 2549 <.define registerToPush Register b>
			push_reg:13 == 2549 <ldc Register a, Constant 0>
			push_reg:14 == 2550 <ldb Register a, Register a>
			push_reg:15 == 2551 <stb Register a, Register b>
			push_reg:19 == 2552 <ldc Register b, Constant 1>
			push_reg:20 == 2553 <add Register a, Register a, Register b>
			push_reg:21 == 2554 <ldc Register b, Constant 0>
			push_reg:22 == 2555 <stb Register b, Register a>
	call:24 == 2556 <@push_mem Constant 0>
		push_mem:6 == 2556 <.define addr Register b>
		push_mem:7 == 2556 <.define value Register b>
		push_mem:9 == 2556 <@ldc Register b, Constant 0>
			ldc:1 == 2556 <.define writeReg Register b>
			ldc:2 == 2556 <.define const Constant 0>
			ldc:4 == 2556 <ldc Register a, Constant 0>
			ldc:5 == 2557 <ldc Register b, Constant 12>
			ldc:6 == 2558 <shl Register a, Register a, Register b>
			ldc:7 == 2559 <ldc Register b, Constant 0>
			ldc:8 == 2560 <or Register b, Register a, Register b>
		push_mem:10 == 2561 <ldb Register b, Register b>
		push_mem:12 == 2562 <@push_reg Register b>
			push_reg:10 == 2562 <.define registerToPush Register b>
			push_reg:13 == 2562 <ldc Register a, Constant 0>
			push_reg:14 == 2563 <ldb Register a, Register a>
			push_reg:15 == 2564 <stb Register a, Register b>
			push_reg:19 == 2565 <ldc Register b, Constant 1>
			push_reg:20 == 2566 <add Register a, Register a, Register b>
			push_reg:21 == 2567 <ldc Register b, Constant 0>
			push_reg:22 == 2568 <stb Register b, Register a>
	call:26 == 2569 <@push_const Constant 3>
		push_const:6 == 2569 <.define constantToPush Constant 3>
		push_const:12 == 2569 <@ldc Register b, Constant 3>
			ldc:1 == 2569 <.define writeReg Register b>
			ldc:2 == 2569 <.define const Constant 3>
			ldc:4 == 2569 <ldc Register a, Constant 0>
			ldc:5 == 2570 <ldc Register b, Constant 12>
			ldc:6 == 2571 <shl Register a, Register a, Register b>
			ldc:7 == 2572 <ldc Register b, Constant 3>
			ldc:8 == 2573 <or Register b, Register a, Register b>
		push_const:14 == 2574 <@push_reg Register b>
			push_reg:10 == 2574 <.define registerToPush Register b>
			push_reg:13 == 2574 <ldc Register a, Constant 0>
			push_reg:14 == 2575 <ldb Register a, Register a>
			push_reg:15 == 2576 <stb Register a, Register b>
			push_reg:19 == 2577 <ldc Register b, Constant 1>
			push_reg:20 == 2578 <add Register a, Register a, Register b>
			push_reg:21 == 2579 <ldc Register b, Constant 0>
			push_reg:22 == 2580 <stb Register b, Register a>
	call:27 == 2581 <@push_const Constant 3>
		push_const:6 == 2581 <.define constantToPush Constant 3>
		push_const:12 == 2581 <@ldc Register b, Constant 3>
			ldc:1 == 2581 <.define writeReg Register b>
			ldc:2 == 2581 <.define const Constant 3>
			ldc:4 == 2581 <ldc Register a, Constant 0>
			ldc:5 == 2582 <ldc Register b, Constant 12>
			ldc:6 == 2583 <shl Register a, Register a, Register b>
			ldc:7 == 2584 <ldc Register b, Constant 3>
			ldc:8 == 2585 <or Register b, Register a, Register b>
		push_const:14 == 2586 <@push_reg Register b>
			push_reg:10 == 2586 <.define registerToPush Register b>
			push_reg:13 == 2586 <ldc Register a, Constant 0>
			push_reg:14 == 2587 <ldb Register a, Register a>
			push_reg:15 == 2588 <stb Register a, Register b>
			push_reg:19 == 2589 <ldc Register b, Constant 1>
			push_reg:20 == 2590 <add Register a, Register a, Register b>
			push_reg:21 == 2591 <ldc Register b, Constant 0>
			push_reg:22 == 2592 <stb Register b, Register a>
	call:28 == 2593 <@add >
		add:3 == 2593 <.define lhs Register c>
		add:4 == 2593 <.define rhs Register d>
		add:5 == 2593 <.define result Register d>
		add:7 == 2593 <@pop_reg Register d>
			pop_reg:10 == 2593 <.define registerToLoad Register d>
			pop_reg:13 == 2593 <ldc Register a, Constant 0>
			pop_reg:14 == 2594 <ldb Register a, Register a>
			pop_reg:15 == 2595 <ldc Register b, Constant 1>
			pop_reg:16 == 2596 <sub Register a, Register a, Register b>
			pop_reg:17 == 2597 <ldc Register b, Constant 0>
			pop_reg:18 == 2598 <stb Register b, Register a>
			pop_reg:22 == 2599 <ldb Register a, Register d>
		add:8 == 2600 <@pop_reg Register c>
			pop_reg:10 == 2600 <.define registerToLoad Register c>
			pop_reg:13 == 2600 <ldc Register a, Constant 0>
			pop_reg:14 == 2601 <ldb Register a, Register a>
			pop_reg:15 == 2602 <ldc Register b, Constant 1>
			pop_reg:16 == 2603 <sub Register a, Register a, Register b>
			pop_reg:17 == 2604 <ldc Register b, Constant 0>
			pop_reg:18 == 2605 <stb Register b, Register a>
			pop_reg:22 == 2606 <ldb Register a, Register c>
		add:9 == 2607 <add Register d, Register c, Register d>
		add:10 == 2608 <@push_reg Register d>
			push_reg:10 == 2608 <.define registerToPush Register d>
			push_reg:13 == 2608 <ldc Register a, Constant 0>
			push_reg:14 == 2609 <ldb Register a, Register a>
			push_reg:15 == 2610 <stb Register a, Register d>
			push_reg:19 == 2611 <ldc Register b, Constant 1>
			push_reg:20 == 2612 <add Register a, Register a, Register b>
			push_reg:21 == 2613 <ldc Register b, Constant 0>
			push_reg:22 == 2614 <stb Register b, Register a>
	call:29 == 2615 <@sub >
		sub:3 == 2615 <.define lhs Register c>
		sub:4 == 2615 <.define rhs Register d>
		sub:5 == 2615 <.define result Register d>
		sub:7 == 2615 <@pop_reg Register d>
			pop_reg:10 == 2615 <.define registerToLoad Register d>
			pop_reg:13 == 2615 <ldc Register a, Constant 0>
			pop_reg:14 == 2616 <ldb Register a, Register a>
			pop_reg:15 == 2617 <ldc Register b, Constant 1>
			pop_reg:16 == 2618 <sub Register a, Register a, Register b>
			pop_reg:17 == 2619 <ldc Register b, Constant 0>
			pop_reg:18 == 2620 <stb Register b, Register a>
			pop_reg:22 == 2621 <ldb Register a, Register d>
		sub:8 == 2622 <@pop_reg Register c>
			pop_reg:10 == 2622 <.define registerToLoad Register c>
			pop_reg:13 == 2622 <ldc Register a, Constant 0>
			pop_reg:14 == 2623 <ldb Register a, Register a>
			pop_reg:15 == 2624 <ldc Register b, Constant 1>
			pop_reg:16 == 2625 <sub Register a, Register a, Register b>
			pop_reg:17 == 2626 <ldc Register b, Constant 0>
			pop_reg:18 == 2627 <stb Register b, Register a>
			pop_reg:22 == 2628 <ldb Register a, Register c>
		sub:9 == 2629 <sub Register d, Register c, Register d>
		sub:10 == 2630 <@push_reg Register d>
			push_reg:10 == 2630 <.define registerToPush Register d>
			push_reg:13 == 2630 <ldc Register a, Constant 0>
			push_reg:14 == 2631 <ldb Register a, Register a>
			push_reg:15 == 2632 <stb Register a, Register d>
			push_reg:19 == 2633 <ldc Register b, Constant 1>
			push_reg:20 == 2634 <add Register a, Register a, Register b>
			push_reg:21 == 2635 <ldc Register b, Constant 0>
			push_reg:22 == 2636 <stb Register b, Register a>
	call:30 == 2637 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 2637 <.define val Register c>
		pop_mem_v:7 == 2637 <.define addr Constant 2>
		pop_mem_v:9 == 2637 <@pop_reg Register c>
			pop_reg:10 == 2637 <.define registerToLoad Register c>
			pop_reg:13 == 2637 <ldc Register a, Constant 0>
			pop_reg:14 == 2638 <ldb Register a, Register a>
			pop_reg:15 == 2639 <ldc Register b, Constant 1>
			pop_reg:16 == 2640 <sub Register a, Register a, Register b>
			pop_reg:17 == 2641 <ldc Register b, Constant 0>
			pop_reg:18 == 2642 <stb Register b, Register a>
			pop_reg:22 == 2643 <ldb Register a, Register c>
		pop_mem_v:11 == 2644 <@ldc Register b, Constant 2>
			ldc:1 == 2644 <.define writeReg Register b>
			ldc:2 == 2644 <.define const Constant 2>
			ldc:4 == 2644 <ldc Register a, Constant 0>
			ldc:5 == 2645 <ldc Register b, Constant 12>
			ldc:6 == 2646 <shl Register a, Register a, Register b>
			ldc:7 == 2647 <ldc Register b, Constant 2>
			ldc:8 == 2648 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2649 <stb Register b, Register c>
	call:32 == 2650 <@ldc Register a, Constant 2929>
		ldc:1 == 2650 <.define writeReg Register a>
		ldc:2 == 2650 <.define const Constant 2929>
		ldc:4 == 2650 <ldc Register a, Constant 0>
		ldc:5 == 2651 <ldc Register b, Constant 12>
		ldc:6 == 2652 <shl Register a, Register a, Register b>
		ldc:7 == 2653 <ldc Register b, Constant 2929>
		ldc:8 == 2654 <or Register a, Register a, Register b>
	call:33 == 2655 <jmp Register a>
	call:38 == 2656 <ldc Register d, Constant 2>
	call:41 == 2657 <ldb Register d, Register d>
	call:43 == 2658 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 2658 <.define val Register c>
		pop_mem_v:7 == 2658 <.define addr Constant 3>
		pop_mem_v:9 == 2658 <@pop_reg Register c>
			pop_reg:10 == 2658 <.define registerToLoad Register c>
			pop_reg:13 == 2658 <ldc Register a, Constant 0>
			pop_reg:14 == 2659 <ldb Register a, Register a>
			pop_reg:15 == 2660 <ldc Register b, Constant 1>
			pop_reg:16 == 2661 <sub Register a, Register a, Register b>
			pop_reg:17 == 2662 <ldc Register b, Constant 0>
			pop_reg:18 == 2663 <stb Register b, Register a>
			pop_reg:22 == 2664 <ldb Register a, Register c>
		pop_mem_v:11 == 2665 <@ldc Register b, Constant 3>
			ldc:1 == 2665 <.define writeReg Register b>
			ldc:2 == 2665 <.define const Constant 3>
			ldc:4 == 2665 <ldc Register a, Constant 0>
			ldc:5 == 2666 <ldc Register b, Constant 12>
			ldc:6 == 2667 <shl Register a, Register a, Register b>
			ldc:7 == 2668 <ldc Register b, Constant 3>
			ldc:8 == 2669 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2670 <stb Register b, Register c>
	call:44 == 2671 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 2671 <.define val Register c>
		pop_mem_v:7 == 2671 <.define addr Constant 2>
		pop_mem_v:9 == 2671 <@pop_reg Register c>
			pop_reg:10 == 2671 <.define registerToLoad Register c>
			pop_reg:13 == 2671 <ldc Register a, Constant 0>
			pop_reg:14 == 2672 <ldb Register a, Register a>
			pop_reg:15 == 2673 <ldc Register b, Constant 1>
			pop_reg:16 == 2674 <sub Register a, Register a, Register b>
			pop_reg:17 == 2675 <ldc Register b, Constant 0>
			pop_reg:18 == 2676 <stb Register b, Register a>
			pop_reg:22 == 2677 <ldb Register a, Register c>
		pop_mem_v:11 == 2678 <@ldc Register b, Constant 2>
			ldc:1 == 2678 <.define writeReg Register b>
			ldc:2 == 2678 <.define const Constant 2>
			ldc:4 == 2678 <ldc Register a, Constant 0>
			ldc:5 == 2679 <ldc Register b, Constant 12>
			ldc:6 == 2680 <shl Register a, Register a, Register b>
			ldc:7 == 2681 <ldc Register b, Constant 2>
			ldc:8 == 2682 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2683 <stb Register b, Register c>
	call:46 == 2684 <ldc Register c, Constant 0>
	call:47 == 2685 <stb Register c, Register d>
pong.pa2:266 == 2686 <@ldc Register a, Constant 24577>
	ldc:1 == 2686 <.define writeReg Register a>
	ldc:2 == 2686 <.define const Constant 24577>
	ldc:4 == 2686 <ldc Register a, Constant 6>
	ldc:5 == 2687 <ldc Register b, Constant 12>
	ldc:6 == 2688 <shl Register a, Register a, Register b>
	ldc:7 == 2689 <ldc Register b, Constant 1>
	ldc:8 == 2690 <or Register a, Register a, Register b>
pong.pa2:267 == 2691 <ldb Register a, Register b>
pong.pa2:268 == 2692 <not Register b, Register b>
pong.pa2:270 == 2693 <ldc Register c, Constant 1>
pong.pa2:271 == 2694 <and Register b, Register b, Register c>
pong.pa2:272 == 2695 <stb Register a, Register b>
pong.pa2:275 == 2696 <@return >
	return:2 == 2696 <ldc Register b, Constant 3>
	return:3 == 2697 <ldb Register b, Register b>
	return:4 == 2698 <ldc Register a, Constant 0>
	return:5 == 2699 <stb Register a, Register b>
	return:7 == 2700 <@pop_reg Register d>
		pop_reg:10 == 2700 <.define registerToLoad Register d>
		pop_reg:13 == 2700 <ldc Register a, Constant 0>
		pop_reg:14 == 2701 <ldb Register a, Register a>
		pop_reg:15 == 2702 <ldc Register b, Constant 1>
		pop_reg:16 == 2703 <sub Register a, Register a, Register b>
		pop_reg:17 == 2704 <ldc Register b, Constant 0>
		pop_reg:18 == 2705 <stb Register b, Register a>
		pop_reg:22 == 2706 <ldb Register a, Register d>
	return:9 == 2707 <jump Register d>
pong.pa2:281 == 2708 <@function Constant 0>
	function:19 == 2708 <.define loccount Constant 0>
	function:22 == 2708 <ldc Register a, Constant 0>
	function:23 == 2709 <ldb Register a, Register a>
	function:24 == 2710 <ldc Register b, Constant 3>
	function:25 == 2711 <stb Register b, Register a>
	function:28 == 2712 <ldc Register a, Constant 0>
	function:29 == 2713 <ldb Register a, Register b>
	function:30 == 2714 <ldc Register c, Constant 0>
	function:31 == 2715 <add Register b, Register b, Register c>
	function:32 == 2716 <stb Register a, Register b>
pong.pa2:291 == 2717 <@call_value Constant 4046, Constant 0>
	call_value:1 == 2717 <@call Constant 4046, Constant 0>
		call:11 == 2717 <.define functionLabel Constant 4046>
		call:12 == 2717 <.define argcount Constant 0>
		call:15 == 2717 <@push_mem Constant 2>
			push_mem:6 == 2717 <.define addr Register b>
			push_mem:7 == 2717 <.define value Register b>
			push_mem:9 == 2717 <@ldc Register b, Constant 2>
				ldc:1 == 2717 <.define writeReg Register b>
				ldc:2 == 2717 <.define const Constant 2>
				ldc:4 == 2717 <ldc Register a, Constant 0>
				ldc:5 == 2718 <ldc Register b, Constant 12>
				ldc:6 == 2719 <shl Register a, Register a, Register b>
				ldc:7 == 2720 <ldc Register b, Constant 2>
				ldc:8 == 2721 <or Register b, Register a, Register b>
			push_mem:10 == 2722 <ldb Register b, Register b>
			push_mem:12 == 2723 <@push_reg Register b>
				push_reg:10 == 2723 <.define registerToPush Register b>
				push_reg:13 == 2723 <ldc Register a, Constant 0>
				push_reg:14 == 2724 <ldb Register a, Register a>
				push_reg:15 == 2725 <stb Register a, Register b>
				push_reg:19 == 2726 <ldc Register b, Constant 1>
				push_reg:20 == 2727 <add Register a, Register a, Register b>
				push_reg:21 == 2728 <ldc Register b, Constant 0>
				push_reg:22 == 2729 <stb Register b, Register a>
		call:16 == 2730 <@push_mem Constant 3>
			push_mem:6 == 2730 <.define addr Register b>
			push_mem:7 == 2730 <.define value Register b>
			push_mem:9 == 2730 <@ldc Register b, Constant 3>
				ldc:1 == 2730 <.define writeReg Register b>
				ldc:2 == 2730 <.define const Constant 3>
				ldc:4 == 2730 <ldc Register a, Constant 0>
				ldc:5 == 2731 <ldc Register b, Constant 12>
				ldc:6 == 2732 <shl Register a, Register a, Register b>
				ldc:7 == 2733 <ldc Register b, Constant 3>
				ldc:8 == 2734 <or Register b, Register a, Register b>
			push_mem:10 == 2735 <ldb Register b, Register b>
			push_mem:12 == 2736 <@push_reg Register b>
				push_reg:10 == 2736 <.define registerToPush Register b>
				push_reg:13 == 2736 <ldc Register a, Constant 0>
				push_reg:14 == 2737 <ldb Register a, Register a>
				push_reg:15 == 2738 <stb Register a, Register b>
				push_reg:19 == 2739 <ldc Register b, Constant 1>
				push_reg:20 == 2740 <add Register a, Register a, Register b>
				push_reg:21 == 2741 <ldc Register b, Constant 0>
				push_reg:22 == 2742 <stb Register b, Register a>
		call:19 == 2743 <@push_const Constant 2855>
			push_const:6 == 2743 <.define constantToPush Constant 2855>
			push_const:12 == 2743 <@ldc Register b, Constant 2855>
				ldc:1 == 2743 <.define writeReg Register b>
				ldc:2 == 2743 <.define const Constant 2855>
				ldc:4 == 2743 <ldc Register a, Constant 0>
				ldc:5 == 2744 <ldc Register b, Constant 12>
				ldc:6 == 2745 <shl Register a, Register a, Register b>
				ldc:7 == 2746 <ldc Register b, Constant 2855>
				ldc:8 == 2747 <or Register b, Register a, Register b>
			push_const:14 == 2748 <@push_reg Register b>
				push_reg:10 == 2748 <.define registerToPush Register b>
				push_reg:13 == 2748 <ldc Register a, Constant 0>
				push_reg:14 == 2749 <ldb Register a, Register a>
				push_reg:15 == 2750 <stb Register a, Register b>
				push_reg:19 == 2751 <ldc Register b, Constant 1>
				push_reg:20 == 2752 <add Register a, Register a, Register b>
				push_reg:21 == 2753 <ldc Register b, Constant 0>
				push_reg:22 == 2754 <stb Register b, Register a>
		call:24 == 2755 <@push_mem Constant 0>
			push_mem:6 == 2755 <.define addr Register b>
			push_mem:7 == 2755 <.define value Register b>
			push_mem:9 == 2755 <@ldc Register b, Constant 0>
				ldc:1 == 2755 <.define writeReg Register b>
				ldc:2 == 2755 <.define const Constant 0>
				ldc:4 == 2755 <ldc Register a, Constant 0>
				ldc:5 == 2756 <ldc Register b, Constant 12>
				ldc:6 == 2757 <shl Register a, Register a, Register b>
				ldc:7 == 2758 <ldc Register b, Constant 0>
				ldc:8 == 2759 <or Register b, Register a, Register b>
			push_mem:10 == 2760 <ldb Register b, Register b>
			push_mem:12 == 2761 <@push_reg Register b>
				push_reg:10 == 2761 <.define registerToPush Register b>
				push_reg:13 == 2761 <ldc Register a, Constant 0>
				push_reg:14 == 2762 <ldb Register a, Register a>
				push_reg:15 == 2763 <stb Register a, Register b>
				push_reg:19 == 2764 <ldc Register b, Constant 1>
				push_reg:20 == 2765 <add Register a, Register a, Register b>
				push_reg:21 == 2766 <ldc Register b, Constant 0>
				push_reg:22 == 2767 <stb Register b, Register a>
		call:26 == 2768 <@push_const Constant 3>
			push_const:6 == 2768 <.define constantToPush Constant 3>
			push_const:12 == 2768 <@ldc Register b, Constant 3>
				ldc:1 == 2768 <.define writeReg Register b>
				ldc:2 == 2768 <.define const Constant 3>
				ldc:4 == 2768 <ldc Register a, Constant 0>
				ldc:5 == 2769 <ldc Register b, Constant 12>
				ldc:6 == 2770 <shl Register a, Register a, Register b>
				ldc:7 == 2771 <ldc Register b, Constant 3>
				ldc:8 == 2772 <or Register b, Register a, Register b>
			push_const:14 == 2773 <@push_reg Register b>
				push_reg:10 == 2773 <.define registerToPush Register b>
				push_reg:13 == 2773 <ldc Register a, Constant 0>
				push_reg:14 == 2774 <ldb Register a, Register a>
				push_reg:15 == 2775 <stb Register a, Register b>
				push_reg:19 == 2776 <ldc Register b, Constant 1>
				push_reg:20 == 2777 <add Register a, Register a, Register b>
				push_reg:21 == 2778 <ldc Register b, Constant 0>
				push_reg:22 == 2779 <stb Register b, Register a>
		call:27 == 2780 <@push_const Constant 0>
			push_const:6 == 2780 <.define constantToPush Constant 0>
			push_const:12 == 2780 <@ldc Register b, Constant 0>
				ldc:1 == 2780 <.define writeReg Register b>
				ldc:2 == 2780 <.define const Constant 0>
				ldc:4 == 2780 <ldc Register a, Constant 0>
				ldc:5 == 2781 <ldc Register b, Constant 12>
				ldc:6 == 2782 <shl Register a, Register a, Register b>
				ldc:7 == 2783 <ldc Register b, Constant 0>
				ldc:8 == 2784 <or Register b, Register a, Register b>
			push_const:14 == 2785 <@push_reg Register b>
				push_reg:10 == 2785 <.define registerToPush Register b>
				push_reg:13 == 2785 <ldc Register a, Constant 0>
				push_reg:14 == 2786 <ldb Register a, Register a>
				push_reg:15 == 2787 <stb Register a, Register b>
				push_reg:19 == 2788 <ldc Register b, Constant 1>
				push_reg:20 == 2789 <add Register a, Register a, Register b>
				push_reg:21 == 2790 <ldc Register b, Constant 0>
				push_reg:22 == 2791 <stb Register b, Register a>
		call:28 == 2792 <@add >
			add:3 == 2792 <.define lhs Register c>
			add:4 == 2792 <.define rhs Register d>
			add:5 == 2792 <.define result Register d>
			add:7 == 2792 <@pop_reg Register d>
				pop_reg:10 == 2792 <.define registerToLoad Register d>
				pop_reg:13 == 2792 <ldc Register a, Constant 0>
				pop_reg:14 == 2793 <ldb Register a, Register a>
				pop_reg:15 == 2794 <ldc Register b, Constant 1>
				pop_reg:16 == 2795 <sub Register a, Register a, Register b>
				pop_reg:17 == 2796 <ldc Register b, Constant 0>
				pop_reg:18 == 2797 <stb Register b, Register a>
				pop_reg:22 == 2798 <ldb Register a, Register d>
			add:8 == 2799 <@pop_reg Register c>
				pop_reg:10 == 2799 <.define registerToLoad Register c>
				pop_reg:13 == 2799 <ldc Register a, Constant 0>
				pop_reg:14 == 2800 <ldb Register a, Register a>
				pop_reg:15 == 2801 <ldc Register b, Constant 1>
				pop_reg:16 == 2802 <sub Register a, Register a, Register b>
				pop_reg:17 == 2803 <ldc Register b, Constant 0>
				pop_reg:18 == 2804 <stb Register b, Register a>
				pop_reg:22 == 2805 <ldb Register a, Register c>
			add:9 == 2806 <add Register d, Register c, Register d>
			add:10 == 2807 <@push_reg Register d>
				push_reg:10 == 2807 <.define registerToPush Register d>
				push_reg:13 == 2807 <ldc Register a, Constant 0>
				push_reg:14 == 2808 <ldb Register a, Register a>
				push_reg:15 == 2809 <stb Register a, Register d>
				push_reg:19 == 2810 <ldc Register b, Constant 1>
				push_reg:20 == 2811 <add Register a, Register a, Register b>
				push_reg:21 == 2812 <ldc Register b, Constant 0>
				push_reg:22 == 2813 <stb Register b, Register a>
		call:29 == 2814 <@sub >
			sub:3 == 2814 <.define lhs Register c>
			sub:4 == 2814 <.define rhs Register d>
			sub:5 == 2814 <.define result Register d>
			sub:7 == 2814 <@pop_reg Register d>
				pop_reg:10 == 2814 <.define registerToLoad Register d>
				pop_reg:13 == 2814 <ldc Register a, Constant 0>
				pop_reg:14 == 2815 <ldb Register a, Register a>
				pop_reg:15 == 2816 <ldc Register b, Constant 1>
				pop_reg:16 == 2817 <sub Register a, Register a, Register b>
				pop_reg:17 == 2818 <ldc Register b, Constant 0>
				pop_reg:18 == 2819 <stb Register b, Register a>
				pop_reg:22 == 2820 <ldb Register a, Register d>
			sub:8 == 2821 <@pop_reg Register c>
				pop_reg:10 == 2821 <.define registerToLoad Register c>
				pop_reg:13 == 2821 <ldc Register a, Constant 0>
				pop_reg:14 == 2822 <ldb Register a, Register a>
				pop_reg:15 == 2823 <ldc Register b, Constant 1>
				pop_reg:16 == 2824 <sub Register a, Register a, Register b>
				pop_reg:17 == 2825 <ldc Register b, Constant 0>
				pop_reg:18 == 2826 <stb Register b, Register a>
				pop_reg:22 == 2827 <ldb Register a, Register c>
			sub:9 == 2828 <sub Register d, Register c, Register d>
			sub:10 == 2829 <@push_reg Register d>
				push_reg:10 == 2829 <.define registerToPush Register d>
				push_reg:13 == 2829 <ldc Register a, Constant 0>
				push_reg:14 == 2830 <ldb Register a, Register a>
				push_reg:15 == 2831 <stb Register a, Register d>
				push_reg:19 == 2832 <ldc Register b, Constant 1>
				push_reg:20 == 2833 <add Register a, Register a, Register b>
				push_reg:21 == 2834 <ldc Register b, Constant 0>
				push_reg:22 == 2835 <stb Register b, Register a>
		call:30 == 2836 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 2836 <.define val Register c>
			pop_mem_v:7 == 2836 <.define addr Constant 2>
			pop_mem_v:9 == 2836 <@pop_reg Register c>
				pop_reg:10 == 2836 <.define registerToLoad Register c>
				pop_reg:13 == 2836 <ldc Register a, Constant 0>
				pop_reg:14 == 2837 <ldb Register a, Register a>
				pop_reg:15 == 2838 <ldc Register b, Constant 1>
				pop_reg:16 == 2839 <sub Register a, Register a, Register b>
				pop_reg:17 == 2840 <ldc Register b, Constant 0>
				pop_reg:18 == 2841 <stb Register b, Register a>
				pop_reg:22 == 2842 <ldb Register a, Register c>
			pop_mem_v:11 == 2843 <@ldc Register b, Constant 2>
				ldc:1 == 2843 <.define writeReg Register b>
				ldc:2 == 2843 <.define const Constant 2>
				ldc:4 == 2843 <ldc Register a, Constant 0>
				ldc:5 == 2844 <ldc Register b, Constant 12>
				ldc:6 == 2845 <shl Register a, Register a, Register b>
				ldc:7 == 2846 <ldc Register b, Constant 2>
				ldc:8 == 2847 <or Register b, Register a, Register b>
			pop_mem_v:12 == 2848 <stb Register b, Register c>
		call:32 == 2849 <@ldc Register a, Constant 4046>
			ldc:1 == 2849 <.define writeReg Register a>
			ldc:2 == 2849 <.define const Constant 4046>
			ldc:4 == 2849 <ldc Register a, Constant 0>
			ldc:5 == 2850 <ldc Register b, Constant 12>
			ldc:6 == 2851 <shl Register a, Register a, Register b>
			ldc:7 == 2852 <ldc Register b, Constant 4046>
			ldc:8 == 2853 <or Register a, Register a, Register b>
		call:33 == 2854 <jmp Register a>
		call:38 == 2855 <ldc Register d, Constant 2>
		call:41 == 2856 <ldb Register d, Register d>
		call:43 == 2857 <@pop_mem_v Constant 3>
			pop_mem_v:6 == 2857 <.define val Register c>
			pop_mem_v:7 == 2857 <.define addr Constant 3>
			pop_mem_v:9 == 2857 <@pop_reg Register c>
				pop_reg:10 == 2857 <.define registerToLoad Register c>
				pop_reg:13 == 2857 <ldc Register a, Constant 0>
				pop_reg:14 == 2858 <ldb Register a, Register a>
				pop_reg:15 == 2859 <ldc Register b, Constant 1>
				pop_reg:16 == 2860 <sub Register a, Register a, Register b>
				pop_reg:17 == 2861 <ldc Register b, Constant 0>
				pop_reg:18 == 2862 <stb Register b, Register a>
				pop_reg:22 == 2863 <ldb Register a, Register c>
			pop_mem_v:11 == 2864 <@ldc Register b, Constant 3>
				ldc:1 == 2864 <.define writeReg Register b>
				ldc:2 == 2864 <.define const Constant 3>
				ldc:4 == 2864 <ldc Register a, Constant 0>
				ldc:5 == 2865 <ldc Register b, Constant 12>
				ldc:6 == 2866 <shl Register a, Register a, Register b>
				ldc:7 == 2867 <ldc Register b, Constant 3>
				ldc:8 == 2868 <or Register b, Register a, Register b>
			pop_mem_v:12 == 2869 <stb Register b, Register c>
		call:44 == 2870 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 2870 <.define val Register c>
			pop_mem_v:7 == 2870 <.define addr Constant 2>
			pop_mem_v:9 == 2870 <@pop_reg Register c>
				pop_reg:10 == 2870 <.define registerToLoad Register c>
				pop_reg:13 == 2870 <ldc Register a, Constant 0>
				pop_reg:14 == 2871 <ldb Register a, Register a>
				pop_reg:15 == 2872 <ldc Register b, Constant 1>
				pop_reg:16 == 2873 <sub Register a, Register a, Register b>
				pop_reg:17 == 2874 <ldc Register b, Constant 0>
				pop_reg:18 == 2875 <stb Register b, Register a>
				pop_reg:22 == 2876 <ldb Register a, Register c>
			pop_mem_v:11 == 2877 <@ldc Register b, Constant 2>
				ldc:1 == 2877 <.define writeReg Register b>
				ldc:2 == 2877 <.define const Constant 2>
				ldc:4 == 2877 <ldc Register a, Constant 0>
				ldc:5 == 2878 <ldc Register b, Constant 12>
				ldc:6 == 2879 <shl Register a, Register a, Register b>
				ldc:7 == 2880 <ldc Register b, Constant 2>
				ldc:8 == 2881 <or Register b, Register a, Register b>
			pop_mem_v:12 == 2882 <stb Register b, Register c>
		call:46 == 2883 <ldc Register c, Constant 0>
		call:47 == 2884 <stb Register c, Register d>
	call_value:3 == 2885 <@push_mem Constant 1>
		push_mem:6 == 2885 <.define addr Register b>
		push_mem:7 == 2885 <.define value Register b>
		push_mem:9 == 2885 <@ldc Register b, Constant 1>
			ldc:1 == 2885 <.define writeReg Register b>
			ldc:2 == 2885 <.define const Constant 1>
			ldc:4 == 2885 <ldc Register a, Constant 0>
			ldc:5 == 2886 <ldc Register b, Constant 12>
			ldc:6 == 2887 <shl Register a, Register a, Register b>
			ldc:7 == 2888 <ldc Register b, Constant 1>
			ldc:8 == 2889 <or Register b, Register a, Register b>
		push_mem:10 == 2890 <ldb Register b, Register b>
		push_mem:12 == 2891 <@push_reg Register b>
			push_reg:10 == 2891 <.define registerToPush Register b>
			push_reg:13 == 2891 <ldc Register a, Constant 0>
			push_reg:14 == 2892 <ldb Register a, Register a>
			push_reg:15 == 2893 <stb Register a, Register b>
			push_reg:19 == 2894 <ldc Register b, Constant 1>
			push_reg:20 == 2895 <add Register a, Register a, Register b>
			push_reg:21 == 2896 <ldc Register b, Constant 0>
			push_reg:22 == 2897 <stb Register b, Register a>
pong.pa2:292 == 2898 <@pop_reg Register c>
	pop_reg:10 == 2898 <.define registerToLoad Register c>
	pop_reg:13 == 2898 <ldc Register a, Constant 0>
	pop_reg:14 == 2899 <ldb Register a, Register a>
	pop_reg:15 == 2900 <ldc Register b, Constant 1>
	pop_reg:16 == 2901 <sub Register a, Register a, Register b>
	pop_reg:17 == 2902 <ldc Register b, Constant 0>
	pop_reg:18 == 2903 <stb Register b, Register a>
	pop_reg:22 == 2904 <ldb Register a, Register c>
pong.pa2:295 == 2905 <@ldc Register b, Constant 4096>
	ldc:1 == 2905 <.define writeReg Register b>
	ldc:2 == 2905 <.define const Constant 4096>
	ldc:4 == 2905 <ldc Register a, Constant 1>
	ldc:5 == 2906 <ldc Register b, Constant 12>
	ldc:6 == 2907 <shl Register a, Register a, Register b>
	ldc:7 == 2908 <ldc Register b, Constant 0>
	ldc:8 == 2909 <or Register b, Register a, Register b>
pong.pa2:296 == 2910 <add Register d, Register c, Register b>
pong.pa2:299 == 2911 <ldc Register a, Constant 1>
pong.pa2:302 == 2912 <stb Register c, Register a>
pong.pa2:306 == 2913 <ldc Register b, Constant 1>
pong.pa2:307 == 2914 <add Register c, Register c, Register b>
pong.pa2:309 == 2915 <ldc Register b, Constant 2912>
pong.pa2:310 == 2916 <jle Register b, Register c, Register d>
pong.pa2:312 == 2917 <@return >
	return:2 == 2917 <ldc Register b, Constant 3>
	return:3 == 2918 <ldb Register b, Register b>
	return:4 == 2919 <ldc Register a, Constant 0>
	return:5 == 2920 <stb Register a, Register b>
	return:7 == 2921 <@pop_reg Register d>
		pop_reg:10 == 2921 <.define registerToLoad Register d>
		pop_reg:13 == 2921 <ldc Register a, Constant 0>
		pop_reg:14 == 2922 <ldb Register a, Register a>
		pop_reg:15 == 2923 <ldc Register b, Constant 1>
		pop_reg:16 == 2924 <sub Register a, Register a, Register b>
		pop_reg:17 == 2925 <ldc Register b, Constant 0>
		pop_reg:18 == 2926 <stb Register b, Register a>
		pop_reg:22 == 2927 <ldb Register a, Register d>
	return:9 == 2928 <jump Register d>
pong.pa2:319 == 2929 <@function Constant 0>
	function:19 == 2929 <.define loccount Constant 0>
	function:22 == 2929 <ldc Register a, Constant 0>
	function:23 == 2930 <ldb Register a, Register a>
	function:24 == 2931 <ldc Register b, Constant 3>
	function:25 == 2932 <stb Register b, Register a>
	function:28 == 2933 <ldc Register a, Constant 0>
	function:29 == 2934 <ldb Register a, Register b>
	function:30 == 2935 <ldc Register c, Constant 0>
	function:31 == 2936 <add Register b, Register b, Register c>
	function:32 == 2937 <stb Register a, Register b>
pong.pa2:322 == 2938 <@push_arg Constant 0>
	push_arg:3 == 2938 <.define slot Constant 0>
	push_arg:6 == 2938 <ldc Register a, Constant 2>
	push_arg:7 == 2939 <ldb Register a, Register a>
	push_arg:8 == 2940 <ldc Register b, Constant 0>
	push_arg:9 == 2941 <add Register a, Register a, Register b>
	push_arg:10 == 2942 <ldb Register a, Register b>
	push_arg:12 == 2943 <@push_reg Register b>
		push_reg:10 == 2943 <.define registerToPush Register b>
		push_reg:13 == 2943 <ldc Register a, Constant 0>
		push_reg:14 == 2944 <ldb Register a, Register a>
		push_reg:15 == 2945 <stb Register a, Register b>
		push_reg:19 == 2946 <ldc Register b, Constant 1>
		push_reg:20 == 2947 <add Register a, Register a, Register b>
		push_reg:21 == 2948 <ldc Register b, Constant 0>
		push_reg:22 == 2949 <stb Register b, Register a>
pong.pa2:323 == 2950 <@push_arg Constant 1>
	push_arg:3 == 2950 <.define slot Constant 1>
	push_arg:6 == 2950 <ldc Register a, Constant 2>
	push_arg:7 == 2951 <ldb Register a, Register a>
	push_arg:8 == 2952 <ldc Register b, Constant 1>
	push_arg:9 == 2953 <add Register a, Register a, Register b>
	push_arg:10 == 2954 <ldb Register a, Register b>
	push_arg:12 == 2955 <@push_reg Register b>
		push_reg:10 == 2955 <.define registerToPush Register b>
		push_reg:13 == 2955 <ldc Register a, Constant 0>
		push_reg:14 == 2956 <ldb Register a, Register a>
		push_reg:15 == 2957 <stb Register a, Register b>
		push_reg:19 == 2958 <ldc Register b, Constant 1>
		push_reg:20 == 2959 <add Register a, Register a, Register b>
		push_reg:21 == 2960 <ldc Register b, Constant 0>
		push_reg:22 == 2961 <stb Register b, Register a>
pong.pa2:324 == 2962 <@push_const Constant 8>
	push_const:6 == 2962 <.define constantToPush Constant 8>
	push_const:12 == 2962 <@ldc Register b, Constant 8>
		ldc:1 == 2962 <.define writeReg Register b>
		ldc:2 == 2962 <.define const Constant 8>
		ldc:4 == 2962 <ldc Register a, Constant 0>
		ldc:5 == 2963 <ldc Register b, Constant 12>
		ldc:6 == 2964 <shl Register a, Register a, Register b>
		ldc:7 == 2965 <ldc Register b, Constant 8>
		ldc:8 == 2966 <or Register b, Register a, Register b>
	push_const:14 == 2967 <@push_reg Register b>
		push_reg:10 == 2967 <.define registerToPush Register b>
		push_reg:13 == 2967 <ldc Register a, Constant 0>
		push_reg:14 == 2968 <ldb Register a, Register a>
		push_reg:15 == 2969 <stb Register a, Register b>
		push_reg:19 == 2970 <ldc Register b, Constant 1>
		push_reg:20 == 2971 <add Register a, Register a, Register b>
		push_reg:21 == 2972 <ldc Register b, Constant 0>
		push_reg:22 == 2973 <stb Register b, Register a>
pong.pa2:325 == 2974 <@push_arg Constant 2>
	push_arg:3 == 2974 <.define slot Constant 2>
	push_arg:6 == 2974 <ldc Register a, Constant 2>
	push_arg:7 == 2975 <ldb Register a, Register a>
	push_arg:8 == 2976 <ldc Register b, Constant 2>
	push_arg:9 == 2977 <add Register a, Register a, Register b>
	push_arg:10 == 2978 <ldb Register a, Register b>
	push_arg:12 == 2979 <@push_reg Register b>
		push_reg:10 == 2979 <.define registerToPush Register b>
		push_reg:13 == 2979 <ldc Register a, Constant 0>
		push_reg:14 == 2980 <ldb Register a, Register a>
		push_reg:15 == 2981 <stb Register a, Register b>
		push_reg:19 == 2982 <ldc Register b, Constant 1>
		push_reg:20 == 2983 <add Register a, Register a, Register b>
		push_reg:21 == 2984 <ldc Register b, Constant 0>
		push_reg:22 == 2985 <stb Register b, Register a>
pong.pa2:326 == 2986 <@call Constant 3166, Constant 4>
	call:11 == 2986 <.define functionLabel Constant 3166>
	call:12 == 2986 <.define argcount Constant 4>
	call:15 == 2986 <@push_mem Constant 2>
		push_mem:6 == 2986 <.define addr Register b>
		push_mem:7 == 2986 <.define value Register b>
		push_mem:9 == 2986 <@ldc Register b, Constant 2>
			ldc:1 == 2986 <.define writeReg Register b>
			ldc:2 == 2986 <.define const Constant 2>
			ldc:4 == 2986 <ldc Register a, Constant 0>
			ldc:5 == 2987 <ldc Register b, Constant 12>
			ldc:6 == 2988 <shl Register a, Register a, Register b>
			ldc:7 == 2989 <ldc Register b, Constant 2>
			ldc:8 == 2990 <or Register b, Register a, Register b>
		push_mem:10 == 2991 <ldb Register b, Register b>
		push_mem:12 == 2992 <@push_reg Register b>
			push_reg:10 == 2992 <.define registerToPush Register b>
			push_reg:13 == 2992 <ldc Register a, Constant 0>
			push_reg:14 == 2993 <ldb Register a, Register a>
			push_reg:15 == 2994 <stb Register a, Register b>
			push_reg:19 == 2995 <ldc Register b, Constant 1>
			push_reg:20 == 2996 <add Register a, Register a, Register b>
			push_reg:21 == 2997 <ldc Register b, Constant 0>
			push_reg:22 == 2998 <stb Register b, Register a>
	call:16 == 2999 <@push_mem Constant 3>
		push_mem:6 == 2999 <.define addr Register b>
		push_mem:7 == 2999 <.define value Register b>
		push_mem:9 == 2999 <@ldc Register b, Constant 3>
			ldc:1 == 2999 <.define writeReg Register b>
			ldc:2 == 2999 <.define const Constant 3>
			ldc:4 == 2999 <ldc Register a, Constant 0>
			ldc:5 == 3000 <ldc Register b, Constant 12>
			ldc:6 == 3001 <shl Register a, Register a, Register b>
			ldc:7 == 3002 <ldc Register b, Constant 3>
			ldc:8 == 3003 <or Register b, Register a, Register b>
		push_mem:10 == 3004 <ldb Register b, Register b>
		push_mem:12 == 3005 <@push_reg Register b>
			push_reg:10 == 3005 <.define registerToPush Register b>
			push_reg:13 == 3005 <ldc Register a, Constant 0>
			push_reg:14 == 3006 <ldb Register a, Register a>
			push_reg:15 == 3007 <stb Register a, Register b>
			push_reg:19 == 3008 <ldc Register b, Constant 1>
			push_reg:20 == 3009 <add Register a, Register a, Register b>
			push_reg:21 == 3010 <ldc Register b, Constant 0>
			push_reg:22 == 3011 <stb Register b, Register a>
	call:19 == 3012 <@push_const Constant 3124>
		push_const:6 == 3012 <.define constantToPush Constant 3124>
		push_const:12 == 3012 <@ldc Register b, Constant 3124>
			ldc:1 == 3012 <.define writeReg Register b>
			ldc:2 == 3012 <.define const Constant 3124>
			ldc:4 == 3012 <ldc Register a, Constant 0>
			ldc:5 == 3013 <ldc Register b, Constant 12>
			ldc:6 == 3014 <shl Register a, Register a, Register b>
			ldc:7 == 3015 <ldc Register b, Constant 3124>
			ldc:8 == 3016 <or Register b, Register a, Register b>
		push_const:14 == 3017 <@push_reg Register b>
			push_reg:10 == 3017 <.define registerToPush Register b>
			push_reg:13 == 3017 <ldc Register a, Constant 0>
			push_reg:14 == 3018 <ldb Register a, Register a>
			push_reg:15 == 3019 <stb Register a, Register b>
			push_reg:19 == 3020 <ldc Register b, Constant 1>
			push_reg:20 == 3021 <add Register a, Register a, Register b>
			push_reg:21 == 3022 <ldc Register b, Constant 0>
			push_reg:22 == 3023 <stb Register b, Register a>
	call:24 == 3024 <@push_mem Constant 0>
		push_mem:6 == 3024 <.define addr Register b>
		push_mem:7 == 3024 <.define value Register b>
		push_mem:9 == 3024 <@ldc Register b, Constant 0>
			ldc:1 == 3024 <.define writeReg Register b>
			ldc:2 == 3024 <.define const Constant 0>
			ldc:4 == 3024 <ldc Register a, Constant 0>
			ldc:5 == 3025 <ldc Register b, Constant 12>
			ldc:6 == 3026 <shl Register a, Register a, Register b>
			ldc:7 == 3027 <ldc Register b, Constant 0>
			ldc:8 == 3028 <or Register b, Register a, Register b>
		push_mem:10 == 3029 <ldb Register b, Register b>
		push_mem:12 == 3030 <@push_reg Register b>
			push_reg:10 == 3030 <.define registerToPush Register b>
			push_reg:13 == 3030 <ldc Register a, Constant 0>
			push_reg:14 == 3031 <ldb Register a, Register a>
			push_reg:15 == 3032 <stb Register a, Register b>
			push_reg:19 == 3033 <ldc Register b, Constant 1>
			push_reg:20 == 3034 <add Register a, Register a, Register b>
			push_reg:21 == 3035 <ldc Register b, Constant 0>
			push_reg:22 == 3036 <stb Register b, Register a>
	call:26 == 3037 <@push_const Constant 3>
		push_const:6 == 3037 <.define constantToPush Constant 3>
		push_const:12 == 3037 <@ldc Register b, Constant 3>
			ldc:1 == 3037 <.define writeReg Register b>
			ldc:2 == 3037 <.define const Constant 3>
			ldc:4 == 3037 <ldc Register a, Constant 0>
			ldc:5 == 3038 <ldc Register b, Constant 12>
			ldc:6 == 3039 <shl Register a, Register a, Register b>
			ldc:7 == 3040 <ldc Register b, Constant 3>
			ldc:8 == 3041 <or Register b, Register a, Register b>
		push_const:14 == 3042 <@push_reg Register b>
			push_reg:10 == 3042 <.define registerToPush Register b>
			push_reg:13 == 3042 <ldc Register a, Constant 0>
			push_reg:14 == 3043 <ldb Register a, Register a>
			push_reg:15 == 3044 <stb Register a, Register b>
			push_reg:19 == 3045 <ldc Register b, Constant 1>
			push_reg:20 == 3046 <add Register a, Register a, Register b>
			push_reg:21 == 3047 <ldc Register b, Constant 0>
			push_reg:22 == 3048 <stb Register b, Register a>
	call:27 == 3049 <@push_const Constant 4>
		push_const:6 == 3049 <.define constantToPush Constant 4>
		push_const:12 == 3049 <@ldc Register b, Constant 4>
			ldc:1 == 3049 <.define writeReg Register b>
			ldc:2 == 3049 <.define const Constant 4>
			ldc:4 == 3049 <ldc Register a, Constant 0>
			ldc:5 == 3050 <ldc Register b, Constant 12>
			ldc:6 == 3051 <shl Register a, Register a, Register b>
			ldc:7 == 3052 <ldc Register b, Constant 4>
			ldc:8 == 3053 <or Register b, Register a, Register b>
		push_const:14 == 3054 <@push_reg Register b>
			push_reg:10 == 3054 <.define registerToPush Register b>
			push_reg:13 == 3054 <ldc Register a, Constant 0>
			push_reg:14 == 3055 <ldb Register a, Register a>
			push_reg:15 == 3056 <stb Register a, Register b>
			push_reg:19 == 3057 <ldc Register b, Constant 1>
			push_reg:20 == 3058 <add Register a, Register a, Register b>
			push_reg:21 == 3059 <ldc Register b, Constant 0>
			push_reg:22 == 3060 <stb Register b, Register a>
	call:28 == 3061 <@add >
		add:3 == 3061 <.define lhs Register c>
		add:4 == 3061 <.define rhs Register d>
		add:5 == 3061 <.define result Register d>
		add:7 == 3061 <@pop_reg Register d>
			pop_reg:10 == 3061 <.define registerToLoad Register d>
			pop_reg:13 == 3061 <ldc Register a, Constant 0>
			pop_reg:14 == 3062 <ldb Register a, Register a>
			pop_reg:15 == 3063 <ldc Register b, Constant 1>
			pop_reg:16 == 3064 <sub Register a, Register a, Register b>
			pop_reg:17 == 3065 <ldc Register b, Constant 0>
			pop_reg:18 == 3066 <stb Register b, Register a>
			pop_reg:22 == 3067 <ldb Register a, Register d>
		add:8 == 3068 <@pop_reg Register c>
			pop_reg:10 == 3068 <.define registerToLoad Register c>
			pop_reg:13 == 3068 <ldc Register a, Constant 0>
			pop_reg:14 == 3069 <ldb Register a, Register a>
			pop_reg:15 == 3070 <ldc Register b, Constant 1>
			pop_reg:16 == 3071 <sub Register a, Register a, Register b>
			pop_reg:17 == 3072 <ldc Register b, Constant 0>
			pop_reg:18 == 3073 <stb Register b, Register a>
			pop_reg:22 == 3074 <ldb Register a, Register c>
		add:9 == 3075 <add Register d, Register c, Register d>
		add:10 == 3076 <@push_reg Register d>
			push_reg:10 == 3076 <.define registerToPush Register d>
			push_reg:13 == 3076 <ldc Register a, Constant 0>
			push_reg:14 == 3077 <ldb Register a, Register a>
			push_reg:15 == 3078 <stb Register a, Register d>
			push_reg:19 == 3079 <ldc Register b, Constant 1>
			push_reg:20 == 3080 <add Register a, Register a, Register b>
			push_reg:21 == 3081 <ldc Register b, Constant 0>
			push_reg:22 == 3082 <stb Register b, Register a>
	call:29 == 3083 <@sub >
		sub:3 == 3083 <.define lhs Register c>
		sub:4 == 3083 <.define rhs Register d>
		sub:5 == 3083 <.define result Register d>
		sub:7 == 3083 <@pop_reg Register d>
			pop_reg:10 == 3083 <.define registerToLoad Register d>
			pop_reg:13 == 3083 <ldc Register a, Constant 0>
			pop_reg:14 == 3084 <ldb Register a, Register a>
			pop_reg:15 == 3085 <ldc Register b, Constant 1>
			pop_reg:16 == 3086 <sub Register a, Register a, Register b>
			pop_reg:17 == 3087 <ldc Register b, Constant 0>
			pop_reg:18 == 3088 <stb Register b, Register a>
			pop_reg:22 == 3089 <ldb Register a, Register d>
		sub:8 == 3090 <@pop_reg Register c>
			pop_reg:10 == 3090 <.define registerToLoad Register c>
			pop_reg:13 == 3090 <ldc Register a, Constant 0>
			pop_reg:14 == 3091 <ldb Register a, Register a>
			pop_reg:15 == 3092 <ldc Register b, Constant 1>
			pop_reg:16 == 3093 <sub Register a, Register a, Register b>
			pop_reg:17 == 3094 <ldc Register b, Constant 0>
			pop_reg:18 == 3095 <stb Register b, Register a>
			pop_reg:22 == 3096 <ldb Register a, Register c>
		sub:9 == 3097 <sub Register d, Register c, Register d>
		sub:10 == 3098 <@push_reg Register d>
			push_reg:10 == 3098 <.define registerToPush Register d>
			push_reg:13 == 3098 <ldc Register a, Constant 0>
			push_reg:14 == 3099 <ldb Register a, Register a>
			push_reg:15 == 3100 <stb Register a, Register d>
			push_reg:19 == 3101 <ldc Register b, Constant 1>
			push_reg:20 == 3102 <add Register a, Register a, Register b>
			push_reg:21 == 3103 <ldc Register b, Constant 0>
			push_reg:22 == 3104 <stb Register b, Register a>
	call:30 == 3105 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 3105 <.define val Register c>
		pop_mem_v:7 == 3105 <.define addr Constant 2>
		pop_mem_v:9 == 3105 <@pop_reg Register c>
			pop_reg:10 == 3105 <.define registerToLoad Register c>
			pop_reg:13 == 3105 <ldc Register a, Constant 0>
			pop_reg:14 == 3106 <ldb Register a, Register a>
			pop_reg:15 == 3107 <ldc Register b, Constant 1>
			pop_reg:16 == 3108 <sub Register a, Register a, Register b>
			pop_reg:17 == 3109 <ldc Register b, Constant 0>
			pop_reg:18 == 3110 <stb Register b, Register a>
			pop_reg:22 == 3111 <ldb Register a, Register c>
		pop_mem_v:11 == 3112 <@ldc Register b, Constant 2>
			ldc:1 == 3112 <.define writeReg Register b>
			ldc:2 == 3112 <.define const Constant 2>
			ldc:4 == 3112 <ldc Register a, Constant 0>
			ldc:5 == 3113 <ldc Register b, Constant 12>
			ldc:6 == 3114 <shl Register a, Register a, Register b>
			ldc:7 == 3115 <ldc Register b, Constant 2>
			ldc:8 == 3116 <or Register b, Register a, Register b>
		pop_mem_v:12 == 3117 <stb Register b, Register c>
	call:32 == 3118 <@ldc Register a, Constant 3166>
		ldc:1 == 3118 <.define writeReg Register a>
		ldc:2 == 3118 <.define const Constant 3166>
		ldc:4 == 3118 <ldc Register a, Constant 0>
		ldc:5 == 3119 <ldc Register b, Constant 12>
		ldc:6 == 3120 <shl Register a, Register a, Register b>
		ldc:7 == 3121 <ldc Register b, Constant 3166>
		ldc:8 == 3122 <or Register a, Register a, Register b>
	call:33 == 3123 <jmp Register a>
	call:38 == 3124 <ldc Register d, Constant 2>
	call:41 == 3125 <ldb Register d, Register d>
	call:43 == 3126 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 3126 <.define val Register c>
		pop_mem_v:7 == 3126 <.define addr Constant 3>
		pop_mem_v:9 == 3126 <@pop_reg Register c>
			pop_reg:10 == 3126 <.define registerToLoad Register c>
			pop_reg:13 == 3126 <ldc Register a, Constant 0>
			pop_reg:14 == 3127 <ldb Register a, Register a>
			pop_reg:15 == 3128 <ldc Register b, Constant 1>
			pop_reg:16 == 3129 <sub Register a, Register a, Register b>
			pop_reg:17 == 3130 <ldc Register b, Constant 0>
			pop_reg:18 == 3131 <stb Register b, Register a>
			pop_reg:22 == 3132 <ldb Register a, Register c>
		pop_mem_v:11 == 3133 <@ldc Register b, Constant 3>
			ldc:1 == 3133 <.define writeReg Register b>
			ldc:2 == 3133 <.define const Constant 3>
			ldc:4 == 3133 <ldc Register a, Constant 0>
			ldc:5 == 3134 <ldc Register b, Constant 12>
			ldc:6 == 3135 <shl Register a, Register a, Register b>
			ldc:7 == 3136 <ldc Register b, Constant 3>
			ldc:8 == 3137 <or Register b, Register a, Register b>
		pop_mem_v:12 == 3138 <stb Register b, Register c>
	call:44 == 3139 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 3139 <.define val Register c>
		pop_mem_v:7 == 3139 <.define addr Constant 2>
		pop_mem_v:9 == 3139 <@pop_reg Register c>
			pop_reg:10 == 3139 <.define registerToLoad Register c>
			pop_reg:13 == 3139 <ldc Register a, Constant 0>
			pop_reg:14 == 3140 <ldb Register a, Register a>
			pop_reg:15 == 3141 <ldc Register b, Constant 1>
			pop_reg:16 == 3142 <sub Register a, Register a, Register b>
			pop_reg:17 == 3143 <ldc Register b, Constant 0>
			pop_reg:18 == 3144 <stb Register b, Register a>
			pop_reg:22 == 3145 <ldb Register a, Register c>
		pop_mem_v:11 == 3146 <@ldc Register b, Constant 2>
			ldc:1 == 3146 <.define writeReg Register b>
			ldc:2 == 3146 <.define const Constant 2>
			ldc:4 == 3146 <ldc Register a, Constant 0>
			ldc:5 == 3147 <ldc Register b, Constant 12>
			ldc:6 == 3148 <shl Register a, Register a, Register b>
			ldc:7 == 3149 <ldc Register b, Constant 2>
			ldc:8 == 3150 <or Register b, Register a, Register b>
		pop_mem_v:12 == 3151 <stb Register b, Register c>
	call:46 == 3152 <ldc Register c, Constant 0>
	call:47 == 3153 <stb Register c, Register d>
pong.pa2:328 == 3154 <@return >
	return:2 == 3154 <ldc Register b, Constant 3>
	return:3 == 3155 <ldb Register b, Register b>
	return:4 == 3156 <ldc Register a, Constant 0>
	return:5 == 3157 <stb Register a, Register b>
	return:7 == 3158 <@pop_reg Register d>
		pop_reg:10 == 3158 <.define registerToLoad Register d>
		pop_reg:13 == 3158 <ldc Register a, Constant 0>
		pop_reg:14 == 3159 <ldb Register a, Register a>
		pop_reg:15 == 3160 <ldc Register b, Constant 1>
		pop_reg:16 == 3161 <sub Register a, Register a, Register b>
		pop_reg:17 == 3162 <ldc Register b, Constant 0>
		pop_reg:18 == 3163 <stb Register b, Register a>
		pop_reg:22 == 3164 <ldb Register a, Register d>
	return:9 == 3165 <jump Register d>
pong.pa2:335 == 3166 <@function Constant 2>
	function:19 == 3166 <.define loccount Constant 2>
	function:22 == 3166 <ldc Register a, Constant 0>
	function:23 == 3167 <ldb Register a, Register a>
	function:24 == 3168 <ldc Register b, Constant 3>
	function:25 == 3169 <stb Register b, Register a>
	function:28 == 3170 <ldc Register a, Constant 0>
	function:29 == 3171 <ldb Register a, Register b>
	function:30 == 3172 <ldc Register c, Constant 2>
	function:31 == 3173 <add Register b, Register b, Register c>
	function:32 == 3174 <stb Register a, Register b>
pong.pa2:339 == 3175 <@call_value Constant 4046, Constant 0>
	call_value:1 == 3175 <@call Constant 4046, Constant 0>
		call:11 == 3175 <.define functionLabel Constant 4046>
		call:12 == 3175 <.define argcount Constant 0>
		call:15 == 3175 <@push_mem Constant 2>
			push_mem:6 == 3175 <.define addr Register b>
			push_mem:7 == 3175 <.define value Register b>
			push_mem:9 == 3175 <@ldc Register b, Constant 2>
				ldc:1 == 3175 <.define writeReg Register b>
				ldc:2 == 3175 <.define const Constant 2>
				ldc:4 == 3175 <ldc Register a, Constant 0>
				ldc:5 == 3176 <ldc Register b, Constant 12>
				ldc:6 == 3177 <shl Register a, Register a, Register b>
				ldc:7 == 3178 <ldc Register b, Constant 2>
				ldc:8 == 3179 <or Register b, Register a, Register b>
			push_mem:10 == 3180 <ldb Register b, Register b>
			push_mem:12 == 3181 <@push_reg Register b>
				push_reg:10 == 3181 <.define registerToPush Register b>
				push_reg:13 == 3181 <ldc Register a, Constant 0>
				push_reg:14 == 3182 <ldb Register a, Register a>
				push_reg:15 == 3183 <stb Register a, Register b>
				push_reg:19 == 3184 <ldc Register b, Constant 1>
				push_reg:20 == 3185 <add Register a, Register a, Register b>
				push_reg:21 == 3186 <ldc Register b, Constant 0>
				push_reg:22 == 3187 <stb Register b, Register a>
		call:16 == 3188 <@push_mem Constant 3>
			push_mem:6 == 3188 <.define addr Register b>
			push_mem:7 == 3188 <.define value Register b>
			push_mem:9 == 3188 <@ldc Register b, Constant 3>
				ldc:1 == 3188 <.define writeReg Register b>
				ldc:2 == 3188 <.define const Constant 3>
				ldc:4 == 3188 <ldc Register a, Constant 0>
				ldc:5 == 3189 <ldc Register b, Constant 12>
				ldc:6 == 3190 <shl Register a, Register a, Register b>
				ldc:7 == 3191 <ldc Register b, Constant 3>
				ldc:8 == 3192 <or Register b, Register a, Register b>
			push_mem:10 == 3193 <ldb Register b, Register b>
			push_mem:12 == 3194 <@push_reg Register b>
				push_reg:10 == 3194 <.define registerToPush Register b>
				push_reg:13 == 3194 <ldc Register a, Constant 0>
				push_reg:14 == 3195 <ldb Register a, Register a>
				push_reg:15 == 3196 <stb Register a, Register b>
				push_reg:19 == 3197 <ldc Register b, Constant 1>
				push_reg:20 == 3198 <add Register a, Register a, Register b>
				push_reg:21 == 3199 <ldc Register b, Constant 0>
				push_reg:22 == 3200 <stb Register b, Register a>
		call:19 == 3201 <@push_const Constant 3313>
			push_const:6 == 3201 <.define constantToPush Constant 3313>
			push_const:12 == 3201 <@ldc Register b, Constant 3313>
				ldc:1 == 3201 <.define writeReg Register b>
				ldc:2 == 3201 <.define const Constant 3313>
				ldc:4 == 3201 <ldc Register a, Constant 0>
				ldc:5 == 3202 <ldc Register b, Constant 12>
				ldc:6 == 3203 <shl Register a, Register a, Register b>
				ldc:7 == 3204 <ldc Register b, Constant 3313>
				ldc:8 == 3205 <or Register b, Register a, Register b>
			push_const:14 == 3206 <@push_reg Register b>
				push_reg:10 == 3206 <.define registerToPush Register b>
				push_reg:13 == 3206 <ldc Register a, Constant 0>
				push_reg:14 == 3207 <ldb Register a, Register a>
				push_reg:15 == 3208 <stb Register a, Register b>
				push_reg:19 == 3209 <ldc Register b, Constant 1>
				push_reg:20 == 3210 <add Register a, Register a, Register b>
				push_reg:21 == 3211 <ldc Register b, Constant 0>
				push_reg:22 == 3212 <stb Register b, Register a>
		call:24 == 3213 <@push_mem Constant 0>
			push_mem:6 == 3213 <.define addr Register b>
			push_mem:7 == 3213 <.define value Register b>
			push_mem:9 == 3213 <@ldc Register b, Constant 0>
				ldc:1 == 3213 <.define writeReg Register b>
				ldc:2 == 3213 <.define const Constant 0>
				ldc:4 == 3213 <ldc Register a, Constant 0>
				ldc:5 == 3214 <ldc Register b, Constant 12>
				ldc:6 == 3215 <shl Register a, Register a, Register b>
				ldc:7 == 3216 <ldc Register b, Constant 0>
				ldc:8 == 3217 <or Register b, Register a, Register b>
			push_mem:10 == 3218 <ldb Register b, Register b>
			push_mem:12 == 3219 <@push_reg Register b>
				push_reg:10 == 3219 <.define registerToPush Register b>
				push_reg:13 == 3219 <ldc Register a, Constant 0>
				push_reg:14 == 3220 <ldb Register a, Register a>
				push_reg:15 == 3221 <stb Register a, Register b>
				push_reg:19 == 3222 <ldc Register b, Constant 1>
				push_reg:20 == 3223 <add Register a, Register a, Register b>
				push_reg:21 == 3224 <ldc Register b, Constant 0>
				push_reg:22 == 3225 <stb Register b, Register a>
		call:26 == 3226 <@push_const Constant 3>
			push_const:6 == 3226 <.define constantToPush Constant 3>
			push_const:12 == 3226 <@ldc Register b, Constant 3>
				ldc:1 == 3226 <.define writeReg Register b>
				ldc:2 == 3226 <.define const Constant 3>
				ldc:4 == 3226 <ldc Register a, Constant 0>
				ldc:5 == 3227 <ldc Register b, Constant 12>
				ldc:6 == 3228 <shl Register a, Register a, Register b>
				ldc:7 == 3229 <ldc Register b, Constant 3>
				ldc:8 == 3230 <or Register b, Register a, Register b>
			push_const:14 == 3231 <@push_reg Register b>
				push_reg:10 == 3231 <.define registerToPush Register b>
				push_reg:13 == 3231 <ldc Register a, Constant 0>
				push_reg:14 == 3232 <ldb Register a, Register a>
				push_reg:15 == 3233 <stb Register a, Register b>
				push_reg:19 == 3234 <ldc Register b, Constant 1>
				push_reg:20 == 3235 <add Register a, Register a, Register b>
				push_reg:21 == 3236 <ldc Register b, Constant 0>
				push_reg:22 == 3237 <stb Register b, Register a>
		call:27 == 3238 <@push_const Constant 0>
			push_const:6 == 3238 <.define constantToPush Constant 0>
			push_const:12 == 3238 <@ldc Register b, Constant 0>
				ldc:1 == 3238 <.define writeReg Register b>
				ldc:2 == 3238 <.define const Constant 0>
				ldc:4 == 3238 <ldc Register a, Constant 0>
				ldc:5 == 3239 <ldc Register b, Constant 12>
				ldc:6 == 3240 <shl Register a, Register a, Register b>
				ldc:7 == 3241 <ldc Register b, Constant 0>
				ldc:8 == 3242 <or Register b, Register a, Register b>
			push_const:14 == 3243 <@push_reg Register b>
				push_reg:10 == 3243 <.define registerToPush Register b>
				push_reg:13 == 3243 <ldc Register a, Constant 0>
				push_reg:14 == 3244 <ldb Register a, Register a>
				push_reg:15 == 3245 <stb Register a, Register b>
				push_reg:19 == 3246 <ldc Register b, Constant 1>
				push_reg:20 == 3247 <add Register a, Register a, Register b>
				push_reg:21 == 3248 <ldc Register b, Constant 0>
				push_reg:22 == 3249 <stb Register b, Register a>
		call:28 == 3250 <@add >
			add:3 == 3250 <.define lhs Register c>
			add:4 == 3250 <.define rhs Register d>
			add:5 == 3250 <.define result Register d>
			add:7 == 3250 <@pop_reg Register d>
				pop_reg:10 == 3250 <.define registerToLoad Register d>
				pop_reg:13 == 3250 <ldc Register a, Constant 0>
				pop_reg:14 == 3251 <ldb Register a, Register a>
				pop_reg:15 == 3252 <ldc Register b, Constant 1>
				pop_reg:16 == 3253 <sub Register a, Register a, Register b>
				pop_reg:17 == 3254 <ldc Register b, Constant 0>
				pop_reg:18 == 3255 <stb Register b, Register a>
				pop_reg:22 == 3256 <ldb Register a, Register d>
			add:8 == 3257 <@pop_reg Register c>
				pop_reg:10 == 3257 <.define registerToLoad Register c>
				pop_reg:13 == 3257 <ldc Register a, Constant 0>
				pop_reg:14 == 3258 <ldb Register a, Register a>
				pop_reg:15 == 3259 <ldc Register b, Constant 1>
				pop_reg:16 == 3260 <sub Register a, Register a, Register b>
				pop_reg:17 == 3261 <ldc Register b, Constant 0>
				pop_reg:18 == 3262 <stb Register b, Register a>
				pop_reg:22 == 3263 <ldb Register a, Register c>
			add:9 == 3264 <add Register d, Register c, Register d>
			add:10 == 3265 <@push_reg Register d>
				push_reg:10 == 3265 <.define registerToPush Register d>
				push_reg:13 == 3265 <ldc Register a, Constant 0>
				push_reg:14 == 3266 <ldb Register a, Register a>
				push_reg:15 == 3267 <stb Register a, Register d>
				push_reg:19 == 3268 <ldc Register b, Constant 1>
				push_reg:20 == 3269 <add Register a, Register a, Register b>
				push_reg:21 == 3270 <ldc Register b, Constant 0>
				push_reg:22 == 3271 <stb Register b, Register a>
		call:29 == 3272 <@sub >
			sub:3 == 3272 <.define lhs Register c>
			sub:4 == 3272 <.define rhs Register d>
			sub:5 == 3272 <.define result Register d>
			sub:7 == 3272 <@pop_reg Register d>
				pop_reg:10 == 3272 <.define registerToLoad Register d>
				pop_reg:13 == 3272 <ldc Register a, Constant 0>
				pop_reg:14 == 3273 <ldb Register a, Register a>
				pop_reg:15 == 3274 <ldc Register b, Constant 1>
				pop_reg:16 == 3275 <sub Register a, Register a, Register b>
				pop_reg:17 == 3276 <ldc Register b, Constant 0>
				pop_reg:18 == 3277 <stb Register b, Register a>
				pop_reg:22 == 3278 <ldb Register a, Register d>
			sub:8 == 3279 <@pop_reg Register c>
				pop_reg:10 == 3279 <.define registerToLoad Register c>
				pop_reg:13 == 3279 <ldc Register a, Constant 0>
				pop_reg:14 == 3280 <ldb Register a, Register a>
				pop_reg:15 == 3281 <ldc Register b, Constant 1>
				pop_reg:16 == 3282 <sub Register a, Register a, Register b>
				pop_reg:17 == 3283 <ldc Register b, Constant 0>
				pop_reg:18 == 3284 <stb Register b, Register a>
				pop_reg:22 == 3285 <ldb Register a, Register c>
			sub:9 == 3286 <sub Register d, Register c, Register d>
			sub:10 == 3287 <@push_reg Register d>
				push_reg:10 == 3287 <.define registerToPush Register d>
				push_reg:13 == 3287 <ldc Register a, Constant 0>
				push_reg:14 == 3288 <ldb Register a, Register a>
				push_reg:15 == 3289 <stb Register a, Register d>
				push_reg:19 == 3290 <ldc Register b, Constant 1>
				push_reg:20 == 3291 <add Register a, Register a, Register b>
				push_reg:21 == 3292 <ldc Register b, Constant 0>
				push_reg:22 == 3293 <stb Register b, Register a>
		call:30 == 3294 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 3294 <.define val Register c>
			pop_mem_v:7 == 3294 <.define addr Constant 2>
			pop_mem_v:9 == 3294 <@pop_reg Register c>
				pop_reg:10 == 3294 <.define registerToLoad Register c>
				pop_reg:13 == 3294 <ldc Register a, Constant 0>
				pop_reg:14 == 3295 <ldb Register a, Register a>
				pop_reg:15 == 3296 <ldc Register b, Constant 1>
				pop_reg:16 == 3297 <sub Register a, Register a, Register b>
				pop_reg:17 == 3298 <ldc Register b, Constant 0>
				pop_reg:18 == 3299 <stb Register b, Register a>
				pop_reg:22 == 3300 <ldb Register a, Register c>
			pop_mem_v:11 == 3301 <@ldc Register b, Constant 2>
				ldc:1 == 3301 <.define writeReg Register b>
				ldc:2 == 3301 <.define const Constant 2>
				ldc:4 == 3301 <ldc Register a, Constant 0>
				ldc:5 == 3302 <ldc Register b, Constant 12>
				ldc:6 == 3303 <shl Register a, Register a, Register b>
				ldc:7 == 3304 <ldc Register b, Constant 2>
				ldc:8 == 3305 <or Register b, Register a, Register b>
			pop_mem_v:12 == 3306 <stb Register b, Register c>
		call:32 == 3307 <@ldc Register a, Constant 4046>
			ldc:1 == 3307 <.define writeReg Register a>
			ldc:2 == 3307 <.define const Constant 4046>
			ldc:4 == 3307 <ldc Register a, Constant 0>
			ldc:5 == 3308 <ldc Register b, Constant 12>
			ldc:6 == 3309 <shl Register a, Register a, Register b>
			ldc:7 == 3310 <ldc Register b, Constant 4046>
			ldc:8 == 3311 <or Register a, Register a, Register b>
		call:33 == 3312 <jmp Register a>
		call:38 == 3313 <ldc Register d, Constant 2>
		call:41 == 3314 <ldb Register d, Register d>
		call:43 == 3315 <@pop_mem_v Constant 3>
			pop_mem_v:6 == 3315 <.define val Register c>
			pop_mem_v:7 == 3315 <.define addr Constant 3>
			pop_mem_v:9 == 3315 <@pop_reg Register c>
				pop_reg:10 == 3315 <.define registerToLoad Register c>
				pop_reg:13 == 3315 <ldc Register a, Constant 0>
				pop_reg:14 == 3316 <ldb Register a, Register a>
				pop_reg:15 == 3317 <ldc Register b, Constant 1>
				pop_reg:16 == 3318 <sub Register a, Register a, Register b>
				pop_reg:17 == 3319 <ldc Register b, Constant 0>
				pop_reg:18 == 3320 <stb Register b, Register a>
				pop_reg:22 == 3321 <ldb Register a, Register c>
			pop_mem_v:11 == 3322 <@ldc Register b, Constant 3>
				ldc:1 == 3322 <.define writeReg Register b>
				ldc:2 == 3322 <.define const Constant 3>
				ldc:4 == 3322 <ldc Register a, Constant 0>
				ldc:5 == 3323 <ldc Register b, Constant 12>
				ldc:6 == 3324 <shl Register a, Register a, Register b>
				ldc:7 == 3325 <ldc Register b, Constant 3>
				ldc:8 == 3326 <or Register b, Register a, Register b>
			pop_mem_v:12 == 3327 <stb Register b, Register c>
		call:44 == 3328 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 3328 <.define val Register c>
			pop_mem_v:7 == 3328 <.define addr Constant 2>
			pop_mem_v:9 == 3328 <@pop_reg Register c>
				pop_reg:10 == 3328 <.define registerToLoad Register c>
				pop_reg:13 == 3328 <ldc Register a, Constant 0>
				pop_reg:14 == 3329 <ldb Register a, Register a>
				pop_reg:15 == 3330 <ldc Register b, Constant 1>
				pop_reg:16 == 3331 <sub Register a, Register a, Register b>
				pop_reg:17 == 3332 <ldc Register b, Constant 0>
				pop_reg:18 == 3333 <stb Register b, Register a>
				pop_reg:22 == 3334 <ldb Register a, Register c>
			pop_mem_v:11 == 3335 <@ldc Register b, Constant 2>
				ldc:1 == 3335 <.define writeReg Register b>
				ldc:2 == 3335 <.define const Constant 2>
				ldc:4 == 3335 <ldc Register a, Constant 0>
				ldc:5 == 3336 <ldc Register b, Constant 12>
				ldc:6 == 3337 <shl Register a, Register a, Register b>
				ldc:7 == 3338 <ldc Register b, Constant 2>
				ldc:8 == 3339 <or Register b, Register a, Register b>
			pop_mem_v:12 == 3340 <stb Register b, Register c>
		call:46 == 3341 <ldc Register c, Constant 0>
		call:47 == 3342 <stb Register c, Register d>
	call_value:3 == 3343 <@push_mem Constant 1>
		push_mem:6 == 3343 <.define addr Register b>
		push_mem:7 == 3343 <.define value Register b>
		push_mem:9 == 3343 <@ldc Register b, Constant 1>
			ldc:1 == 3343 <.define writeReg Register b>
			ldc:2 == 3343 <.define const Constant 1>
			ldc:4 == 3343 <ldc Register a, Constant 0>
			ldc:5 == 3344 <ldc Register b, Constant 12>
			ldc:6 == 3345 <shl Register a, Register a, Register b>
			ldc:7 == 3346 <ldc Register b, Constant 1>
			ldc:8 == 3347 <or Register b, Register a, Register b>
		push_mem:10 == 3348 <ldb Register b, Register b>
		push_mem:12 == 3349 <@push_reg Register b>
			push_reg:10 == 3349 <.define registerToPush Register b>
			push_reg:13 == 3349 <ldc Register a, Constant 0>
			push_reg:14 == 3350 <ldb Register a, Register a>
			push_reg:15 == 3351 <stb Register a, Register b>
			push_reg:19 == 3352 <ldc Register b, Constant 1>
			push_reg:20 == 3353 <add Register a, Register a, Register b>
			push_reg:21 == 3354 <ldc Register b, Constant 0>
			push_reg:22 == 3355 <stb Register b, Register a>
pong.pa2:341 == 3356 <@push_arg Constant 1>
	push_arg:3 == 3356 <.define slot Constant 1>
	push_arg:6 == 3356 <ldc Register a, Constant 2>
	push_arg:7 == 3357 <ldb Register a, Register a>
	push_arg:8 == 3358 <ldc Register b, Constant 1>
	push_arg:9 == 3359 <add Register a, Register a, Register b>
	push_arg:10 == 3360 <ldb Register a, Register b>
	push_arg:12 == 3361 <@push_reg Register b>
		push_reg:10 == 3361 <.define registerToPush Register b>
		push_reg:13 == 3361 <ldc Register a, Constant 0>
		push_reg:14 == 3362 <ldb Register a, Register a>
		push_reg:15 == 3363 <stb Register a, Register b>
		push_reg:19 == 3364 <ldc Register b, Constant 1>
		push_reg:20 == 3365 <add Register a, Register a, Register b>
		push_reg:21 == 3366 <ldc Register b, Constant 0>
		push_reg:22 == 3367 <stb Register b, Register a>
pong.pa2:342 == 3368 <@push_const Constant 64>
	push_const:6 == 3368 <.define constantToPush Constant 64>
	push_const:12 == 3368 <@ldc Register b, Constant 64>
		ldc:1 == 3368 <.define writeReg Register b>
		ldc:2 == 3368 <.define const Constant 64>
		ldc:4 == 3368 <ldc Register a, Constant 0>
		ldc:5 == 3369 <ldc Register b, Constant 12>
		ldc:6 == 3370 <shl Register a, Register a, Register b>
		ldc:7 == 3371 <ldc Register b, Constant 64>
		ldc:8 == 3372 <or Register b, Register a, Register b>
	push_const:14 == 3373 <@push_reg Register b>
		push_reg:10 == 3373 <.define registerToPush Register b>
		push_reg:13 == 3373 <ldc Register a, Constant 0>
		push_reg:14 == 3374 <ldb Register a, Register a>
		push_reg:15 == 3375 <stb Register a, Register b>
		push_reg:19 == 3376 <ldc Register b, Constant 1>
		push_reg:20 == 3377 <add Register a, Register a, Register b>
		push_reg:21 == 3378 <ldc Register b, Constant 0>
		push_reg:22 == 3379 <stb Register b, Register a>
pong.pa2:343 == 3380 <@mul >
	mul:3 == 3380 <.define lhs Register c>
	mul:4 == 3380 <.define rhs Register d>
	mul:5 == 3380 <.define result Register d>
	mul:7 == 3380 <@pop_reg Register d>
		pop_reg:10 == 3380 <.define registerToLoad Register d>
		pop_reg:13 == 3380 <ldc Register a, Constant 0>
		pop_reg:14 == 3381 <ldb Register a, Register a>
		pop_reg:15 == 3382 <ldc Register b, Constant 1>
		pop_reg:16 == 3383 <sub Register a, Register a, Register b>
		pop_reg:17 == 3384 <ldc Register b, Constant 0>
		pop_reg:18 == 3385 <stb Register b, Register a>
		pop_reg:22 == 3386 <ldb Register a, Register d>
	mul:8 == 3387 <@pop_reg Register c>
		pop_reg:10 == 3387 <.define registerToLoad Register c>
		pop_reg:13 == 3387 <ldc Register a, Constant 0>
		pop_reg:14 == 3388 <ldb Register a, Register a>
		pop_reg:15 == 3389 <ldc Register b, Constant 1>
		pop_reg:16 == 3390 <sub Register a, Register a, Register b>
		pop_reg:17 == 3391 <ldc Register b, Constant 0>
		pop_reg:18 == 3392 <stb Register b, Register a>
		pop_reg:22 == 3393 <ldb Register a, Register c>
	mul:9 == 3394 <mul Register d, Register c, Register d>
	mul:10 == 3395 <@push_reg Register d>
		push_reg:10 == 3395 <.define registerToPush Register d>
		push_reg:13 == 3395 <ldc Register a, Constant 0>
		push_reg:14 == 3396 <ldb Register a, Register a>
		push_reg:15 == 3397 <stb Register a, Register d>
		push_reg:19 == 3398 <ldc Register b, Constant 1>
		push_reg:20 == 3399 <add Register a, Register a, Register b>
		push_reg:21 == 3400 <ldc Register b, Constant 0>
		push_reg:22 == 3401 <stb Register b, Register a>
pong.pa2:344 == 3402 <@add >
	add:3 == 3402 <.define lhs Register c>
	add:4 == 3402 <.define rhs Register d>
	add:5 == 3402 <.define result Register d>
	add:7 == 3402 <@pop_reg Register d>
		pop_reg:10 == 3402 <.define registerToLoad Register d>
		pop_reg:13 == 3402 <ldc Register a, Constant 0>
		pop_reg:14 == 3403 <ldb Register a, Register a>
		pop_reg:15 == 3404 <ldc Register b, Constant 1>
		pop_reg:16 == 3405 <sub Register a, Register a, Register b>
		pop_reg:17 == 3406 <ldc Register b, Constant 0>
		pop_reg:18 == 3407 <stb Register b, Register a>
		pop_reg:22 == 3408 <ldb Register a, Register d>
	add:8 == 3409 <@pop_reg Register c>
		pop_reg:10 == 3409 <.define registerToLoad Register c>
		pop_reg:13 == 3409 <ldc Register a, Constant 0>
		pop_reg:14 == 3410 <ldb Register a, Register a>
		pop_reg:15 == 3411 <ldc Register b, Constant 1>
		pop_reg:16 == 3412 <sub Register a, Register a, Register b>
		pop_reg:17 == 3413 <ldc Register b, Constant 0>
		pop_reg:18 == 3414 <stb Register b, Register a>
		pop_reg:22 == 3415 <ldb Register a, Register c>
	add:9 == 3416 <add Register d, Register c, Register d>
	add:10 == 3417 <@push_reg Register d>
		push_reg:10 == 3417 <.define registerToPush Register d>
		push_reg:13 == 3417 <ldc Register a, Constant 0>
		push_reg:14 == 3418 <ldb Register a, Register a>
		push_reg:15 == 3419 <stb Register a, Register d>
		push_reg:19 == 3420 <ldc Register b, Constant 1>
		push_reg:20 == 3421 <add Register a, Register a, Register b>
		push_reg:21 == 3422 <ldc Register b, Constant 0>
		push_reg:22 == 3423 <stb Register b, Register a>
pong.pa2:345 == 3424 <@push_arg Constant 0>
	push_arg:3 == 3424 <.define slot Constant 0>
	push_arg:6 == 3424 <ldc Register a, Constant 2>
	push_arg:7 == 3425 <ldb Register a, Register a>
	push_arg:8 == 3426 <ldc Register b, Constant 0>
	push_arg:9 == 3427 <add Register a, Register a, Register b>
	push_arg:10 == 3428 <ldb Register a, Register b>
	push_arg:12 == 3429 <@push_reg Register b>
		push_reg:10 == 3429 <.define registerToPush Register b>
		push_reg:13 == 3429 <ldc Register a, Constant 0>
		push_reg:14 == 3430 <ldb Register a, Register a>
		push_reg:15 == 3431 <stb Register a, Register b>
		push_reg:19 == 3432 <ldc Register b, Constant 1>
		push_reg:20 == 3433 <add Register a, Register a, Register b>
		push_reg:21 == 3434 <ldc Register b, Constant 0>
		push_reg:22 == 3435 <stb Register b, Register a>
pong.pa2:346 == 3436 <@add >
	add:3 == 3436 <.define lhs Register c>
	add:4 == 3436 <.define rhs Register d>
	add:5 == 3436 <.define result Register d>
	add:7 == 3436 <@pop_reg Register d>
		pop_reg:10 == 3436 <.define registerToLoad Register d>
		pop_reg:13 == 3436 <ldc Register a, Constant 0>
		pop_reg:14 == 3437 <ldb Register a, Register a>
		pop_reg:15 == 3438 <ldc Register b, Constant 1>
		pop_reg:16 == 3439 <sub Register a, Register a, Register b>
		pop_reg:17 == 3440 <ldc Register b, Constant 0>
		pop_reg:18 == 3441 <stb Register b, Register a>
		pop_reg:22 == 3442 <ldb Register a, Register d>
	add:8 == 3443 <@pop_reg Register c>
		pop_reg:10 == 3443 <.define registerToLoad Register c>
		pop_reg:13 == 3443 <ldc Register a, Constant 0>
		pop_reg:14 == 3444 <ldb Register a, Register a>
		pop_reg:15 == 3445 <ldc Register b, Constant 1>
		pop_reg:16 == 3446 <sub Register a, Register a, Register b>
		pop_reg:17 == 3447 <ldc Register b, Constant 0>
		pop_reg:18 == 3448 <stb Register b, Register a>
		pop_reg:22 == 3449 <ldb Register a, Register c>
	add:9 == 3450 <add Register d, Register c, Register d>
	add:10 == 3451 <@push_reg Register d>
		push_reg:10 == 3451 <.define registerToPush Register d>
		push_reg:13 == 3451 <ldc Register a, Constant 0>
		push_reg:14 == 3452 <ldb Register a, Register a>
		push_reg:15 == 3453 <stb Register a, Register d>
		push_reg:19 == 3454 <ldc Register b, Constant 1>
		push_reg:20 == 3455 <add Register a, Register a, Register b>
		push_reg:21 == 3456 <ldc Register b, Constant 0>
		push_reg:22 == 3457 <stb Register b, Register a>
pong.pa2:347 == 3458 <@pop_local Constant 0>
	pop_local:6 == 3458 <.define slot Constant 0>
	pop_local:8 == 3458 <@pop_reg Register a>
		pop_reg:10 == 3458 <.define registerToLoad Register a>
		pop_reg:13 == 3458 <ldc Register a, Constant 0>
		pop_reg:14 == 3459 <ldb Register a, Register a>
		pop_reg:15 == 3460 <ldc Register b, Constant 1>
		pop_reg:16 == 3461 <sub Register a, Register a, Register b>
		pop_reg:17 == 3462 <ldc Register b, Constant 0>
		pop_reg:18 == 3463 <stb Register b, Register a>
		pop_reg:22 == 3464 <ldb Register a, Register a>
	pop_local:13 == 3465 <ldc Register c, Constant 3>
	pop_local:14 == 3466 <ldb Register c, Register c>
	pop_local:17 == 3467 <ldc Register b, Constant 0>
	pop_local:18 == 3468 <add Register b, Register b, Register c>
	pop_local:21 == 3469 <stb Register b, Register a>
pong.pa2:350 == 3470 <@push_local Constant 0>
	push_local:3 == 3470 <.define slot Constant 0>
	push_local:6 == 3470 <ldc Register a, Constant 3>
	push_local:7 == 3471 <ldb Register a, Register a>
	push_local:8 == 3472 <ldc Register b, Constant 0>
	push_local:9 == 3473 <add Register a, Register a, Register b>
	push_local:10 == 3474 <ldb Register a, Register b>
	push_local:12 == 3475 <@push_reg Register b>
		push_reg:10 == 3475 <.define registerToPush Register b>
		push_reg:13 == 3475 <ldc Register a, Constant 0>
		push_reg:14 == 3476 <ldb Register a, Register a>
		push_reg:15 == 3477 <stb Register a, Register b>
		push_reg:19 == 3478 <ldc Register b, Constant 1>
		push_reg:20 == 3479 <add Register a, Register a, Register b>
		push_reg:21 == 3480 <ldc Register b, Constant 0>
		push_reg:22 == 3481 <stb Register b, Register a>
pong.pa2:351 == 3482 <@push_arg Constant 2>
	push_arg:3 == 3482 <.define slot Constant 2>
	push_arg:6 == 3482 <ldc Register a, Constant 2>
	push_arg:7 == 3483 <ldb Register a, Register a>
	push_arg:8 == 3484 <ldc Register b, Constant 2>
	push_arg:9 == 3485 <add Register a, Register a, Register b>
	push_arg:10 == 3486 <ldb Register a, Register b>
	push_arg:12 == 3487 <@push_reg Register b>
		push_reg:10 == 3487 <.define registerToPush Register b>
		push_reg:13 == 3487 <ldc Register a, Constant 0>
		push_reg:14 == 3488 <ldb Register a, Register a>
		push_reg:15 == 3489 <stb Register a, Register b>
		push_reg:19 == 3490 <ldc Register b, Constant 1>
		push_reg:20 == 3491 <add Register a, Register a, Register b>
		push_reg:21 == 3492 <ldc Register b, Constant 0>
		push_reg:22 == 3493 <stb Register b, Register a>
pong.pa2:352 == 3494 <@push_const Constant 64>
	push_const:6 == 3494 <.define constantToPush Constant 64>
	push_const:12 == 3494 <@ldc Register b, Constant 64>
		ldc:1 == 3494 <.define writeReg Register b>
		ldc:2 == 3494 <.define const Constant 64>
		ldc:4 == 3494 <ldc Register a, Constant 0>
		ldc:5 == 3495 <ldc Register b, Constant 12>
		ldc:6 == 3496 <shl Register a, Register a, Register b>
		ldc:7 == 3497 <ldc Register b, Constant 64>
		ldc:8 == 3498 <or Register b, Register a, Register b>
	push_const:14 == 3499 <@push_reg Register b>
		push_reg:10 == 3499 <.define registerToPush Register b>
		push_reg:13 == 3499 <ldc Register a, Constant 0>
		push_reg:14 == 3500 <ldb Register a, Register a>
		push_reg:15 == 3501 <stb Register a, Register b>
		push_reg:19 == 3502 <ldc Register b, Constant 1>
		push_reg:20 == 3503 <add Register a, Register a, Register b>
		push_reg:21 == 3504 <ldc Register b, Constant 0>
		push_reg:22 == 3505 <stb Register b, Register a>
pong.pa2:353 == 3506 <@mul >
	mul:3 == 3506 <.define lhs Register c>
	mul:4 == 3506 <.define rhs Register d>
	mul:5 == 3506 <.define result Register d>
	mul:7 == 3506 <@pop_reg Register d>
		pop_reg:10 == 3506 <.define registerToLoad Register d>
		pop_reg:13 == 3506 <ldc Register a, Constant 0>
		pop_reg:14 == 3507 <ldb Register a, Register a>
		pop_reg:15 == 3508 <ldc Register b, Constant 1>
		pop_reg:16 == 3509 <sub Register a, Register a, Register b>
		pop_reg:17 == 3510 <ldc Register b, Constant 0>
		pop_reg:18 == 3511 <stb Register b, Register a>
		pop_reg:22 == 3512 <ldb Register a, Register d>
	mul:8 == 3513 <@pop_reg Register c>
		pop_reg:10 == 3513 <.define registerToLoad Register c>
		pop_reg:13 == 3513 <ldc Register a, Constant 0>
		pop_reg:14 == 3514 <ldb Register a, Register a>
		pop_reg:15 == 3515 <ldc Register b, Constant 1>
		pop_reg:16 == 3516 <sub Register a, Register a, Register b>
		pop_reg:17 == 3517 <ldc Register b, Constant 0>
		pop_reg:18 == 3518 <stb Register b, Register a>
		pop_reg:22 == 3519 <ldb Register a, Register c>
	mul:9 == 3520 <mul Register d, Register c, Register d>
	mul:10 == 3521 <@push_reg Register d>
		push_reg:10 == 3521 <.define registerToPush Register d>
		push_reg:13 == 3521 <ldc Register a, Constant 0>
		push_reg:14 == 3522 <ldb Register a, Register a>
		push_reg:15 == 3523 <stb Register a, Register d>
		push_reg:19 == 3524 <ldc Register b, Constant 1>
		push_reg:20 == 3525 <add Register a, Register a, Register b>
		push_reg:21 == 3526 <ldc Register b, Constant 0>
		push_reg:22 == 3527 <stb Register b, Register a>
pong.pa2:354 == 3528 <@add >
	add:3 == 3528 <.define lhs Register c>
	add:4 == 3528 <.define rhs Register d>
	add:5 == 3528 <.define result Register d>
	add:7 == 3528 <@pop_reg Register d>
		pop_reg:10 == 3528 <.define registerToLoad Register d>
		pop_reg:13 == 3528 <ldc Register a, Constant 0>
		pop_reg:14 == 3529 <ldb Register a, Register a>
		pop_reg:15 == 3530 <ldc Register b, Constant 1>
		pop_reg:16 == 3531 <sub Register a, Register a, Register b>
		pop_reg:17 == 3532 <ldc Register b, Constant 0>
		pop_reg:18 == 3533 <stb Register b, Register a>
		pop_reg:22 == 3534 <ldb Register a, Register d>
	add:8 == 3535 <@pop_reg Register c>
		pop_reg:10 == 3535 <.define registerToLoad Register c>
		pop_reg:13 == 3535 <ldc Register a, Constant 0>
		pop_reg:14 == 3536 <ldb Register a, Register a>
		pop_reg:15 == 3537 <ldc Register b, Constant 1>
		pop_reg:16 == 3538 <sub Register a, Register a, Register b>
		pop_reg:17 == 3539 <ldc Register b, Constant 0>
		pop_reg:18 == 3540 <stb Register b, Register a>
		pop_reg:22 == 3541 <ldb Register a, Register c>
	add:9 == 3542 <add Register d, Register c, Register d>
	add:10 == 3543 <@push_reg Register d>
		push_reg:10 == 3543 <.define registerToPush Register d>
		push_reg:13 == 3543 <ldc Register a, Constant 0>
		push_reg:14 == 3544 <ldb Register a, Register a>
		push_reg:15 == 3545 <stb Register a, Register d>
		push_reg:19 == 3546 <ldc Register b, Constant 1>
		push_reg:20 == 3547 <add Register a, Register a, Register b>
		push_reg:21 == 3548 <ldc Register b, Constant 0>
		push_reg:22 == 3549 <stb Register b, Register a>
pong.pa2:355 == 3550 <@pop_local Constant 1>
	pop_local:6 == 3550 <.define slot Constant 1>
	pop_local:8 == 3550 <@pop_reg Register a>
		pop_reg:10 == 3550 <.define registerToLoad Register a>
		pop_reg:13 == 3550 <ldc Register a, Constant 0>
		pop_reg:14 == 3551 <ldb Register a, Register a>
		pop_reg:15 == 3552 <ldc Register b, Constant 1>
		pop_reg:16 == 3553 <sub Register a, Register a, Register b>
		pop_reg:17 == 3554 <ldc Register b, Constant 0>
		pop_reg:18 == 3555 <stb Register b, Register a>
		pop_reg:22 == 3556 <ldb Register a, Register a>
	pop_local:13 == 3557 <ldc Register c, Constant 3>
	pop_local:14 == 3558 <ldb Register c, Register c>
	pop_local:17 == 3559 <ldc Register b, Constant 1>
	pop_local:18 == 3560 <add Register b, Register b, Register c>
	pop_local:21 == 3561 <stb Register b, Register a>
pong.pa2:367 == 3562 <@push_arg Constant 3>
	push_arg:3 == 3562 <.define slot Constant 3>
	push_arg:6 == 3562 <ldc Register a, Constant 2>
	push_arg:7 == 3563 <ldb Register a, Register a>
	push_arg:8 == 3564 <ldc Register b, Constant 3>
	push_arg:9 == 3565 <add Register a, Register a, Register b>
	push_arg:10 == 3566 <ldb Register a, Register b>
	push_arg:12 == 3567 <@push_reg Register b>
		push_reg:10 == 3567 <.define registerToPush Register b>
		push_reg:13 == 3567 <ldc Register a, Constant 0>
		push_reg:14 == 3568 <ldb Register a, Register a>
		push_reg:15 == 3569 <stb Register a, Register b>
		push_reg:19 == 3570 <ldc Register b, Constant 1>
		push_reg:20 == 3571 <add Register a, Register a, Register b>
		push_reg:21 == 3572 <ldc Register b, Constant 0>
		push_reg:22 == 3573 <stb Register b, Register a>
pong.pa2:369 == 3574 <@push_local Constant 0>
	push_local:3 == 3574 <.define slot Constant 0>
	push_local:6 == 3574 <ldc Register a, Constant 3>
	push_local:7 == 3575 <ldb Register a, Register a>
	push_local:8 == 3576 <ldc Register b, Constant 0>
	push_local:9 == 3577 <add Register a, Register a, Register b>
	push_local:10 == 3578 <ldb Register a, Register b>
	push_local:12 == 3579 <@push_reg Register b>
		push_reg:10 == 3579 <.define registerToPush Register b>
		push_reg:13 == 3579 <ldc Register a, Constant 0>
		push_reg:14 == 3580 <ldb Register a, Register a>
		push_reg:15 == 3581 <stb Register a, Register b>
		push_reg:19 == 3582 <ldc Register b, Constant 1>
		push_reg:20 == 3583 <add Register a, Register a, Register b>
		push_reg:21 == 3584 <ldc Register b, Constant 0>
		push_reg:22 == 3585 <stb Register b, Register a>
pong.pa2:370 == 3586 <@pop_mem_av >
	pop_mem_av:4 == 3586 <.define addr Register c>
	pop_mem_av:5 == 3586 <.define val Register a>
	pop_mem_av:7 == 3586 <@pop_reg Register c>
		pop_reg:10 == 3586 <.define registerToLoad Register c>
		pop_reg:13 == 3586 <ldc Register a, Constant 0>
		pop_reg:14 == 3587 <ldb Register a, Register a>
		pop_reg:15 == 3588 <ldc Register b, Constant 1>
		pop_reg:16 == 3589 <sub Register a, Register a, Register b>
		pop_reg:17 == 3590 <ldc Register b, Constant 0>
		pop_reg:18 == 3591 <stb Register b, Register a>
		pop_reg:22 == 3592 <ldb Register a, Register c>
	pop_mem_av:8 == 3593 <@pop_reg Register a>
		pop_reg:10 == 3593 <.define registerToLoad Register a>
		pop_reg:13 == 3593 <ldc Register a, Constant 0>
		pop_reg:14 == 3594 <ldb Register a, Register a>
		pop_reg:15 == 3595 <ldc Register b, Constant 1>
		pop_reg:16 == 3596 <sub Register a, Register a, Register b>
		pop_reg:17 == 3597 <ldc Register b, Constant 0>
		pop_reg:18 == 3598 <stb Register b, Register a>
		pop_reg:22 == 3599 <ldb Register a, Register a>
	pop_mem_av:10 == 3600 <stb Register c, Register a>
pong.pa2:372 == 3601 <@push_local Constant 0>
	push_local:3 == 3601 <.define slot Constant 0>
	push_local:6 == 3601 <ldc Register a, Constant 3>
	push_local:7 == 3602 <ldb Register a, Register a>
	push_local:8 == 3603 <ldc Register b, Constant 0>
	push_local:9 == 3604 <add Register a, Register a, Register b>
	push_local:10 == 3605 <ldb Register a, Register b>
	push_local:12 == 3606 <@push_reg Register b>
		push_reg:10 == 3606 <.define registerToPush Register b>
		push_reg:13 == 3606 <ldc Register a, Constant 0>
		push_reg:14 == 3607 <ldb Register a, Register a>
		push_reg:15 == 3608 <stb Register a, Register b>
		push_reg:19 == 3609 <ldc Register b, Constant 1>
		push_reg:20 == 3610 <add Register a, Register a, Register b>
		push_reg:21 == 3611 <ldc Register b, Constant 0>
		push_reg:22 == 3612 <stb Register b, Register a>
pong.pa2:373 == 3613 <@push_const Constant 64>
	push_const:6 == 3613 <.define constantToPush Constant 64>
	push_const:12 == 3613 <@ldc Register b, Constant 64>
		ldc:1 == 3613 <.define writeReg Register b>
		ldc:2 == 3613 <.define const Constant 64>
		ldc:4 == 3613 <ldc Register a, Constant 0>
		ldc:5 == 3614 <ldc Register b, Constant 12>
		ldc:6 == 3615 <shl Register a, Register a, Register b>
		ldc:7 == 3616 <ldc Register b, Constant 64>
		ldc:8 == 3617 <or Register b, Register a, Register b>
	push_const:14 == 3618 <@push_reg Register b>
		push_reg:10 == 3618 <.define registerToPush Register b>
		push_reg:13 == 3618 <ldc Register a, Constant 0>
		push_reg:14 == 3619 <ldb Register a, Register a>
		push_reg:15 == 3620 <stb Register a, Register b>
		push_reg:19 == 3621 <ldc Register b, Constant 1>
		push_reg:20 == 3622 <add Register a, Register a, Register b>
		push_reg:21 == 3623 <ldc Register b, Constant 0>
		push_reg:22 == 3624 <stb Register b, Register a>
pong.pa2:374 == 3625 <@add >
	add:3 == 3625 <.define lhs Register c>
	add:4 == 3625 <.define rhs Register d>
	add:5 == 3625 <.define result Register d>
	add:7 == 3625 <@pop_reg Register d>
		pop_reg:10 == 3625 <.define registerToLoad Register d>
		pop_reg:13 == 3625 <ldc Register a, Constant 0>
		pop_reg:14 == 3626 <ldb Register a, Register a>
		pop_reg:15 == 3627 <ldc Register b, Constant 1>
		pop_reg:16 == 3628 <sub Register a, Register a, Register b>
		pop_reg:17 == 3629 <ldc Register b, Constant 0>
		pop_reg:18 == 3630 <stb Register b, Register a>
		pop_reg:22 == 3631 <ldb Register a, Register d>
	add:8 == 3632 <@pop_reg Register c>
		pop_reg:10 == 3632 <.define registerToLoad Register c>
		pop_reg:13 == 3632 <ldc Register a, Constant 0>
		pop_reg:14 == 3633 <ldb Register a, Register a>
		pop_reg:15 == 3634 <ldc Register b, Constant 1>
		pop_reg:16 == 3635 <sub Register a, Register a, Register b>
		pop_reg:17 == 3636 <ldc Register b, Constant 0>
		pop_reg:18 == 3637 <stb Register b, Register a>
		pop_reg:22 == 3638 <ldb Register a, Register c>
	add:9 == 3639 <add Register d, Register c, Register d>
	add:10 == 3640 <@push_reg Register d>
		push_reg:10 == 3640 <.define registerToPush Register d>
		push_reg:13 == 3640 <ldc Register a, Constant 0>
		push_reg:14 == 3641 <ldb Register a, Register a>
		push_reg:15 == 3642 <stb Register a, Register d>
		push_reg:19 == 3643 <ldc Register b, Constant 1>
		push_reg:20 == 3644 <add Register a, Register a, Register b>
		push_reg:21 == 3645 <ldc Register b, Constant 0>
		push_reg:22 == 3646 <stb Register b, Register a>
pong.pa2:375 == 3647 <@pop_local Constant 0>
	pop_local:6 == 3647 <.define slot Constant 0>
	pop_local:8 == 3647 <@pop_reg Register a>
		pop_reg:10 == 3647 <.define registerToLoad Register a>
		pop_reg:13 == 3647 <ldc Register a, Constant 0>
		pop_reg:14 == 3648 <ldb Register a, Register a>
		pop_reg:15 == 3649 <ldc Register b, Constant 1>
		pop_reg:16 == 3650 <sub Register a, Register a, Register b>
		pop_reg:17 == 3651 <ldc Register b, Constant 0>
		pop_reg:18 == 3652 <stb Register b, Register a>
		pop_reg:22 == 3653 <ldb Register a, Register a>
	pop_local:13 == 3654 <ldc Register c, Constant 3>
	pop_local:14 == 3655 <ldb Register c, Register c>
	pop_local:17 == 3656 <ldc Register b, Constant 0>
	pop_local:18 == 3657 <add Register b, Register b, Register c>
	pop_local:21 == 3658 <stb Register b, Register a>
pong.pa2:377 == 3659 <@push_local Constant 0>
	push_local:3 == 3659 <.define slot Constant 0>
	push_local:6 == 3659 <ldc Register a, Constant 3>
	push_local:7 == 3660 <ldb Register a, Register a>
	push_local:8 == 3661 <ldc Register b, Constant 0>
	push_local:9 == 3662 <add Register a, Register a, Register b>
	push_local:10 == 3663 <ldb Register a, Register b>
	push_local:12 == 3664 <@push_reg Register b>
		push_reg:10 == 3664 <.define registerToPush Register b>
		push_reg:13 == 3664 <ldc Register a, Constant 0>
		push_reg:14 == 3665 <ldb Register a, Register a>
		push_reg:15 == 3666 <stb Register a, Register b>
		push_reg:19 == 3667 <ldc Register b, Constant 1>
		push_reg:20 == 3668 <add Register a, Register a, Register b>
		push_reg:21 == 3669 <ldc Register b, Constant 0>
		push_reg:22 == 3670 <stb Register b, Register a>
pong.pa2:378 == 3671 <@push_local Constant 1>
	push_local:3 == 3671 <.define slot Constant 1>
	push_local:6 == 3671 <ldc Register a, Constant 3>
	push_local:7 == 3672 <ldb Register a, Register a>
	push_local:8 == 3673 <ldc Register b, Constant 1>
	push_local:9 == 3674 <add Register a, Register a, Register b>
	push_local:10 == 3675 <ldb Register a, Register b>
	push_local:12 == 3676 <@push_reg Register b>
		push_reg:10 == 3676 <.define registerToPush Register b>
		push_reg:13 == 3676 <ldc Register a, Constant 0>
		push_reg:14 == 3677 <ldb Register a, Register a>
		push_reg:15 == 3678 <stb Register a, Register b>
		push_reg:19 == 3679 <ldc Register b, Constant 1>
		push_reg:20 == 3680 <add Register a, Register a, Register b>
		push_reg:21 == 3681 <ldc Register b, Constant 0>
		push_reg:22 == 3682 <stb Register b, Register a>
pong.pa2:380 == 3683 <@pop_reg Register d>
	pop_reg:10 == 3683 <.define registerToLoad Register d>
	pop_reg:13 == 3683 <ldc Register a, Constant 0>
	pop_reg:14 == 3684 <ldb Register a, Register a>
	pop_reg:15 == 3685 <ldc Register b, Constant 1>
	pop_reg:16 == 3686 <sub Register a, Register a, Register b>
	pop_reg:17 == 3687 <ldc Register b, Constant 0>
	pop_reg:18 == 3688 <stb Register b, Register a>
	pop_reg:22 == 3689 <ldb Register a, Register d>
pong.pa2:381 == 3690 <@pop_reg Register c>
	pop_reg:10 == 3690 <.define registerToLoad Register c>
	pop_reg:13 == 3690 <ldc Register a, Constant 0>
	pop_reg:14 == 3691 <ldb Register a, Register a>
	pop_reg:15 == 3692 <ldc Register b, Constant 1>
	pop_reg:16 == 3693 <sub Register a, Register a, Register b>
	pop_reg:17 == 3694 <ldc Register b, Constant 0>
	pop_reg:18 == 3695 <stb Register b, Register a>
	pop_reg:22 == 3696 <ldb Register a, Register c>
pong.pa2:382 == 3697 <@ldc Register b, Constant 3562>
	ldc:1 == 3697 <.define writeReg Register b>
	ldc:2 == 3697 <.define const Constant 3562>
	ldc:4 == 3697 <ldc Register a, Constant 0>
	ldc:5 == 3698 <ldc Register b, Constant 12>
	ldc:6 == 3699 <shl Register a, Register a, Register b>
	ldc:7 == 3700 <ldc Register b, Constant 3562>
	ldc:8 == 3701 <or Register b, Register a, Register b>
pong.pa2:383 == 3702 <jlt Register b, Register c, Register d>
pong.pa2:385 == 3703 <@return >
	return:2 == 3703 <ldc Register b, Constant 3>
	return:3 == 3704 <ldb Register b, Register b>
	return:4 == 3705 <ldc Register a, Constant 0>
	return:5 == 3706 <stb Register a, Register b>
	return:7 == 3707 <@pop_reg Register d>
		pop_reg:10 == 3707 <.define registerToLoad Register d>
		pop_reg:13 == 3707 <ldc Register a, Constant 0>
		pop_reg:14 == 3708 <ldb Register a, Register a>
		pop_reg:15 == 3709 <ldc Register b, Constant 1>
		pop_reg:16 == 3710 <sub Register a, Register a, Register b>
		pop_reg:17 == 3711 <ldc Register b, Constant 0>
		pop_reg:18 == 3712 <stb Register b, Register a>
		pop_reg:22 == 3713 <ldb Register a, Register d>
	return:9 == 3714 <jump Register d>
pong.pa2:392 == 3715 <@function Constant 0>
	function:19 == 3715 <.define loccount Constant 0>
	function:22 == 3715 <ldc Register a, Constant 0>
	function:23 == 3716 <ldb Register a, Register a>
	function:24 == 3717 <ldc Register b, Constant 3>
	function:25 == 3718 <stb Register b, Register a>
	function:28 == 3719 <ldc Register a, Constant 0>
	function:29 == 3720 <ldb Register a, Register b>
	function:30 == 3721 <ldc Register c, Constant 0>
	function:31 == 3722 <add Register b, Register b, Register c>
	function:32 == 3723 <stb Register a, Register b>
pong.pa2:396 == 3724 <@call_value Constant 4046, Constant 0>
	call_value:1 == 3724 <@call Constant 4046, Constant 0>
		call:11 == 3724 <.define functionLabel Constant 4046>
		call:12 == 3724 <.define argcount Constant 0>
		call:15 == 3724 <@push_mem Constant 2>
			push_mem:6 == 3724 <.define addr Register b>
			push_mem:7 == 3724 <.define value Register b>
			push_mem:9 == 3724 <@ldc Register b, Constant 2>
				ldc:1 == 3724 <.define writeReg Register b>
				ldc:2 == 3724 <.define const Constant 2>
				ldc:4 == 3724 <ldc Register a, Constant 0>
				ldc:5 == 3725 <ldc Register b, Constant 12>
				ldc:6 == 3726 <shl Register a, Register a, Register b>
				ldc:7 == 3727 <ldc Register b, Constant 2>
				ldc:8 == 3728 <or Register b, Register a, Register b>
			push_mem:10 == 3729 <ldb Register b, Register b>
			push_mem:12 == 3730 <@push_reg Register b>
				push_reg:10 == 3730 <.define registerToPush Register b>
				push_reg:13 == 3730 <ldc Register a, Constant 0>
				push_reg:14 == 3731 <ldb Register a, Register a>
				push_reg:15 == 3732 <stb Register a, Register b>
				push_reg:19 == 3733 <ldc Register b, Constant 1>
				push_reg:20 == 3734 <add Register a, Register a, Register b>
				push_reg:21 == 3735 <ldc Register b, Constant 0>
				push_reg:22 == 3736 <stb Register b, Register a>
		call:16 == 3737 <@push_mem Constant 3>
			push_mem:6 == 3737 <.define addr Register b>
			push_mem:7 == 3737 <.define value Register b>
			push_mem:9 == 3737 <@ldc Register b, Constant 3>
				ldc:1 == 3737 <.define writeReg Register b>
				ldc:2 == 3737 <.define const Constant 3>
				ldc:4 == 3737 <ldc Register a, Constant 0>
				ldc:5 == 3738 <ldc Register b, Constant 12>
				ldc:6 == 3739 <shl Register a, Register a, Register b>
				ldc:7 == 3740 <ldc Register b, Constant 3>
				ldc:8 == 3741 <or Register b, Register a, Register b>
			push_mem:10 == 3742 <ldb Register b, Register b>
			push_mem:12 == 3743 <@push_reg Register b>
				push_reg:10 == 3743 <.define registerToPush Register b>
				push_reg:13 == 3743 <ldc Register a, Constant 0>
				push_reg:14 == 3744 <ldb Register a, Register a>
				push_reg:15 == 3745 <stb Register a, Register b>
				push_reg:19 == 3746 <ldc Register b, Constant 1>
				push_reg:20 == 3747 <add Register a, Register a, Register b>
				push_reg:21 == 3748 <ldc Register b, Constant 0>
				push_reg:22 == 3749 <stb Register b, Register a>
		call:19 == 3750 <@push_const Constant 3862>
			push_const:6 == 3750 <.define constantToPush Constant 3862>
			push_const:12 == 3750 <@ldc Register b, Constant 3862>
				ldc:1 == 3750 <.define writeReg Register b>
				ldc:2 == 3750 <.define const Constant 3862>
				ldc:4 == 3750 <ldc Register a, Constant 0>
				ldc:5 == 3751 <ldc Register b, Constant 12>
				ldc:6 == 3752 <shl Register a, Register a, Register b>
				ldc:7 == 3753 <ldc Register b, Constant 3862>
				ldc:8 == 3754 <or Register b, Register a, Register b>
			push_const:14 == 3755 <@push_reg Register b>
				push_reg:10 == 3755 <.define registerToPush Register b>
				push_reg:13 == 3755 <ldc Register a, Constant 0>
				push_reg:14 == 3756 <ldb Register a, Register a>
				push_reg:15 == 3757 <stb Register a, Register b>
				push_reg:19 == 3758 <ldc Register b, Constant 1>
				push_reg:20 == 3759 <add Register a, Register a, Register b>
				push_reg:21 == 3760 <ldc Register b, Constant 0>
				push_reg:22 == 3761 <stb Register b, Register a>
		call:24 == 3762 <@push_mem Constant 0>
			push_mem:6 == 3762 <.define addr Register b>
			push_mem:7 == 3762 <.define value Register b>
			push_mem:9 == 3762 <@ldc Register b, Constant 0>
				ldc:1 == 3762 <.define writeReg Register b>
				ldc:2 == 3762 <.define const Constant 0>
				ldc:4 == 3762 <ldc Register a, Constant 0>
				ldc:5 == 3763 <ldc Register b, Constant 12>
				ldc:6 == 3764 <shl Register a, Register a, Register b>
				ldc:7 == 3765 <ldc Register b, Constant 0>
				ldc:8 == 3766 <or Register b, Register a, Register b>
			push_mem:10 == 3767 <ldb Register b, Register b>
			push_mem:12 == 3768 <@push_reg Register b>
				push_reg:10 == 3768 <.define registerToPush Register b>
				push_reg:13 == 3768 <ldc Register a, Constant 0>
				push_reg:14 == 3769 <ldb Register a, Register a>
				push_reg:15 == 3770 <stb Register a, Register b>
				push_reg:19 == 3771 <ldc Register b, Constant 1>
				push_reg:20 == 3772 <add Register a, Register a, Register b>
				push_reg:21 == 3773 <ldc Register b, Constant 0>
				push_reg:22 == 3774 <stb Register b, Register a>
		call:26 == 3775 <@push_const Constant 3>
			push_const:6 == 3775 <.define constantToPush Constant 3>
			push_const:12 == 3775 <@ldc Register b, Constant 3>
				ldc:1 == 3775 <.define writeReg Register b>
				ldc:2 == 3775 <.define const Constant 3>
				ldc:4 == 3775 <ldc Register a, Constant 0>
				ldc:5 == 3776 <ldc Register b, Constant 12>
				ldc:6 == 3777 <shl Register a, Register a, Register b>
				ldc:7 == 3778 <ldc Register b, Constant 3>
				ldc:8 == 3779 <or Register b, Register a, Register b>
			push_const:14 == 3780 <@push_reg Register b>
				push_reg:10 == 3780 <.define registerToPush Register b>
				push_reg:13 == 3780 <ldc Register a, Constant 0>
				push_reg:14 == 3781 <ldb Register a, Register a>
				push_reg:15 == 3782 <stb Register a, Register b>
				push_reg:19 == 3783 <ldc Register b, Constant 1>
				push_reg:20 == 3784 <add Register a, Register a, Register b>
				push_reg:21 == 3785 <ldc Register b, Constant 0>
				push_reg:22 == 3786 <stb Register b, Register a>
		call:27 == 3787 <@push_const Constant 0>
			push_const:6 == 3787 <.define constantToPush Constant 0>
			push_const:12 == 3787 <@ldc Register b, Constant 0>
				ldc:1 == 3787 <.define writeReg Register b>
				ldc:2 == 3787 <.define const Constant 0>
				ldc:4 == 3787 <ldc Register a, Constant 0>
				ldc:5 == 3788 <ldc Register b, Constant 12>
				ldc:6 == 3789 <shl Register a, Register a, Register b>
				ldc:7 == 3790 <ldc Register b, Constant 0>
				ldc:8 == 3791 <or Register b, Register a, Register b>
			push_const:14 == 3792 <@push_reg Register b>
				push_reg:10 == 3792 <.define registerToPush Register b>
				push_reg:13 == 3792 <ldc Register a, Constant 0>
				push_reg:14 == 3793 <ldb Register a, Register a>
				push_reg:15 == 3794 <stb Register a, Register b>
				push_reg:19 == 3795 <ldc Register b, Constant 1>
				push_reg:20 == 3796 <add Register a, Register a, Register b>
				push_reg:21 == 3797 <ldc Register b, Constant 0>
				push_reg:22 == 3798 <stb Register b, Register a>
		call:28 == 3799 <@add >
			add:3 == 3799 <.define lhs Register c>
			add:4 == 3799 <.define rhs Register d>
			add:5 == 3799 <.define result Register d>
			add:7 == 3799 <@pop_reg Register d>
				pop_reg:10 == 3799 <.define registerToLoad Register d>
				pop_reg:13 == 3799 <ldc Register a, Constant 0>
				pop_reg:14 == 3800 <ldb Register a, Register a>
				pop_reg:15 == 3801 <ldc Register b, Constant 1>
				pop_reg:16 == 3802 <sub Register a, Register a, Register b>
				pop_reg:17 == 3803 <ldc Register b, Constant 0>
				pop_reg:18 == 3804 <stb Register b, Register a>
				pop_reg:22 == 3805 <ldb Register a, Register d>
			add:8 == 3806 <@pop_reg Register c>
				pop_reg:10 == 3806 <.define registerToLoad Register c>
				pop_reg:13 == 3806 <ldc Register a, Constant 0>
				pop_reg:14 == 3807 <ldb Register a, Register a>
				pop_reg:15 == 3808 <ldc Register b, Constant 1>
				pop_reg:16 == 3809 <sub Register a, Register a, Register b>
				pop_reg:17 == 3810 <ldc Register b, Constant 0>
				pop_reg:18 == 3811 <stb Register b, Register a>
				pop_reg:22 == 3812 <ldb Register a, Register c>
			add:9 == 3813 <add Register d, Register c, Register d>
			add:10 == 3814 <@push_reg Register d>
				push_reg:10 == 3814 <.define registerToPush Register d>
				push_reg:13 == 3814 <ldc Register a, Constant 0>
				push_reg:14 == 3815 <ldb Register a, Register a>
				push_reg:15 == 3816 <stb Register a, Register d>
				push_reg:19 == 3817 <ldc Register b, Constant 1>
				push_reg:20 == 3818 <add Register a, Register a, Register b>
				push_reg:21 == 3819 <ldc Register b, Constant 0>
				push_reg:22 == 3820 <stb Register b, Register a>
		call:29 == 3821 <@sub >
			sub:3 == 3821 <.define lhs Register c>
			sub:4 == 3821 <.define rhs Register d>
			sub:5 == 3821 <.define result Register d>
			sub:7 == 3821 <@pop_reg Register d>
				pop_reg:10 == 3821 <.define registerToLoad Register d>
				pop_reg:13 == 3821 <ldc Register a, Constant 0>
				pop_reg:14 == 3822 <ldb Register a, Register a>
				pop_reg:15 == 3823 <ldc Register b, Constant 1>
				pop_reg:16 == 3824 <sub Register a, Register a, Register b>
				pop_reg:17 == 3825 <ldc Register b, Constant 0>
				pop_reg:18 == 3826 <stb Register b, Register a>
				pop_reg:22 == 3827 <ldb Register a, Register d>
			sub:8 == 3828 <@pop_reg Register c>
				pop_reg:10 == 3828 <.define registerToLoad Register c>
				pop_reg:13 == 3828 <ldc Register a, Constant 0>
				pop_reg:14 == 3829 <ldb Register a, Register a>
				pop_reg:15 == 3830 <ldc Register b, Constant 1>
				pop_reg:16 == 3831 <sub Register a, Register a, Register b>
				pop_reg:17 == 3832 <ldc Register b, Constant 0>
				pop_reg:18 == 3833 <stb Register b, Register a>
				pop_reg:22 == 3834 <ldb Register a, Register c>
			sub:9 == 3835 <sub Register d, Register c, Register d>
			sub:10 == 3836 <@push_reg Register d>
				push_reg:10 == 3836 <.define registerToPush Register d>
				push_reg:13 == 3836 <ldc Register a, Constant 0>
				push_reg:14 == 3837 <ldb Register a, Register a>
				push_reg:15 == 3838 <stb Register a, Register d>
				push_reg:19 == 3839 <ldc Register b, Constant 1>
				push_reg:20 == 3840 <add Register a, Register a, Register b>
				push_reg:21 == 3841 <ldc Register b, Constant 0>
				push_reg:22 == 3842 <stb Register b, Register a>
		call:30 == 3843 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 3843 <.define val Register c>
			pop_mem_v:7 == 3843 <.define addr Constant 2>
			pop_mem_v:9 == 3843 <@pop_reg Register c>
				pop_reg:10 == 3843 <.define registerToLoad Register c>
				pop_reg:13 == 3843 <ldc Register a, Constant 0>
				pop_reg:14 == 3844 <ldb Register a, Register a>
				pop_reg:15 == 3845 <ldc Register b, Constant 1>
				pop_reg:16 == 3846 <sub Register a, Register a, Register b>
				pop_reg:17 == 3847 <ldc Register b, Constant 0>
				pop_reg:18 == 3848 <stb Register b, Register a>
				pop_reg:22 == 3849 <ldb Register a, Register c>
			pop_mem_v:11 == 3850 <@ldc Register b, Constant 2>
				ldc:1 == 3850 <.define writeReg Register b>
				ldc:2 == 3850 <.define const Constant 2>
				ldc:4 == 3850 <ldc Register a, Constant 0>
				ldc:5 == 3851 <ldc Register b, Constant 12>
				ldc:6 == 3852 <shl Register a, Register a, Register b>
				ldc:7 == 3853 <ldc Register b, Constant 2>
				ldc:8 == 3854 <or Register b, Register a, Register b>
			pop_mem_v:12 == 3855 <stb Register b, Register c>
		call:32 == 3856 <@ldc Register a, Constant 4046>
			ldc:1 == 3856 <.define writeReg Register a>
			ldc:2 == 3856 <.define const Constant 4046>
			ldc:4 == 3856 <ldc Register a, Constant 0>
			ldc:5 == 3857 <ldc Register b, Constant 12>
			ldc:6 == 3858 <shl Register a, Register a, Register b>
			ldc:7 == 3859 <ldc Register b, Constant 4046>
			ldc:8 == 3860 <or Register a, Register a, Register b>
		call:33 == 3861 <jmp Register a>
		call:38 == 3862 <ldc Register d, Constant 2>
		call:41 == 3863 <ldb Register d, Register d>
		call:43 == 3864 <@pop_mem_v Constant 3>
			pop_mem_v:6 == 3864 <.define val Register c>
			pop_mem_v:7 == 3864 <.define addr Constant 3>
			pop_mem_v:9 == 3864 <@pop_reg Register c>
				pop_reg:10 == 3864 <.define registerToLoad Register c>
				pop_reg:13 == 3864 <ldc Register a, Constant 0>
				pop_reg:14 == 3865 <ldb Register a, Register a>
				pop_reg:15 == 3866 <ldc Register b, Constant 1>
				pop_reg:16 == 3867 <sub Register a, Register a, Register b>
				pop_reg:17 == 3868 <ldc Register b, Constant 0>
				pop_reg:18 == 3869 <stb Register b, Register a>
				pop_reg:22 == 3870 <ldb Register a, Register c>
			pop_mem_v:11 == 3871 <@ldc Register b, Constant 3>
				ldc:1 == 3871 <.define writeReg Register b>
				ldc:2 == 3871 <.define const Constant 3>
				ldc:4 == 3871 <ldc Register a, Constant 0>
				ldc:5 == 3872 <ldc Register b, Constant 12>
				ldc:6 == 3873 <shl Register a, Register a, Register b>
				ldc:7 == 3874 <ldc Register b, Constant 3>
				ldc:8 == 3875 <or Register b, Register a, Register b>
			pop_mem_v:12 == 3876 <stb Register b, Register c>
		call:44 == 3877 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 3877 <.define val Register c>
			pop_mem_v:7 == 3877 <.define addr Constant 2>
			pop_mem_v:9 == 3877 <@pop_reg Register c>
				pop_reg:10 == 3877 <.define registerToLoad Register c>
				pop_reg:13 == 3877 <ldc Register a, Constant 0>
				pop_reg:14 == 3878 <ldb Register a, Register a>
				pop_reg:15 == 3879 <ldc Register b, Constant 1>
				pop_reg:16 == 3880 <sub Register a, Register a, Register b>
				pop_reg:17 == 3881 <ldc Register b, Constant 0>
				pop_reg:18 == 3882 <stb Register b, Register a>
				pop_reg:22 == 3883 <ldb Register a, Register c>
			pop_mem_v:11 == 3884 <@ldc Register b, Constant 2>
				ldc:1 == 3884 <.define writeReg Register b>
				ldc:2 == 3884 <.define const Constant 2>
				ldc:4 == 3884 <ldc Register a, Constant 0>
				ldc:5 == 3885 <ldc Register b, Constant 12>
				ldc:6 == 3886 <shl Register a, Register a, Register b>
				ldc:7 == 3887 <ldc Register b, Constant 2>
				ldc:8 == 3888 <or Register b, Register a, Register b>
			pop_mem_v:12 == 3889 <stb Register b, Register c>
		call:46 == 3890 <ldc Register c, Constant 0>
		call:47 == 3891 <stb Register c, Register d>
	call_value:3 == 3892 <@push_mem Constant 1>
		push_mem:6 == 3892 <.define addr Register b>
		push_mem:7 == 3892 <.define value Register b>
		push_mem:9 == 3892 <@ldc Register b, Constant 1>
			ldc:1 == 3892 <.define writeReg Register b>
			ldc:2 == 3892 <.define const Constant 1>
			ldc:4 == 3892 <ldc Register a, Constant 0>
			ldc:5 == 3893 <ldc Register b, Constant 12>
			ldc:6 == 3894 <shl Register a, Register a, Register b>
			ldc:7 == 3895 <ldc Register b, Constant 1>
			ldc:8 == 3896 <or Register b, Register a, Register b>
		push_mem:10 == 3897 <ldb Register b, Register b>
		push_mem:12 == 3898 <@push_reg Register b>
			push_reg:10 == 3898 <.define registerToPush Register b>
			push_reg:13 == 3898 <ldc Register a, Constant 0>
			push_reg:14 == 3899 <ldb Register a, Register a>
			push_reg:15 == 3900 <stb Register a, Register b>
			push_reg:19 == 3901 <ldc Register b, Constant 1>
			push_reg:20 == 3902 <add Register a, Register a, Register b>
			push_reg:21 == 3903 <ldc Register b, Constant 0>
			push_reg:22 == 3904 <stb Register b, Register a>
pong.pa2:397 == 3905 <@push_const Constant 64>
	push_const:6 == 3905 <.define constantToPush Constant 64>
	push_const:12 == 3905 <@ldc Register b, Constant 64>
		ldc:1 == 3905 <.define writeReg Register b>
		ldc:2 == 3905 <.define const Constant 64>
		ldc:4 == 3905 <ldc Register a, Constant 0>
		ldc:5 == 3906 <ldc Register b, Constant 12>
		ldc:6 == 3907 <shl Register a, Register a, Register b>
		ldc:7 == 3908 <ldc Register b, Constant 64>
		ldc:8 == 3909 <or Register b, Register a, Register b>
	push_const:14 == 3910 <@push_reg Register b>
		push_reg:10 == 3910 <.define registerToPush Register b>
		push_reg:13 == 3910 <ldc Register a, Constant 0>
		push_reg:14 == 3911 <ldb Register a, Register a>
		push_reg:15 == 3912 <stb Register a, Register b>
		push_reg:19 == 3913 <ldc Register b, Constant 1>
		push_reg:20 == 3914 <add Register a, Register a, Register b>
		push_reg:21 == 3915 <ldc Register b, Constant 0>
		push_reg:22 == 3916 <stb Register b, Register a>
pong.pa2:398 == 3917 <@push_arg Constant 1>
	push_arg:3 == 3917 <.define slot Constant 1>
	push_arg:6 == 3917 <ldc Register a, Constant 2>
	push_arg:7 == 3918 <ldb Register a, Register a>
	push_arg:8 == 3919 <ldc Register b, Constant 1>
	push_arg:9 == 3920 <add Register a, Register a, Register b>
	push_arg:10 == 3921 <ldb Register a, Register b>
	push_arg:12 == 3922 <@push_reg Register b>
		push_reg:10 == 3922 <.define registerToPush Register b>
		push_reg:13 == 3922 <ldc Register a, Constant 0>
		push_reg:14 == 3923 <ldb Register a, Register a>
		push_reg:15 == 3924 <stb Register a, Register b>
		push_reg:19 == 3925 <ldc Register b, Constant 1>
		push_reg:20 == 3926 <add Register a, Register a, Register b>
		push_reg:21 == 3927 <ldc Register b, Constant 0>
		push_reg:22 == 3928 <stb Register b, Register a>
pong.pa2:399 == 3929 <@mul >
	mul:3 == 3929 <.define lhs Register c>
	mul:4 == 3929 <.define rhs Register d>
	mul:5 == 3929 <.define result Register d>
	mul:7 == 3929 <@pop_reg Register d>
		pop_reg:10 == 3929 <.define registerToLoad Register d>
		pop_reg:13 == 3929 <ldc Register a, Constant 0>
		pop_reg:14 == 3930 <ldb Register a, Register a>
		pop_reg:15 == 3931 <ldc Register b, Constant 1>
		pop_reg:16 == 3932 <sub Register a, Register a, Register b>
		pop_reg:17 == 3933 <ldc Register b, Constant 0>
		pop_reg:18 == 3934 <stb Register b, Register a>
		pop_reg:22 == 3935 <ldb Register a, Register d>
	mul:8 == 3936 <@pop_reg Register c>
		pop_reg:10 == 3936 <.define registerToLoad Register c>
		pop_reg:13 == 3936 <ldc Register a, Constant 0>
		pop_reg:14 == 3937 <ldb Register a, Register a>
		pop_reg:15 == 3938 <ldc Register b, Constant 1>
		pop_reg:16 == 3939 <sub Register a, Register a, Register b>
		pop_reg:17 == 3940 <ldc Register b, Constant 0>
		pop_reg:18 == 3941 <stb Register b, Register a>
		pop_reg:22 == 3942 <ldb Register a, Register c>
	mul:9 == 3943 <mul Register d, Register c, Register d>
	mul:10 == 3944 <@push_reg Register d>
		push_reg:10 == 3944 <.define registerToPush Register d>
		push_reg:13 == 3944 <ldc Register a, Constant 0>
		push_reg:14 == 3945 <ldb Register a, Register a>
		push_reg:15 == 3946 <stb Register a, Register d>
		push_reg:19 == 3947 <ldc Register b, Constant 1>
		push_reg:20 == 3948 <add Register a, Register a, Register b>
		push_reg:21 == 3949 <ldc Register b, Constant 0>
		push_reg:22 == 3950 <stb Register b, Register a>
pong.pa2:400 == 3951 <@add >
	add:3 == 3951 <.define lhs Register c>
	add:4 == 3951 <.define rhs Register d>
	add:5 == 3951 <.define result Register d>
	add:7 == 3951 <@pop_reg Register d>
		pop_reg:10 == 3951 <.define registerToLoad Register d>
		pop_reg:13 == 3951 <ldc Register a, Constant 0>
		pop_reg:14 == 3952 <ldb Register a, Register a>
		pop_reg:15 == 3953 <ldc Register b, Constant 1>
		pop_reg:16 == 3954 <sub Register a, Register a, Register b>
		pop_reg:17 == 3955 <ldc Register b, Constant 0>
		pop_reg:18 == 3956 <stb Register b, Register a>
		pop_reg:22 == 3957 <ldb Register a, Register d>
	add:8 == 3958 <@pop_reg Register c>
		pop_reg:10 == 3958 <.define registerToLoad Register c>
		pop_reg:13 == 3958 <ldc Register a, Constant 0>
		pop_reg:14 == 3959 <ldb Register a, Register a>
		pop_reg:15 == 3960 <ldc Register b, Constant 1>
		pop_reg:16 == 3961 <sub Register a, Register a, Register b>
		pop_reg:17 == 3962 <ldc Register b, Constant 0>
		pop_reg:18 == 3963 <stb Register b, Register a>
		pop_reg:22 == 3964 <ldb Register a, Register c>
	add:9 == 3965 <add Register d, Register c, Register d>
	add:10 == 3966 <@push_reg Register d>
		push_reg:10 == 3966 <.define registerToPush Register d>
		push_reg:13 == 3966 <ldc Register a, Constant 0>
		push_reg:14 == 3967 <ldb Register a, Register a>
		push_reg:15 == 3968 <stb Register a, Register d>
		push_reg:19 == 3969 <ldc Register b, Constant 1>
		push_reg:20 == 3970 <add Register a, Register a, Register b>
		push_reg:21 == 3971 <ldc Register b, Constant 0>
		push_reg:22 == 3972 <stb Register b, Register a>
pong.pa2:401 == 3973 <@push_arg Constant 0>
	push_arg:3 == 3973 <.define slot Constant 0>
	push_arg:6 == 3973 <ldc Register a, Constant 2>
	push_arg:7 == 3974 <ldb Register a, Register a>
	push_arg:8 == 3975 <ldc Register b, Constant 0>
	push_arg:9 == 3976 <add Register a, Register a, Register b>
	push_arg:10 == 3977 <ldb Register a, Register b>
	push_arg:12 == 3978 <@push_reg Register b>
		push_reg:10 == 3978 <.define registerToPush Register b>
		push_reg:13 == 3978 <ldc Register a, Constant 0>
		push_reg:14 == 3979 <ldb Register a, Register a>
		push_reg:15 == 3980 <stb Register a, Register b>
		push_reg:19 == 3981 <ldc Register b, Constant 1>
		push_reg:20 == 3982 <add Register a, Register a, Register b>
		push_reg:21 == 3983 <ldc Register b, Constant 0>
		push_reg:22 == 3984 <stb Register b, Register a>
pong.pa2:402 == 3985 <@add >
	add:3 == 3985 <.define lhs Register c>
	add:4 == 3985 <.define rhs Register d>
	add:5 == 3985 <.define result Register d>
	add:7 == 3985 <@pop_reg Register d>
		pop_reg:10 == 3985 <.define registerToLoad Register d>
		pop_reg:13 == 3985 <ldc Register a, Constant 0>
		pop_reg:14 == 3986 <ldb Register a, Register a>
		pop_reg:15 == 3987 <ldc Register b, Constant 1>
		pop_reg:16 == 3988 <sub Register a, Register a, Register b>
		pop_reg:17 == 3989 <ldc Register b, Constant 0>
		pop_reg:18 == 3990 <stb Register b, Register a>
		pop_reg:22 == 3991 <ldb Register a, Register d>
	add:8 == 3992 <@pop_reg Register c>
		pop_reg:10 == 3992 <.define registerToLoad Register c>
		pop_reg:13 == 3992 <ldc Register a, Constant 0>
		pop_reg:14 == 3993 <ldb Register a, Register a>
		pop_reg:15 == 3994 <ldc Register b, Constant 1>
		pop_reg:16 == 3995 <sub Register a, Register a, Register b>
		pop_reg:17 == 3996 <ldc Register b, Constant 0>
		pop_reg:18 == 3997 <stb Register b, Register a>
		pop_reg:22 == 3998 <ldb Register a, Register c>
	add:9 == 3999 <add Register d, Register c, Register d>
	add:10 == 4000 <@push_reg Register d>
		push_reg:10 == 4000 <.define registerToPush Register d>
		push_reg:13 == 4000 <ldc Register a, Constant 0>
		push_reg:14 == 4001 <ldb Register a, Register a>
		push_reg:15 == 4002 <stb Register a, Register d>
		push_reg:19 == 4003 <ldc Register b, Constant 1>
		push_reg:20 == 4004 <add Register a, Register a, Register b>
		push_reg:21 == 4005 <ldc Register b, Constant 0>
		push_reg:22 == 4006 <stb Register b, Register a>
pong.pa2:405 == 4007 <@push_arg Constant 2>
	push_arg:3 == 4007 <.define slot Constant 2>
	push_arg:6 == 4007 <ldc Register a, Constant 2>
	push_arg:7 == 4008 <ldb Register a, Register a>
	push_arg:8 == 4009 <ldc Register b, Constant 2>
	push_arg:9 == 4010 <add Register a, Register a, Register b>
	push_arg:10 == 4011 <ldb Register a, Register b>
	push_arg:12 == 4012 <@push_reg Register b>
		push_reg:10 == 4012 <.define registerToPush Register b>
		push_reg:13 == 4012 <ldc Register a, Constant 0>
		push_reg:14 == 4013 <ldb Register a, Register a>
		push_reg:15 == 4014 <stb Register a, Register b>
		push_reg:19 == 4015 <ldc Register b, Constant 1>
		push_reg:20 == 4016 <add Register a, Register a, Register b>
		push_reg:21 == 4017 <ldc Register b, Constant 0>
		push_reg:22 == 4018 <stb Register b, Register a>
pong.pa2:406 == 4019 <@pop_mem_va >
	pop_mem_va:4 == 4019 <.define val Register c>
	pop_mem_va:5 == 4019 <.define addr Register a>
	pop_mem_va:7 == 4019 <@pop_reg Register c>
		pop_reg:10 == 4019 <.define registerToLoad Register c>
		pop_reg:13 == 4019 <ldc Register a, Constant 0>
		pop_reg:14 == 4020 <ldb Register a, Register a>
		pop_reg:15 == 4021 <ldc Register b, Constant 1>
		pop_reg:16 == 4022 <sub Register a, Register a, Register b>
		pop_reg:17 == 4023 <ldc Register b, Constant 0>
		pop_reg:18 == 4024 <stb Register b, Register a>
		pop_reg:22 == 4025 <ldb Register a, Register c>
	pop_mem_va:8 == 4026 <@pop_reg Register a>
		pop_reg:10 == 4026 <.define registerToLoad Register a>
		pop_reg:13 == 4026 <ldc Register a, Constant 0>
		pop_reg:14 == 4027 <ldb Register a, Register a>
		pop_reg:15 == 4028 <ldc Register b, Constant 1>
		pop_reg:16 == 4029 <sub Register a, Register a, Register b>
		pop_reg:17 == 4030 <ldc Register b, Constant 0>
		pop_reg:18 == 4031 <stb Register b, Register a>
		pop_reg:22 == 4032 <ldb Register a, Register a>
	pop_mem_va:10 == 4033 <stb Register a, Register c>
pong.pa2:408 == 4034 <@return >
	return:2 == 4034 <ldc Register b, Constant 3>
	return:3 == 4035 <ldb Register b, Register b>
	return:4 == 4036 <ldc Register a, Constant 0>
	return:5 == 4037 <stb Register a, Register b>
	return:7 == 4038 <@pop_reg Register d>
		pop_reg:10 == 4038 <.define registerToLoad Register d>
		pop_reg:13 == 4038 <ldc Register a, Constant 0>
		pop_reg:14 == 4039 <ldb Register a, Register a>
		pop_reg:15 == 4040 <ldc Register b, Constant 1>
		pop_reg:16 == 4041 <sub Register a, Register a, Register b>
		pop_reg:17 == 4042 <ldc Register b, Constant 0>
		pop_reg:18 == 4043 <stb Register b, Register a>
		pop_reg:22 == 4044 <ldb Register a, Register d>
	return:9 == 4045 <jump Register d>
pong.pa2:416 == 4046 <@function Constant 0>
	function:19 == 4046 <.define loccount Constant 0>
	function:22 == 4046 <ldc Register a, Constant 0>
	function:23 == 4047 <ldb Register a, Register a>
	function:24 == 4048 <ldc Register b, Constant 3>
	function:25 == 4049 <stb Register b, Register a>
	function:28 == 4050 <ldc Register a, Constant 0>
	function:29 == 4051 <ldb Register a, Register b>
	function:30 == 4052 <ldc Register c, Constant 0>
	function:31 == 4053 <add Register b, Register b, Register c>
	function:32 == 4054 <stb Register a, Register b>
pong.pa2:419 == 4055 <@push_const Constant 16384>
	push_const:6 == 4055 <.define constantToPush Constant 16384>
	push_const:12 == 4055 <@ldc Register b, Constant 16384>
		ldc:1 == 4055 <.define writeReg Register b>
		ldc:2 == 4055 <.define const Constant 16384>
		ldc:4 == 4055 <ldc Register a, Constant 4>
		ldc:5 == 4056 <ldc Register b, Constant 12>
		ldc:6 == 4057 <shl Register a, Register a, Register b>
		ldc:7 == 4058 <ldc Register b, Constant 0>
		ldc:8 == 4059 <or Register b, Register a, Register b>
	push_const:14 == 4060 <@push_reg Register b>
		push_reg:10 == 4060 <.define registerToPush Register b>
		push_reg:13 == 4060 <ldc Register a, Constant 0>
		push_reg:14 == 4061 <ldb Register a, Register a>
		push_reg:15 == 4062 <stb Register a, Register b>
		push_reg:19 == 4063 <ldc Register b, Constant 1>
		push_reg:20 == 4064 <add Register a, Register a, Register b>
		push_reg:21 == 4065 <ldc Register b, Constant 0>
		push_reg:22 == 4066 <stb Register b, Register a>
pong.pa2:420 == 4067 <@push_const Constant 24577>
	push_const:6 == 4067 <.define constantToPush Constant 24577>
	push_const:12 == 4067 <@ldc Register b, Constant 24577>
		ldc:1 == 4067 <.define writeReg Register b>
		ldc:2 == 4067 <.define const Constant 24577>
		ldc:4 == 4067 <ldc Register a, Constant 6>
		ldc:5 == 4068 <ldc Register b, Constant 12>
		ldc:6 == 4069 <shl Register a, Register a, Register b>
		ldc:7 == 4070 <ldc Register b, Constant 1>
		ldc:8 == 4071 <or Register b, Register a, Register b>
	push_const:14 == 4072 <@push_reg Register b>
		push_reg:10 == 4072 <.define registerToPush Register b>
		push_reg:13 == 4072 <ldc Register a, Constant 0>
		push_reg:14 == 4073 <ldb Register a, Register a>
		push_reg:15 == 4074 <stb Register a, Register b>
		push_reg:19 == 4075 <ldc Register b, Constant 1>
		push_reg:20 == 4076 <add Register a, Register a, Register b>
		push_reg:21 == 4077 <ldc Register b, Constant 0>
		push_reg:22 == 4078 <stb Register b, Register a>
pong.pa2:421 == 4079 <@push_mem_a >
	push_mem_a:4 == 4079 <.define val Register c>
	push_mem_a:5 == 4079 <.define addr Register d>
	push_mem_a:7 == 4079 <@pop_reg Register d>
		pop_reg:10 == 4079 <.define registerToLoad Register d>
		pop_reg:13 == 4079 <ldc Register a, Constant 0>
		pop_reg:14 == 4080 <ldb Register a, Register a>
		pop_reg:15 == 4081 <ldc Register b, Constant 1>
		pop_reg:16 == 4082 <sub Register a, Register a, Register b>
		pop_reg:17 == 4083 <ldc Register b, Constant 0>
		pop_reg:18 == 4084 <stb Register b, Register a>
		pop_reg:22 == 4085 <ldb Register a, Register d>
	push_mem_a:9 == 4086 <ldb Register d, Register c>
	push_mem_a:11 == 4087 <@push_reg Register c>
		push_reg:10 == 4087 <.define registerToPush Register c>
		push_reg:13 == 4087 <ldc Register a, Constant 0>
		push_reg:14 == 4088 <ldb Register a, Register a>
		push_reg:15 == 4089 <stb Register a, Register c>
		push_reg:19 == 4090 <ldc Register b, Constant 1>
		push_reg:20 == 4091 <add Register a, Register a, Register b>
		push_reg:21 == 4092 <ldc Register b, Constant 0>
		push_reg:22 == 4093 <stb Register b, Register a>
pong.pa2:422 == 4094 <@not >
	not:3 == 4094 <.define operand Register c>
	not:4 == 4094 <.define result Register d>
	not:6 == 4094 <@pop_reg Register c>
		pop_reg:10 == 4094 <.define registerToLoad Register c>
		pop_reg:13 == 4094 <ldc Register a, Constant 0>
		pop_reg:14 == 4095 <ldb Register a, Register a>
		pop_reg:15 == 4096 <ldc Register b, Constant 1>
		pop_reg:16 == 4097 <sub Register a, Register a, Register b>
		pop_reg:17 == 4098 <ldc Register b, Constant 0>
		pop_reg:18 == 4099 <stb Register b, Register a>
		pop_reg:22 == 4100 <ldb Register a, Register c>
	not:7 == 4101 <not Register d, Register c>
	not:8 == 4102 <@push_reg Register d>
		push_reg:10 == 4102 <.define registerToPush Register d>
		push_reg:13 == 4102 <ldc Register a, Constant 0>
		push_reg:14 == 4103 <ldb Register a, Register a>
		push_reg:15 == 4104 <stb Register a, Register d>
		push_reg:19 == 4105 <ldc Register b, Constant 1>
		push_reg:20 == 4106 <add Register a, Register a, Register b>
		push_reg:21 == 4107 <ldc Register b, Constant 0>
		push_reg:22 == 4108 <stb Register b, Register a>
pong.pa2:423 == 4109 <@push_const Constant 1>
	push_const:6 == 4109 <.define constantToPush Constant 1>
	push_const:12 == 4109 <@ldc Register b, Constant 1>
		ldc:1 == 4109 <.define writeReg Register b>
		ldc:2 == 4109 <.define const Constant 1>
		ldc:4 == 4109 <ldc Register a, Constant 0>
		ldc:5 == 4110 <ldc Register b, Constant 12>
		ldc:6 == 4111 <shl Register a, Register a, Register b>
		ldc:7 == 4112 <ldc Register b, Constant 1>
		ldc:8 == 4113 <or Register b, Register a, Register b>
	push_const:14 == 4114 <@push_reg Register b>
		push_reg:10 == 4114 <.define registerToPush Register b>
		push_reg:13 == 4114 <ldc Register a, Constant 0>
		push_reg:14 == 4115 <ldb Register a, Register a>
		push_reg:15 == 4116 <stb Register a, Register b>
		push_reg:19 == 4117 <ldc Register b, Constant 1>
		push_reg:20 == 4118 <add Register a, Register a, Register b>
		push_reg:21 == 4119 <ldc Register b, Constant 0>
		push_reg:22 == 4120 <stb Register b, Register a>
pong.pa2:424 == 4121 <@and >
	and:3 == 4121 <.define lhs Register c>
	and:4 == 4121 <.define rhs Register d>
	and:5 == 4121 <.define result Register d>
	and:7 == 4121 <@pop_reg Register d>
		pop_reg:10 == 4121 <.define registerToLoad Register d>
		pop_reg:13 == 4121 <ldc Register a, Constant 0>
		pop_reg:14 == 4122 <ldb Register a, Register a>
		pop_reg:15 == 4123 <ldc Register b, Constant 1>
		pop_reg:16 == 4124 <sub Register a, Register a, Register b>
		pop_reg:17 == 4125 <ldc Register b, Constant 0>
		pop_reg:18 == 4126 <stb Register b, Register a>
		pop_reg:22 == 4127 <ldb Register a, Register d>
	and:8 == 4128 <@pop_reg Register c>
		pop_reg:10 == 4128 <.define registerToLoad Register c>
		pop_reg:13 == 4128 <ldc Register a, Constant 0>
		pop_reg:14 == 4129 <ldb Register a, Register a>
		pop_reg:15 == 4130 <ldc Register b, Constant 1>
		pop_reg:16 == 4131 <sub Register a, Register a, Register b>
		pop_reg:17 == 4132 <ldc Register b, Constant 0>
		pop_reg:18 == 4133 <stb Register b, Register a>
		pop_reg:22 == 4134 <ldb Register a, Register c>
	and:9 == 4135 <and Register d, Register c, Register d>
	and:10 == 4136 <@push_reg Register d>
		push_reg:10 == 4136 <.define registerToPush Register d>
		push_reg:13 == 4136 <ldc Register a, Constant 0>
		push_reg:14 == 4137 <ldb Register a, Register a>
		push_reg:15 == 4138 <stb Register a, Register d>
		push_reg:19 == 4139 <ldc Register b, Constant 1>
		push_reg:20 == 4140 <add Register a, Register a, Register b>
		push_reg:21 == 4141 <ldc Register b, Constant 0>
		push_reg:22 == 4142 <stb Register b, Register a>
pong.pa2:425 == 4143 <@push_const Constant 4096>
	push_const:6 == 4143 <.define constantToPush Constant 4096>
	push_const:12 == 4143 <@ldc Register b, Constant 4096>
		ldc:1 == 4143 <.define writeReg Register b>
		ldc:2 == 4143 <.define const Constant 4096>
		ldc:4 == 4143 <ldc Register a, Constant 1>
		ldc:5 == 4144 <ldc Register b, Constant 12>
		ldc:6 == 4145 <shl Register a, Register a, Register b>
		ldc:7 == 4146 <ldc Register b, Constant 0>
		ldc:8 == 4147 <or Register b, Register a, Register b>
	push_const:14 == 4148 <@push_reg Register b>
		push_reg:10 == 4148 <.define registerToPush Register b>
		push_reg:13 == 4148 <ldc Register a, Constant 0>
		push_reg:14 == 4149 <ldb Register a, Register a>
		push_reg:15 == 4150 <stb Register a, Register b>
		push_reg:19 == 4151 <ldc Register b, Constant 1>
		push_reg:20 == 4152 <add Register a, Register a, Register b>
		push_reg:21 == 4153 <ldc Register b, Constant 0>
		push_reg:22 == 4154 <stb Register b, Register a>
pong.pa2:426 == 4155 <@mul >
	mul:3 == 4155 <.define lhs Register c>
	mul:4 == 4155 <.define rhs Register d>
	mul:5 == 4155 <.define result Register d>
	mul:7 == 4155 <@pop_reg Register d>
		pop_reg:10 == 4155 <.define registerToLoad Register d>
		pop_reg:13 == 4155 <ldc Register a, Constant 0>
		pop_reg:14 == 4156 <ldb Register a, Register a>
		pop_reg:15 == 4157 <ldc Register b, Constant 1>
		pop_reg:16 == 4158 <sub Register a, Register a, Register b>
		pop_reg:17 == 4159 <ldc Register b, Constant 0>
		pop_reg:18 == 4160 <stb Register b, Register a>
		pop_reg:22 == 4161 <ldb Register a, Register d>
	mul:8 == 4162 <@pop_reg Register c>
		pop_reg:10 == 4162 <.define registerToLoad Register c>
		pop_reg:13 == 4162 <ldc Register a, Constant 0>
		pop_reg:14 == 4163 <ldb Register a, Register a>
		pop_reg:15 == 4164 <ldc Register b, Constant 1>
		pop_reg:16 == 4165 <sub Register a, Register a, Register b>
		pop_reg:17 == 4166 <ldc Register b, Constant 0>
		pop_reg:18 == 4167 <stb Register b, Register a>
		pop_reg:22 == 4168 <ldb Register a, Register c>
	mul:9 == 4169 <mul Register d, Register c, Register d>
	mul:10 == 4170 <@push_reg Register d>
		push_reg:10 == 4170 <.define registerToPush Register d>
		push_reg:13 == 4170 <ldc Register a, Constant 0>
		push_reg:14 == 4171 <ldb Register a, Register a>
		push_reg:15 == 4172 <stb Register a, Register d>
		push_reg:19 == 4173 <ldc Register b, Constant 1>
		push_reg:20 == 4174 <add Register a, Register a, Register b>
		push_reg:21 == 4175 <ldc Register b, Constant 0>
		push_reg:22 == 4176 <stb Register b, Register a>
pong.pa2:427 == 4177 <@add >
	add:3 == 4177 <.define lhs Register c>
	add:4 == 4177 <.define rhs Register d>
	add:5 == 4177 <.define result Register d>
	add:7 == 4177 <@pop_reg Register d>
		pop_reg:10 == 4177 <.define registerToLoad Register d>
		pop_reg:13 == 4177 <ldc Register a, Constant 0>
		pop_reg:14 == 4178 <ldb Register a, Register a>
		pop_reg:15 == 4179 <ldc Register b, Constant 1>
		pop_reg:16 == 4180 <sub Register a, Register a, Register b>
		pop_reg:17 == 4181 <ldc Register b, Constant 0>
		pop_reg:18 == 4182 <stb Register b, Register a>
		pop_reg:22 == 4183 <ldb Register a, Register d>
	add:8 == 4184 <@pop_reg Register c>
		pop_reg:10 == 4184 <.define registerToLoad Register c>
		pop_reg:13 == 4184 <ldc Register a, Constant 0>
		pop_reg:14 == 4185 <ldb Register a, Register a>
		pop_reg:15 == 4186 <ldc Register b, Constant 1>
		pop_reg:16 == 4187 <sub Register a, Register a, Register b>
		pop_reg:17 == 4188 <ldc Register b, Constant 0>
		pop_reg:18 == 4189 <stb Register b, Register a>
		pop_reg:22 == 4190 <ldb Register a, Register c>
	add:9 == 4191 <add Register d, Register c, Register d>
	add:10 == 4192 <@push_reg Register d>
		push_reg:10 == 4192 <.define registerToPush Register d>
		push_reg:13 == 4192 <ldc Register a, Constant 0>
		push_reg:14 == 4193 <ldb Register a, Register a>
		push_reg:15 == 4194 <stb Register a, Register d>
		push_reg:19 == 4195 <ldc Register b, Constant 1>
		push_reg:20 == 4196 <add Register a, Register a, Register b>
		push_reg:21 == 4197 <ldc Register b, Constant 0>
		push_reg:22 == 4198 <stb Register b, Register a>
pong.pa2:429 == 4199 <@return_value >
	return_value:4 == 4199 <@pop_mem_v Constant 1>
		pop_mem_v:6 == 4199 <.define val Register c>
		pop_mem_v:7 == 4199 <.define addr Constant 1>
		pop_mem_v:9 == 4199 <@pop_reg Register c>
			pop_reg:10 == 4199 <.define registerToLoad Register c>
			pop_reg:13 == 4199 <ldc Register a, Constant 0>
			pop_reg:14 == 4200 <ldb Register a, Register a>
			pop_reg:15 == 4201 <ldc Register b, Constant 1>
			pop_reg:16 == 4202 <sub Register a, Register a, Register b>
			pop_reg:17 == 4203 <ldc Register b, Constant 0>
			pop_reg:18 == 4204 <stb Register b, Register a>
			pop_reg:22 == 4205 <ldb Register a, Register c>
		pop_mem_v:11 == 4206 <@ldc Register b, Constant 1>
			ldc:1 == 4206 <.define writeReg Register b>
			ldc:2 == 4206 <.define const Constant 1>
			ldc:4 == 4206 <ldc Register a, Constant 0>
			ldc:5 == 4207 <ldc Register b, Constant 12>
			ldc:6 == 4208 <shl Register a, Register a, Register b>
			ldc:7 == 4209 <ldc Register b, Constant 1>
			ldc:8 == 4210 <or Register b, Register a, Register b>
		pop_mem_v:12 == 4211 <stb Register b, Register c>
	return_value:6 == 4212 <@return >
		return:2 == 4212 <ldc Register b, Constant 3>
		return:3 == 4213 <ldb Register b, Register b>
		return:4 == 4214 <ldc Register a, Constant 0>
		return:5 == 4215 <stb Register a, Register b>
		return:7 == 4216 <@pop_reg Register d>
			pop_reg:10 == 4216 <.define registerToLoad Register d>
			pop_reg:13 == 4216 <ldc Register a, Constant 0>
			pop_reg:14 == 4217 <ldb Register a, Register a>
			pop_reg:15 == 4218 <ldc Register b, Constant 1>
			pop_reg:16 == 4219 <sub Register a, Register a, Register b>
			pop_reg:17 == 4220 <ldc Register b, Constant 0>
			pop_reg:18 == 4221 <stb Register b, Register a>
			pop_reg:22 == 4222 <ldb Register a, Register d>
		return:9 == 4223 <jump Register d>
