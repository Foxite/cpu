pong.pa2:2 == 0 <.define screenWidth Constant 64>
pong.pa2:3 == 0 <.define screenHeight Constant 64>
pong.pa2:5 == 0 <.define display Constant 16384>
pong.pa2:6 == 0 <.define displaySize Constant 4096>
pong.pa2:7 == 0 <.define displayEnd Constant 20480>
pong.pa2:8 == 0 <.define _dev Constant 24576>
pong.pa2:9 == 0 <.define devbutton Constant 24576>
pong.pa2:10 == 0 <.define devframe Constant 24577>
pong.pa2:11 == 0 <.define devmidi Constant 24578>
pong.pa2:12 == 0 <.define highZaddress Constant 65535>
pong.pa2:15 == 0 <.define colorBlack Constant 1>
pong.pa2:16 == 0 <.define colorWhite Constant 0>
pong.pa2:17 == 0 <.define colorOrange Constant 8>
pong.pa2:18 == 0 <.define colorPink Constant 9>
pong.pa2:23 == 0 <.define buttonLeftUp Constant 128>
pong.pa2:24 == 0 <.define buttonLeftDown Constant 64>
pong.pa2:25 == 0 <.define buttonRightUp Constant 8>
pong.pa2:26 == 0 <.define buttonRightDown Constant 1>
pong.pa2:30 == 0 <.define paddleHeight Constant 8>
pong.pa2:31 == 0 <.define paddlePadding Constant 8>
pong.pa2:32 == 0 <.define colorBackground Constant 1>
pong.pa2:33 == 0 <.define colorPaddleLeft Constant 8>
pong.pa2:34 == 0 <.define colorPaddleRight Constant 9>
pong.pa2:37 == 0 <.define paddleLeftX Constant 8>
pong.pa2:38 == 0 <.define paddleRightX Constant 56>
pong.pa2:39 == 0 <.define paddleMaxY Constant 56>
pong.pa2:43 == 0 <.define paddleLeftY Constant 16>
pong.pa2:44 == 0 <.define paddleRightY Constant 17>
pong.pa2:45 == 0 <.define ballX Constant 18>
pong.pa2:46 == 0 <.define ballY Constant 19>
pong.pa2:47 == 0 <.define ballSpeedX Constant 20>
pong.pa2:48 == 0 <.define ballSpeedY Constant 21>
pong.pa2:49 == 0 <.define ballColor Constant 22>
pong.pa2:51 == 0 <.define scoreLeft Constant 23>
pong.pa2:52 == 0 <.define scoreRight Constant 24>
pong.pa2:54 == 0 <.define inputLeftDir Constant 25>
pong.pa2:55 == 0 <.define inputRightDir Constant 26>
pong.pa2:61 == 0 <@init_stack >
	init_stack:7 == 0 <ldc Register a, Constant 256>
	init_stack:8 == 1 <ldc Register b, Constant 0>
	init_stack:9 == 2 <stb Register b, Register a>
pong.pa2:63 == 3 <@call Constant 686, Constant 0>
	call:11 == 3 <.define functionLabel Constant 686>
	call:12 == 3 <.define argcount Constant 0>
	call:15 == 3 <@push_mem Constant 2>
		push_mem:6 == 3 <.define addr Register b>
		push_mem:7 == 3 <.define value Register b>
		push_mem:9 == 3 <@ldc Register b, Constant 2>
			ldc:1 == 3 <.define writeReg Register b>
			ldc:2 == 3 <.define const Constant 2>
			ldc:4 == 3 <ldc Register a, Constant 0>
			ldc:5 == 4 <ldc Register b, Constant 12>
			ldc:6 == 5 <shl Register a, Register a, Register b>
			ldc:7 == 6 <ldc Register b, Constant 2>
			ldc:8 == 7 <or Register b, Register a, Register b>
		push_mem:10 == 8 <ldb Register b, Register b>
		push_mem:12 == 9 <@push_reg Register b>
			push_reg:10 == 9 <.define registerToPush Register b>
			push_reg:13 == 9 <ldc Register a, Constant 0>
			push_reg:14 == 10 <ldb Register a, Register a>
			push_reg:15 == 11 <stb Register a, Register b>
			push_reg:19 == 12 <ldc Register b, Constant 1>
			push_reg:20 == 13 <add Register a, Register a, Register b>
			push_reg:21 == 14 <ldc Register b, Constant 0>
			push_reg:22 == 15 <stb Register b, Register a>
	call:16 == 16 <@push_mem Constant 3>
		push_mem:6 == 16 <.define addr Register b>
		push_mem:7 == 16 <.define value Register b>
		push_mem:9 == 16 <@ldc Register b, Constant 3>
			ldc:1 == 16 <.define writeReg Register b>
			ldc:2 == 16 <.define const Constant 3>
			ldc:4 == 16 <ldc Register a, Constant 0>
			ldc:5 == 17 <ldc Register b, Constant 12>
			ldc:6 == 18 <shl Register a, Register a, Register b>
			ldc:7 == 19 <ldc Register b, Constant 3>
			ldc:8 == 20 <or Register b, Register a, Register b>
		push_mem:10 == 21 <ldb Register b, Register b>
		push_mem:12 == 22 <@push_reg Register b>
			push_reg:10 == 22 <.define registerToPush Register b>
			push_reg:13 == 22 <ldc Register a, Constant 0>
			push_reg:14 == 23 <ldb Register a, Register a>
			push_reg:15 == 24 <stb Register a, Register b>
			push_reg:19 == 25 <ldc Register b, Constant 1>
			push_reg:20 == 26 <add Register a, Register a, Register b>
			push_reg:21 == 27 <ldc Register b, Constant 0>
			push_reg:22 == 28 <stb Register b, Register a>
	call:19 == 29 <@push_const Constant 141>
		push_const:6 == 29 <.define constantToPush Constant 141>
		push_const:12 == 29 <@ldc Register b, Constant 141>
			ldc:1 == 29 <.define writeReg Register b>
			ldc:2 == 29 <.define const Constant 141>
			ldc:4 == 29 <ldc Register a, Constant 0>
			ldc:5 == 30 <ldc Register b, Constant 12>
			ldc:6 == 31 <shl Register a, Register a, Register b>
			ldc:7 == 32 <ldc Register b, Constant 141>
			ldc:8 == 33 <or Register b, Register a, Register b>
		push_const:14 == 34 <@push_reg Register b>
			push_reg:10 == 34 <.define registerToPush Register b>
			push_reg:13 == 34 <ldc Register a, Constant 0>
			push_reg:14 == 35 <ldb Register a, Register a>
			push_reg:15 == 36 <stb Register a, Register b>
			push_reg:19 == 37 <ldc Register b, Constant 1>
			push_reg:20 == 38 <add Register a, Register a, Register b>
			push_reg:21 == 39 <ldc Register b, Constant 0>
			push_reg:22 == 40 <stb Register b, Register a>
	call:24 == 41 <@push_mem Constant 0>
		push_mem:6 == 41 <.define addr Register b>
		push_mem:7 == 41 <.define value Register b>
		push_mem:9 == 41 <@ldc Register b, Constant 0>
			ldc:1 == 41 <.define writeReg Register b>
			ldc:2 == 41 <.define const Constant 0>
			ldc:4 == 41 <ldc Register a, Constant 0>
			ldc:5 == 42 <ldc Register b, Constant 12>
			ldc:6 == 43 <shl Register a, Register a, Register b>
			ldc:7 == 44 <ldc Register b, Constant 0>
			ldc:8 == 45 <or Register b, Register a, Register b>
		push_mem:10 == 46 <ldb Register b, Register b>
		push_mem:12 == 47 <@push_reg Register b>
			push_reg:10 == 47 <.define registerToPush Register b>
			push_reg:13 == 47 <ldc Register a, Constant 0>
			push_reg:14 == 48 <ldb Register a, Register a>
			push_reg:15 == 49 <stb Register a, Register b>
			push_reg:19 == 50 <ldc Register b, Constant 1>
			push_reg:20 == 51 <add Register a, Register a, Register b>
			push_reg:21 == 52 <ldc Register b, Constant 0>
			push_reg:22 == 53 <stb Register b, Register a>
	call:26 == 54 <@push_const Constant 3>
		push_const:6 == 54 <.define constantToPush Constant 3>
		push_const:12 == 54 <@ldc Register b, Constant 3>
			ldc:1 == 54 <.define writeReg Register b>
			ldc:2 == 54 <.define const Constant 3>
			ldc:4 == 54 <ldc Register a, Constant 0>
			ldc:5 == 55 <ldc Register b, Constant 12>
			ldc:6 == 56 <shl Register a, Register a, Register b>
			ldc:7 == 57 <ldc Register b, Constant 3>
			ldc:8 == 58 <or Register b, Register a, Register b>
		push_const:14 == 59 <@push_reg Register b>
			push_reg:10 == 59 <.define registerToPush Register b>
			push_reg:13 == 59 <ldc Register a, Constant 0>
			push_reg:14 == 60 <ldb Register a, Register a>
			push_reg:15 == 61 <stb Register a, Register b>
			push_reg:19 == 62 <ldc Register b, Constant 1>
			push_reg:20 == 63 <add Register a, Register a, Register b>
			push_reg:21 == 64 <ldc Register b, Constant 0>
			push_reg:22 == 65 <stb Register b, Register a>
	call:27 == 66 <@push_const Constant 0>
		push_const:6 == 66 <.define constantToPush Constant 0>
		push_const:12 == 66 <@ldc Register b, Constant 0>
			ldc:1 == 66 <.define writeReg Register b>
			ldc:2 == 66 <.define const Constant 0>
			ldc:4 == 66 <ldc Register a, Constant 0>
			ldc:5 == 67 <ldc Register b, Constant 12>
			ldc:6 == 68 <shl Register a, Register a, Register b>
			ldc:7 == 69 <ldc Register b, Constant 0>
			ldc:8 == 70 <or Register b, Register a, Register b>
		push_const:14 == 71 <@push_reg Register b>
			push_reg:10 == 71 <.define registerToPush Register b>
			push_reg:13 == 71 <ldc Register a, Constant 0>
			push_reg:14 == 72 <ldb Register a, Register a>
			push_reg:15 == 73 <stb Register a, Register b>
			push_reg:19 == 74 <ldc Register b, Constant 1>
			push_reg:20 == 75 <add Register a, Register a, Register b>
			push_reg:21 == 76 <ldc Register b, Constant 0>
			push_reg:22 == 77 <stb Register b, Register a>
	call:28 == 78 <@add >
		add:3 == 78 <.define lhs Register c>
		add:4 == 78 <.define rhs Register d>
		add:5 == 78 <.define result Register d>
		add:7 == 78 <@pop_reg Register c>
			pop_reg:10 == 78 <.define registerToLoad Register c>
			pop_reg:13 == 78 <ldc Register a, Constant 0>
			pop_reg:14 == 79 <ldb Register a, Register a>
			pop_reg:15 == 80 <ldc Register b, Constant 1>
			pop_reg:16 == 81 <sub Register a, Register a, Register b>
			pop_reg:17 == 82 <ldc Register b, Constant 0>
			pop_reg:18 == 83 <stb Register b, Register a>
			pop_reg:22 == 84 <ldb Register a, Register c>
		add:8 == 85 <@pop_reg Register d>
			pop_reg:10 == 85 <.define registerToLoad Register d>
			pop_reg:13 == 85 <ldc Register a, Constant 0>
			pop_reg:14 == 86 <ldb Register a, Register a>
			pop_reg:15 == 87 <ldc Register b, Constant 1>
			pop_reg:16 == 88 <sub Register a, Register a, Register b>
			pop_reg:17 == 89 <ldc Register b, Constant 0>
			pop_reg:18 == 90 <stb Register b, Register a>
			pop_reg:22 == 91 <ldb Register a, Register d>
		add:9 == 92 <add Register d, Register c, Register d>
		add:10 == 93 <@push_reg Register d>
			push_reg:10 == 93 <.define registerToPush Register d>
			push_reg:13 == 93 <ldc Register a, Constant 0>
			push_reg:14 == 94 <ldb Register a, Register a>
			push_reg:15 == 95 <stb Register a, Register d>
			push_reg:19 == 96 <ldc Register b, Constant 1>
			push_reg:20 == 97 <add Register a, Register a, Register b>
			push_reg:21 == 98 <ldc Register b, Constant 0>
			push_reg:22 == 99 <stb Register b, Register a>
	call:29 == 100 <@sub >
		sub:3 == 100 <.define lhs Register c>
		sub:4 == 100 <.define rhs Register d>
		sub:5 == 100 <.define result Register d>
		sub:7 == 100 <@pop_reg Register d>
			pop_reg:10 == 100 <.define registerToLoad Register d>
			pop_reg:13 == 100 <ldc Register a, Constant 0>
			pop_reg:14 == 101 <ldb Register a, Register a>
			pop_reg:15 == 102 <ldc Register b, Constant 1>
			pop_reg:16 == 103 <sub Register a, Register a, Register b>
			pop_reg:17 == 104 <ldc Register b, Constant 0>
			pop_reg:18 == 105 <stb Register b, Register a>
			pop_reg:22 == 106 <ldb Register a, Register d>
		sub:8 == 107 <@pop_reg Register c>
			pop_reg:10 == 107 <.define registerToLoad Register c>
			pop_reg:13 == 107 <ldc Register a, Constant 0>
			pop_reg:14 == 108 <ldb Register a, Register a>
			pop_reg:15 == 109 <ldc Register b, Constant 1>
			pop_reg:16 == 110 <sub Register a, Register a, Register b>
			pop_reg:17 == 111 <ldc Register b, Constant 0>
			pop_reg:18 == 112 <stb Register b, Register a>
			pop_reg:22 == 113 <ldb Register a, Register c>
		sub:9 == 114 <sub Register d, Register c, Register d>
		sub:10 == 115 <@push_reg Register d>
			push_reg:10 == 115 <.define registerToPush Register d>
			push_reg:13 == 115 <ldc Register a, Constant 0>
			push_reg:14 == 116 <ldb Register a, Register a>
			push_reg:15 == 117 <stb Register a, Register d>
			push_reg:19 == 118 <ldc Register b, Constant 1>
			push_reg:20 == 119 <add Register a, Register a, Register b>
			push_reg:21 == 120 <ldc Register b, Constant 0>
			push_reg:22 == 121 <stb Register b, Register a>
	call:30 == 122 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 122 <.define val Register c>
		pop_mem_v:7 == 122 <.define addr Constant 2>
		pop_mem_v:9 == 122 <@pop_reg Register c>
			pop_reg:10 == 122 <.define registerToLoad Register c>
			pop_reg:13 == 122 <ldc Register a, Constant 0>
			pop_reg:14 == 123 <ldb Register a, Register a>
			pop_reg:15 == 124 <ldc Register b, Constant 1>
			pop_reg:16 == 125 <sub Register a, Register a, Register b>
			pop_reg:17 == 126 <ldc Register b, Constant 0>
			pop_reg:18 == 127 <stb Register b, Register a>
			pop_reg:22 == 128 <ldb Register a, Register c>
		pop_mem_v:11 == 129 <@ldc Register b, Constant 2>
			ldc:1 == 129 <.define writeReg Register b>
			ldc:2 == 129 <.define const Constant 2>
			ldc:4 == 129 <ldc Register a, Constant 0>
			ldc:5 == 130 <ldc Register b, Constant 12>
			ldc:6 == 131 <shl Register a, Register a, Register b>
			ldc:7 == 132 <ldc Register b, Constant 2>
			ldc:8 == 133 <or Register b, Register a, Register b>
		pop_mem_v:12 == 134 <stb Register b, Register c>
	call:32 == 135 <@ldc Register a, Constant 686>
		ldc:1 == 135 <.define writeReg Register a>
		ldc:2 == 135 <.define const Constant 686>
		ldc:4 == 135 <ldc Register a, Constant 0>
		ldc:5 == 136 <ldc Register b, Constant 12>
		ldc:6 == 137 <shl Register a, Register a, Register b>
		ldc:7 == 138 <ldc Register b, Constant 686>
		ldc:8 == 139 <or Register a, Register a, Register b>
	call:33 == 140 <jmp Register a>
	call:38 == 141 <ldc Register d, Constant 2>
	call:41 == 142 <ldb Register d, Register d>
	call:43 == 143 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 143 <.define val Register c>
		pop_mem_v:7 == 143 <.define addr Constant 3>
		pop_mem_v:9 == 143 <@pop_reg Register c>
			pop_reg:10 == 143 <.define registerToLoad Register c>
			pop_reg:13 == 143 <ldc Register a, Constant 0>
			pop_reg:14 == 144 <ldb Register a, Register a>
			pop_reg:15 == 145 <ldc Register b, Constant 1>
			pop_reg:16 == 146 <sub Register a, Register a, Register b>
			pop_reg:17 == 147 <ldc Register b, Constant 0>
			pop_reg:18 == 148 <stb Register b, Register a>
			pop_reg:22 == 149 <ldb Register a, Register c>
		pop_mem_v:11 == 150 <@ldc Register b, Constant 3>
			ldc:1 == 150 <.define writeReg Register b>
			ldc:2 == 150 <.define const Constant 3>
			ldc:4 == 150 <ldc Register a, Constant 0>
			ldc:5 == 151 <ldc Register b, Constant 12>
			ldc:6 == 152 <shl Register a, Register a, Register b>
			ldc:7 == 153 <ldc Register b, Constant 3>
			ldc:8 == 154 <or Register b, Register a, Register b>
		pop_mem_v:12 == 155 <stb Register b, Register c>
	call:44 == 156 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 156 <.define val Register c>
		pop_mem_v:7 == 156 <.define addr Constant 2>
		pop_mem_v:9 == 156 <@pop_reg Register c>
			pop_reg:10 == 156 <.define registerToLoad Register c>
			pop_reg:13 == 156 <ldc Register a, Constant 0>
			pop_reg:14 == 157 <ldb Register a, Register a>
			pop_reg:15 == 158 <ldc Register b, Constant 1>
			pop_reg:16 == 159 <sub Register a, Register a, Register b>
			pop_reg:17 == 160 <ldc Register b, Constant 0>
			pop_reg:18 == 161 <stb Register b, Register a>
			pop_reg:22 == 162 <ldb Register a, Register c>
		pop_mem_v:11 == 163 <@ldc Register b, Constant 2>
			ldc:1 == 163 <.define writeReg Register b>
			ldc:2 == 163 <.define const Constant 2>
			ldc:4 == 163 <ldc Register a, Constant 0>
			ldc:5 == 164 <ldc Register b, Constant 12>
			ldc:6 == 165 <shl Register a, Register a, Register b>
			ldc:7 == 166 <ldc Register b, Constant 2>
			ldc:8 == 167 <or Register b, Register a, Register b>
		pop_mem_v:12 == 168 <stb Register b, Register c>
	call:46 == 169 <ldc Register c, Constant 0>
	call:47 == 170 <ldb Register c, Register d>
pong.pa2:65 == 171 <ldc Register b, Constant 28>
pong.pa2:66 == 172 <ldc Register a, Constant 16>
pong.pa2:67 == 173 <stb Register a, Register b>
pong.pa2:68 == 174 <ldc Register a, Constant 17>
pong.pa2:69 == 175 <stb Register a, Register b>
pong.pa2:74 == 176 <@call Constant 736, Constant 0>
	call:11 == 176 <.define functionLabel Constant 736>
	call:12 == 176 <.define argcount Constant 0>
	call:15 == 176 <@push_mem Constant 2>
		push_mem:6 == 176 <.define addr Register b>
		push_mem:7 == 176 <.define value Register b>
		push_mem:9 == 176 <@ldc Register b, Constant 2>
			ldc:1 == 176 <.define writeReg Register b>
			ldc:2 == 176 <.define const Constant 2>
			ldc:4 == 176 <ldc Register a, Constant 0>
			ldc:5 == 177 <ldc Register b, Constant 12>
			ldc:6 == 178 <shl Register a, Register a, Register b>
			ldc:7 == 179 <ldc Register b, Constant 2>
			ldc:8 == 180 <or Register b, Register a, Register b>
		push_mem:10 == 181 <ldb Register b, Register b>
		push_mem:12 == 182 <@push_reg Register b>
			push_reg:10 == 182 <.define registerToPush Register b>
			push_reg:13 == 182 <ldc Register a, Constant 0>
			push_reg:14 == 183 <ldb Register a, Register a>
			push_reg:15 == 184 <stb Register a, Register b>
			push_reg:19 == 185 <ldc Register b, Constant 1>
			push_reg:20 == 186 <add Register a, Register a, Register b>
			push_reg:21 == 187 <ldc Register b, Constant 0>
			push_reg:22 == 188 <stb Register b, Register a>
	call:16 == 189 <@push_mem Constant 3>
		push_mem:6 == 189 <.define addr Register b>
		push_mem:7 == 189 <.define value Register b>
		push_mem:9 == 189 <@ldc Register b, Constant 3>
			ldc:1 == 189 <.define writeReg Register b>
			ldc:2 == 189 <.define const Constant 3>
			ldc:4 == 189 <ldc Register a, Constant 0>
			ldc:5 == 190 <ldc Register b, Constant 12>
			ldc:6 == 191 <shl Register a, Register a, Register b>
			ldc:7 == 192 <ldc Register b, Constant 3>
			ldc:8 == 193 <or Register b, Register a, Register b>
		push_mem:10 == 194 <ldb Register b, Register b>
		push_mem:12 == 195 <@push_reg Register b>
			push_reg:10 == 195 <.define registerToPush Register b>
			push_reg:13 == 195 <ldc Register a, Constant 0>
			push_reg:14 == 196 <ldb Register a, Register a>
			push_reg:15 == 197 <stb Register a, Register b>
			push_reg:19 == 198 <ldc Register b, Constant 1>
			push_reg:20 == 199 <add Register a, Register a, Register b>
			push_reg:21 == 200 <ldc Register b, Constant 0>
			push_reg:22 == 201 <stb Register b, Register a>
	call:19 == 202 <@push_const Constant 314>
		push_const:6 == 202 <.define constantToPush Constant 314>
		push_const:12 == 202 <@ldc Register b, Constant 314>
			ldc:1 == 202 <.define writeReg Register b>
			ldc:2 == 202 <.define const Constant 314>
			ldc:4 == 202 <ldc Register a, Constant 0>
			ldc:5 == 203 <ldc Register b, Constant 12>
			ldc:6 == 204 <shl Register a, Register a, Register b>
			ldc:7 == 205 <ldc Register b, Constant 314>
			ldc:8 == 206 <or Register b, Register a, Register b>
		push_const:14 == 207 <@push_reg Register b>
			push_reg:10 == 207 <.define registerToPush Register b>
			push_reg:13 == 207 <ldc Register a, Constant 0>
			push_reg:14 == 208 <ldb Register a, Register a>
			push_reg:15 == 209 <stb Register a, Register b>
			push_reg:19 == 210 <ldc Register b, Constant 1>
			push_reg:20 == 211 <add Register a, Register a, Register b>
			push_reg:21 == 212 <ldc Register b, Constant 0>
			push_reg:22 == 213 <stb Register b, Register a>
	call:24 == 214 <@push_mem Constant 0>
		push_mem:6 == 214 <.define addr Register b>
		push_mem:7 == 214 <.define value Register b>
		push_mem:9 == 214 <@ldc Register b, Constant 0>
			ldc:1 == 214 <.define writeReg Register b>
			ldc:2 == 214 <.define const Constant 0>
			ldc:4 == 214 <ldc Register a, Constant 0>
			ldc:5 == 215 <ldc Register b, Constant 12>
			ldc:6 == 216 <shl Register a, Register a, Register b>
			ldc:7 == 217 <ldc Register b, Constant 0>
			ldc:8 == 218 <or Register b, Register a, Register b>
		push_mem:10 == 219 <ldb Register b, Register b>
		push_mem:12 == 220 <@push_reg Register b>
			push_reg:10 == 220 <.define registerToPush Register b>
			push_reg:13 == 220 <ldc Register a, Constant 0>
			push_reg:14 == 221 <ldb Register a, Register a>
			push_reg:15 == 222 <stb Register a, Register b>
			push_reg:19 == 223 <ldc Register b, Constant 1>
			push_reg:20 == 224 <add Register a, Register a, Register b>
			push_reg:21 == 225 <ldc Register b, Constant 0>
			push_reg:22 == 226 <stb Register b, Register a>
	call:26 == 227 <@push_const Constant 3>
		push_const:6 == 227 <.define constantToPush Constant 3>
		push_const:12 == 227 <@ldc Register b, Constant 3>
			ldc:1 == 227 <.define writeReg Register b>
			ldc:2 == 227 <.define const Constant 3>
			ldc:4 == 227 <ldc Register a, Constant 0>
			ldc:5 == 228 <ldc Register b, Constant 12>
			ldc:6 == 229 <shl Register a, Register a, Register b>
			ldc:7 == 230 <ldc Register b, Constant 3>
			ldc:8 == 231 <or Register b, Register a, Register b>
		push_const:14 == 232 <@push_reg Register b>
			push_reg:10 == 232 <.define registerToPush Register b>
			push_reg:13 == 232 <ldc Register a, Constant 0>
			push_reg:14 == 233 <ldb Register a, Register a>
			push_reg:15 == 234 <stb Register a, Register b>
			push_reg:19 == 235 <ldc Register b, Constant 1>
			push_reg:20 == 236 <add Register a, Register a, Register b>
			push_reg:21 == 237 <ldc Register b, Constant 0>
			push_reg:22 == 238 <stb Register b, Register a>
	call:27 == 239 <@push_const Constant 0>
		push_const:6 == 239 <.define constantToPush Constant 0>
		push_const:12 == 239 <@ldc Register b, Constant 0>
			ldc:1 == 239 <.define writeReg Register b>
			ldc:2 == 239 <.define const Constant 0>
			ldc:4 == 239 <ldc Register a, Constant 0>
			ldc:5 == 240 <ldc Register b, Constant 12>
			ldc:6 == 241 <shl Register a, Register a, Register b>
			ldc:7 == 242 <ldc Register b, Constant 0>
			ldc:8 == 243 <or Register b, Register a, Register b>
		push_const:14 == 244 <@push_reg Register b>
			push_reg:10 == 244 <.define registerToPush Register b>
			push_reg:13 == 244 <ldc Register a, Constant 0>
			push_reg:14 == 245 <ldb Register a, Register a>
			push_reg:15 == 246 <stb Register a, Register b>
			push_reg:19 == 247 <ldc Register b, Constant 1>
			push_reg:20 == 248 <add Register a, Register a, Register b>
			push_reg:21 == 249 <ldc Register b, Constant 0>
			push_reg:22 == 250 <stb Register b, Register a>
	call:28 == 251 <@add >
		add:3 == 251 <.define lhs Register c>
		add:4 == 251 <.define rhs Register d>
		add:5 == 251 <.define result Register d>
		add:7 == 251 <@pop_reg Register c>
			pop_reg:10 == 251 <.define registerToLoad Register c>
			pop_reg:13 == 251 <ldc Register a, Constant 0>
			pop_reg:14 == 252 <ldb Register a, Register a>
			pop_reg:15 == 253 <ldc Register b, Constant 1>
			pop_reg:16 == 254 <sub Register a, Register a, Register b>
			pop_reg:17 == 255 <ldc Register b, Constant 0>
			pop_reg:18 == 256 <stb Register b, Register a>
			pop_reg:22 == 257 <ldb Register a, Register c>
		add:8 == 258 <@pop_reg Register d>
			pop_reg:10 == 258 <.define registerToLoad Register d>
			pop_reg:13 == 258 <ldc Register a, Constant 0>
			pop_reg:14 == 259 <ldb Register a, Register a>
			pop_reg:15 == 260 <ldc Register b, Constant 1>
			pop_reg:16 == 261 <sub Register a, Register a, Register b>
			pop_reg:17 == 262 <ldc Register b, Constant 0>
			pop_reg:18 == 263 <stb Register b, Register a>
			pop_reg:22 == 264 <ldb Register a, Register d>
		add:9 == 265 <add Register d, Register c, Register d>
		add:10 == 266 <@push_reg Register d>
			push_reg:10 == 266 <.define registerToPush Register d>
			push_reg:13 == 266 <ldc Register a, Constant 0>
			push_reg:14 == 267 <ldb Register a, Register a>
			push_reg:15 == 268 <stb Register a, Register d>
			push_reg:19 == 269 <ldc Register b, Constant 1>
			push_reg:20 == 270 <add Register a, Register a, Register b>
			push_reg:21 == 271 <ldc Register b, Constant 0>
			push_reg:22 == 272 <stb Register b, Register a>
	call:29 == 273 <@sub >
		sub:3 == 273 <.define lhs Register c>
		sub:4 == 273 <.define rhs Register d>
		sub:5 == 273 <.define result Register d>
		sub:7 == 273 <@pop_reg Register d>
			pop_reg:10 == 273 <.define registerToLoad Register d>
			pop_reg:13 == 273 <ldc Register a, Constant 0>
			pop_reg:14 == 274 <ldb Register a, Register a>
			pop_reg:15 == 275 <ldc Register b, Constant 1>
			pop_reg:16 == 276 <sub Register a, Register a, Register b>
			pop_reg:17 == 277 <ldc Register b, Constant 0>
			pop_reg:18 == 278 <stb Register b, Register a>
			pop_reg:22 == 279 <ldb Register a, Register d>
		sub:8 == 280 <@pop_reg Register c>
			pop_reg:10 == 280 <.define registerToLoad Register c>
			pop_reg:13 == 280 <ldc Register a, Constant 0>
			pop_reg:14 == 281 <ldb Register a, Register a>
			pop_reg:15 == 282 <ldc Register b, Constant 1>
			pop_reg:16 == 283 <sub Register a, Register a, Register b>
			pop_reg:17 == 284 <ldc Register b, Constant 0>
			pop_reg:18 == 285 <stb Register b, Register a>
			pop_reg:22 == 286 <ldb Register a, Register c>
		sub:9 == 287 <sub Register d, Register c, Register d>
		sub:10 == 288 <@push_reg Register d>
			push_reg:10 == 288 <.define registerToPush Register d>
			push_reg:13 == 288 <ldc Register a, Constant 0>
			push_reg:14 == 289 <ldb Register a, Register a>
			push_reg:15 == 290 <stb Register a, Register d>
			push_reg:19 == 291 <ldc Register b, Constant 1>
			push_reg:20 == 292 <add Register a, Register a, Register b>
			push_reg:21 == 293 <ldc Register b, Constant 0>
			push_reg:22 == 294 <stb Register b, Register a>
	call:30 == 295 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 295 <.define val Register c>
		pop_mem_v:7 == 295 <.define addr Constant 2>
		pop_mem_v:9 == 295 <@pop_reg Register c>
			pop_reg:10 == 295 <.define registerToLoad Register c>
			pop_reg:13 == 295 <ldc Register a, Constant 0>
			pop_reg:14 == 296 <ldb Register a, Register a>
			pop_reg:15 == 297 <ldc Register b, Constant 1>
			pop_reg:16 == 298 <sub Register a, Register a, Register b>
			pop_reg:17 == 299 <ldc Register b, Constant 0>
			pop_reg:18 == 300 <stb Register b, Register a>
			pop_reg:22 == 301 <ldb Register a, Register c>
		pop_mem_v:11 == 302 <@ldc Register b, Constant 2>
			ldc:1 == 302 <.define writeReg Register b>
			ldc:2 == 302 <.define const Constant 2>
			ldc:4 == 302 <ldc Register a, Constant 0>
			ldc:5 == 303 <ldc Register b, Constant 12>
			ldc:6 == 304 <shl Register a, Register a, Register b>
			ldc:7 == 305 <ldc Register b, Constant 2>
			ldc:8 == 306 <or Register b, Register a, Register b>
		pop_mem_v:12 == 307 <stb Register b, Register c>
	call:32 == 308 <@ldc Register a, Constant 736>
		ldc:1 == 308 <.define writeReg Register a>
		ldc:2 == 308 <.define const Constant 736>
		ldc:4 == 308 <ldc Register a, Constant 0>
		ldc:5 == 309 <ldc Register b, Constant 12>
		ldc:6 == 310 <shl Register a, Register a, Register b>
		ldc:7 == 311 <ldc Register b, Constant 736>
		ldc:8 == 312 <or Register a, Register a, Register b>
	call:33 == 313 <jmp Register a>
	call:38 == 314 <ldc Register d, Constant 2>
	call:41 == 315 <ldb Register d, Register d>
	call:43 == 316 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 316 <.define val Register c>
		pop_mem_v:7 == 316 <.define addr Constant 3>
		pop_mem_v:9 == 316 <@pop_reg Register c>
			pop_reg:10 == 316 <.define registerToLoad Register c>
			pop_reg:13 == 316 <ldc Register a, Constant 0>
			pop_reg:14 == 317 <ldb Register a, Register a>
			pop_reg:15 == 318 <ldc Register b, Constant 1>
			pop_reg:16 == 319 <sub Register a, Register a, Register b>
			pop_reg:17 == 320 <ldc Register b, Constant 0>
			pop_reg:18 == 321 <stb Register b, Register a>
			pop_reg:22 == 322 <ldb Register a, Register c>
		pop_mem_v:11 == 323 <@ldc Register b, Constant 3>
			ldc:1 == 323 <.define writeReg Register b>
			ldc:2 == 323 <.define const Constant 3>
			ldc:4 == 323 <ldc Register a, Constant 0>
			ldc:5 == 324 <ldc Register b, Constant 12>
			ldc:6 == 325 <shl Register a, Register a, Register b>
			ldc:7 == 326 <ldc Register b, Constant 3>
			ldc:8 == 327 <or Register b, Register a, Register b>
		pop_mem_v:12 == 328 <stb Register b, Register c>
	call:44 == 329 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 329 <.define val Register c>
		pop_mem_v:7 == 329 <.define addr Constant 2>
		pop_mem_v:9 == 329 <@pop_reg Register c>
			pop_reg:10 == 329 <.define registerToLoad Register c>
			pop_reg:13 == 329 <ldc Register a, Constant 0>
			pop_reg:14 == 330 <ldb Register a, Register a>
			pop_reg:15 == 331 <ldc Register b, Constant 1>
			pop_reg:16 == 332 <sub Register a, Register a, Register b>
			pop_reg:17 == 333 <ldc Register b, Constant 0>
			pop_reg:18 == 334 <stb Register b, Register a>
			pop_reg:22 == 335 <ldb Register a, Register c>
		pop_mem_v:11 == 336 <@ldc Register b, Constant 2>
			ldc:1 == 336 <.define writeReg Register b>
			ldc:2 == 336 <.define const Constant 2>
			ldc:4 == 336 <ldc Register a, Constant 0>
			ldc:5 == 337 <ldc Register b, Constant 12>
			ldc:6 == 338 <shl Register a, Register a, Register b>
			ldc:7 == 339 <ldc Register b, Constant 2>
			ldc:8 == 340 <or Register b, Register a, Register b>
		pop_mem_v:12 == 341 <stb Register b, Register c>
	call:46 == 342 <ldc Register c, Constant 0>
	call:47 == 343 <ldb Register c, Register d>
pong.pa2:76 == 344 <@call Constant 800, Constant 0>
	call:11 == 344 <.define functionLabel Constant 800>
	call:12 == 344 <.define argcount Constant 0>
	call:15 == 344 <@push_mem Constant 2>
		push_mem:6 == 344 <.define addr Register b>
		push_mem:7 == 344 <.define value Register b>
		push_mem:9 == 344 <@ldc Register b, Constant 2>
			ldc:1 == 344 <.define writeReg Register b>
			ldc:2 == 344 <.define const Constant 2>
			ldc:4 == 344 <ldc Register a, Constant 0>
			ldc:5 == 345 <ldc Register b, Constant 12>
			ldc:6 == 346 <shl Register a, Register a, Register b>
			ldc:7 == 347 <ldc Register b, Constant 2>
			ldc:8 == 348 <or Register b, Register a, Register b>
		push_mem:10 == 349 <ldb Register b, Register b>
		push_mem:12 == 350 <@push_reg Register b>
			push_reg:10 == 350 <.define registerToPush Register b>
			push_reg:13 == 350 <ldc Register a, Constant 0>
			push_reg:14 == 351 <ldb Register a, Register a>
			push_reg:15 == 352 <stb Register a, Register b>
			push_reg:19 == 353 <ldc Register b, Constant 1>
			push_reg:20 == 354 <add Register a, Register a, Register b>
			push_reg:21 == 355 <ldc Register b, Constant 0>
			push_reg:22 == 356 <stb Register b, Register a>
	call:16 == 357 <@push_mem Constant 3>
		push_mem:6 == 357 <.define addr Register b>
		push_mem:7 == 357 <.define value Register b>
		push_mem:9 == 357 <@ldc Register b, Constant 3>
			ldc:1 == 357 <.define writeReg Register b>
			ldc:2 == 357 <.define const Constant 3>
			ldc:4 == 357 <ldc Register a, Constant 0>
			ldc:5 == 358 <ldc Register b, Constant 12>
			ldc:6 == 359 <shl Register a, Register a, Register b>
			ldc:7 == 360 <ldc Register b, Constant 3>
			ldc:8 == 361 <or Register b, Register a, Register b>
		push_mem:10 == 362 <ldb Register b, Register b>
		push_mem:12 == 363 <@push_reg Register b>
			push_reg:10 == 363 <.define registerToPush Register b>
			push_reg:13 == 363 <ldc Register a, Constant 0>
			push_reg:14 == 364 <ldb Register a, Register a>
			push_reg:15 == 365 <stb Register a, Register b>
			push_reg:19 == 366 <ldc Register b, Constant 1>
			push_reg:20 == 367 <add Register a, Register a, Register b>
			push_reg:21 == 368 <ldc Register b, Constant 0>
			push_reg:22 == 369 <stb Register b, Register a>
	call:19 == 370 <@push_const Constant 482>
		push_const:6 == 370 <.define constantToPush Constant 482>
		push_const:12 == 370 <@ldc Register b, Constant 482>
			ldc:1 == 370 <.define writeReg Register b>
			ldc:2 == 370 <.define const Constant 482>
			ldc:4 == 370 <ldc Register a, Constant 0>
			ldc:5 == 371 <ldc Register b, Constant 12>
			ldc:6 == 372 <shl Register a, Register a, Register b>
			ldc:7 == 373 <ldc Register b, Constant 482>
			ldc:8 == 374 <or Register b, Register a, Register b>
		push_const:14 == 375 <@push_reg Register b>
			push_reg:10 == 375 <.define registerToPush Register b>
			push_reg:13 == 375 <ldc Register a, Constant 0>
			push_reg:14 == 376 <ldb Register a, Register a>
			push_reg:15 == 377 <stb Register a, Register b>
			push_reg:19 == 378 <ldc Register b, Constant 1>
			push_reg:20 == 379 <add Register a, Register a, Register b>
			push_reg:21 == 380 <ldc Register b, Constant 0>
			push_reg:22 == 381 <stb Register b, Register a>
	call:24 == 382 <@push_mem Constant 0>
		push_mem:6 == 382 <.define addr Register b>
		push_mem:7 == 382 <.define value Register b>
		push_mem:9 == 382 <@ldc Register b, Constant 0>
			ldc:1 == 382 <.define writeReg Register b>
			ldc:2 == 382 <.define const Constant 0>
			ldc:4 == 382 <ldc Register a, Constant 0>
			ldc:5 == 383 <ldc Register b, Constant 12>
			ldc:6 == 384 <shl Register a, Register a, Register b>
			ldc:7 == 385 <ldc Register b, Constant 0>
			ldc:8 == 386 <or Register b, Register a, Register b>
		push_mem:10 == 387 <ldb Register b, Register b>
		push_mem:12 == 388 <@push_reg Register b>
			push_reg:10 == 388 <.define registerToPush Register b>
			push_reg:13 == 388 <ldc Register a, Constant 0>
			push_reg:14 == 389 <ldb Register a, Register a>
			push_reg:15 == 390 <stb Register a, Register b>
			push_reg:19 == 391 <ldc Register b, Constant 1>
			push_reg:20 == 392 <add Register a, Register a, Register b>
			push_reg:21 == 393 <ldc Register b, Constant 0>
			push_reg:22 == 394 <stb Register b, Register a>
	call:26 == 395 <@push_const Constant 3>
		push_const:6 == 395 <.define constantToPush Constant 3>
		push_const:12 == 395 <@ldc Register b, Constant 3>
			ldc:1 == 395 <.define writeReg Register b>
			ldc:2 == 395 <.define const Constant 3>
			ldc:4 == 395 <ldc Register a, Constant 0>
			ldc:5 == 396 <ldc Register b, Constant 12>
			ldc:6 == 397 <shl Register a, Register a, Register b>
			ldc:7 == 398 <ldc Register b, Constant 3>
			ldc:8 == 399 <or Register b, Register a, Register b>
		push_const:14 == 400 <@push_reg Register b>
			push_reg:10 == 400 <.define registerToPush Register b>
			push_reg:13 == 400 <ldc Register a, Constant 0>
			push_reg:14 == 401 <ldb Register a, Register a>
			push_reg:15 == 402 <stb Register a, Register b>
			push_reg:19 == 403 <ldc Register b, Constant 1>
			push_reg:20 == 404 <add Register a, Register a, Register b>
			push_reg:21 == 405 <ldc Register b, Constant 0>
			push_reg:22 == 406 <stb Register b, Register a>
	call:27 == 407 <@push_const Constant 0>
		push_const:6 == 407 <.define constantToPush Constant 0>
		push_const:12 == 407 <@ldc Register b, Constant 0>
			ldc:1 == 407 <.define writeReg Register b>
			ldc:2 == 407 <.define const Constant 0>
			ldc:4 == 407 <ldc Register a, Constant 0>
			ldc:5 == 408 <ldc Register b, Constant 12>
			ldc:6 == 409 <shl Register a, Register a, Register b>
			ldc:7 == 410 <ldc Register b, Constant 0>
			ldc:8 == 411 <or Register b, Register a, Register b>
		push_const:14 == 412 <@push_reg Register b>
			push_reg:10 == 412 <.define registerToPush Register b>
			push_reg:13 == 412 <ldc Register a, Constant 0>
			push_reg:14 == 413 <ldb Register a, Register a>
			push_reg:15 == 414 <stb Register a, Register b>
			push_reg:19 == 415 <ldc Register b, Constant 1>
			push_reg:20 == 416 <add Register a, Register a, Register b>
			push_reg:21 == 417 <ldc Register b, Constant 0>
			push_reg:22 == 418 <stb Register b, Register a>
	call:28 == 419 <@add >
		add:3 == 419 <.define lhs Register c>
		add:4 == 419 <.define rhs Register d>
		add:5 == 419 <.define result Register d>
		add:7 == 419 <@pop_reg Register c>
			pop_reg:10 == 419 <.define registerToLoad Register c>
			pop_reg:13 == 419 <ldc Register a, Constant 0>
			pop_reg:14 == 420 <ldb Register a, Register a>
			pop_reg:15 == 421 <ldc Register b, Constant 1>
			pop_reg:16 == 422 <sub Register a, Register a, Register b>
			pop_reg:17 == 423 <ldc Register b, Constant 0>
			pop_reg:18 == 424 <stb Register b, Register a>
			pop_reg:22 == 425 <ldb Register a, Register c>
		add:8 == 426 <@pop_reg Register d>
			pop_reg:10 == 426 <.define registerToLoad Register d>
			pop_reg:13 == 426 <ldc Register a, Constant 0>
			pop_reg:14 == 427 <ldb Register a, Register a>
			pop_reg:15 == 428 <ldc Register b, Constant 1>
			pop_reg:16 == 429 <sub Register a, Register a, Register b>
			pop_reg:17 == 430 <ldc Register b, Constant 0>
			pop_reg:18 == 431 <stb Register b, Register a>
			pop_reg:22 == 432 <ldb Register a, Register d>
		add:9 == 433 <add Register d, Register c, Register d>
		add:10 == 434 <@push_reg Register d>
			push_reg:10 == 434 <.define registerToPush Register d>
			push_reg:13 == 434 <ldc Register a, Constant 0>
			push_reg:14 == 435 <ldb Register a, Register a>
			push_reg:15 == 436 <stb Register a, Register d>
			push_reg:19 == 437 <ldc Register b, Constant 1>
			push_reg:20 == 438 <add Register a, Register a, Register b>
			push_reg:21 == 439 <ldc Register b, Constant 0>
			push_reg:22 == 440 <stb Register b, Register a>
	call:29 == 441 <@sub >
		sub:3 == 441 <.define lhs Register c>
		sub:4 == 441 <.define rhs Register d>
		sub:5 == 441 <.define result Register d>
		sub:7 == 441 <@pop_reg Register d>
			pop_reg:10 == 441 <.define registerToLoad Register d>
			pop_reg:13 == 441 <ldc Register a, Constant 0>
			pop_reg:14 == 442 <ldb Register a, Register a>
			pop_reg:15 == 443 <ldc Register b, Constant 1>
			pop_reg:16 == 444 <sub Register a, Register a, Register b>
			pop_reg:17 == 445 <ldc Register b, Constant 0>
			pop_reg:18 == 446 <stb Register b, Register a>
			pop_reg:22 == 447 <ldb Register a, Register d>
		sub:8 == 448 <@pop_reg Register c>
			pop_reg:10 == 448 <.define registerToLoad Register c>
			pop_reg:13 == 448 <ldc Register a, Constant 0>
			pop_reg:14 == 449 <ldb Register a, Register a>
			pop_reg:15 == 450 <ldc Register b, Constant 1>
			pop_reg:16 == 451 <sub Register a, Register a, Register b>
			pop_reg:17 == 452 <ldc Register b, Constant 0>
			pop_reg:18 == 453 <stb Register b, Register a>
			pop_reg:22 == 454 <ldb Register a, Register c>
		sub:9 == 455 <sub Register d, Register c, Register d>
		sub:10 == 456 <@push_reg Register d>
			push_reg:10 == 456 <.define registerToPush Register d>
			push_reg:13 == 456 <ldc Register a, Constant 0>
			push_reg:14 == 457 <ldb Register a, Register a>
			push_reg:15 == 458 <stb Register a, Register d>
			push_reg:19 == 459 <ldc Register b, Constant 1>
			push_reg:20 == 460 <add Register a, Register a, Register b>
			push_reg:21 == 461 <ldc Register b, Constant 0>
			push_reg:22 == 462 <stb Register b, Register a>
	call:30 == 463 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 463 <.define val Register c>
		pop_mem_v:7 == 463 <.define addr Constant 2>
		pop_mem_v:9 == 463 <@pop_reg Register c>
			pop_reg:10 == 463 <.define registerToLoad Register c>
			pop_reg:13 == 463 <ldc Register a, Constant 0>
			pop_reg:14 == 464 <ldb Register a, Register a>
			pop_reg:15 == 465 <ldc Register b, Constant 1>
			pop_reg:16 == 466 <sub Register a, Register a, Register b>
			pop_reg:17 == 467 <ldc Register b, Constant 0>
			pop_reg:18 == 468 <stb Register b, Register a>
			pop_reg:22 == 469 <ldb Register a, Register c>
		pop_mem_v:11 == 470 <@ldc Register b, Constant 2>
			ldc:1 == 470 <.define writeReg Register b>
			ldc:2 == 470 <.define const Constant 2>
			ldc:4 == 470 <ldc Register a, Constant 0>
			ldc:5 == 471 <ldc Register b, Constant 12>
			ldc:6 == 472 <shl Register a, Register a, Register b>
			ldc:7 == 473 <ldc Register b, Constant 2>
			ldc:8 == 474 <or Register b, Register a, Register b>
		pop_mem_v:12 == 475 <stb Register b, Register c>
	call:32 == 476 <@ldc Register a, Constant 800>
		ldc:1 == 476 <.define writeReg Register a>
		ldc:2 == 476 <.define const Constant 800>
		ldc:4 == 476 <ldc Register a, Constant 0>
		ldc:5 == 477 <ldc Register b, Constant 12>
		ldc:6 == 478 <shl Register a, Register a, Register b>
		ldc:7 == 479 <ldc Register b, Constant 800>
		ldc:8 == 480 <or Register a, Register a, Register b>
	call:33 == 481 <jmp Register a>
	call:38 == 482 <ldc Register d, Constant 2>
	call:41 == 483 <ldb Register d, Register d>
	call:43 == 484 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 484 <.define val Register c>
		pop_mem_v:7 == 484 <.define addr Constant 3>
		pop_mem_v:9 == 484 <@pop_reg Register c>
			pop_reg:10 == 484 <.define registerToLoad Register c>
			pop_reg:13 == 484 <ldc Register a, Constant 0>
			pop_reg:14 == 485 <ldb Register a, Register a>
			pop_reg:15 == 486 <ldc Register b, Constant 1>
			pop_reg:16 == 487 <sub Register a, Register a, Register b>
			pop_reg:17 == 488 <ldc Register b, Constant 0>
			pop_reg:18 == 489 <stb Register b, Register a>
			pop_reg:22 == 490 <ldb Register a, Register c>
		pop_mem_v:11 == 491 <@ldc Register b, Constant 3>
			ldc:1 == 491 <.define writeReg Register b>
			ldc:2 == 491 <.define const Constant 3>
			ldc:4 == 491 <ldc Register a, Constant 0>
			ldc:5 == 492 <ldc Register b, Constant 12>
			ldc:6 == 493 <shl Register a, Register a, Register b>
			ldc:7 == 494 <ldc Register b, Constant 3>
			ldc:8 == 495 <or Register b, Register a, Register b>
		pop_mem_v:12 == 496 <stb Register b, Register c>
	call:44 == 497 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 497 <.define val Register c>
		pop_mem_v:7 == 497 <.define addr Constant 2>
		pop_mem_v:9 == 497 <@pop_reg Register c>
			pop_reg:10 == 497 <.define registerToLoad Register c>
			pop_reg:13 == 497 <ldc Register a, Constant 0>
			pop_reg:14 == 498 <ldb Register a, Register a>
			pop_reg:15 == 499 <ldc Register b, Constant 1>
			pop_reg:16 == 500 <sub Register a, Register a, Register b>
			pop_reg:17 == 501 <ldc Register b, Constant 0>
			pop_reg:18 == 502 <stb Register b, Register a>
			pop_reg:22 == 503 <ldb Register a, Register c>
		pop_mem_v:11 == 504 <@ldc Register b, Constant 2>
			ldc:1 == 504 <.define writeReg Register b>
			ldc:2 == 504 <.define const Constant 2>
			ldc:4 == 504 <ldc Register a, Constant 0>
			ldc:5 == 505 <ldc Register b, Constant 12>
			ldc:6 == 506 <shl Register a, Register a, Register b>
			ldc:7 == 507 <ldc Register b, Constant 2>
			ldc:8 == 508 <or Register b, Register a, Register b>
		pop_mem_v:12 == 509 <stb Register b, Register c>
	call:46 == 510 <ldc Register c, Constant 0>
	call:47 == 511 <ldb Register c, Register d>
pong.pa2:77 == 512 <@call Constant 941, Constant 0>
	call:11 == 512 <.define functionLabel Constant 941>
	call:12 == 512 <.define argcount Constant 0>
	call:15 == 512 <@push_mem Constant 2>
		push_mem:6 == 512 <.define addr Register b>
		push_mem:7 == 512 <.define value Register b>
		push_mem:9 == 512 <@ldc Register b, Constant 2>
			ldc:1 == 512 <.define writeReg Register b>
			ldc:2 == 512 <.define const Constant 2>
			ldc:4 == 512 <ldc Register a, Constant 0>
			ldc:5 == 513 <ldc Register b, Constant 12>
			ldc:6 == 514 <shl Register a, Register a, Register b>
			ldc:7 == 515 <ldc Register b, Constant 2>
			ldc:8 == 516 <or Register b, Register a, Register b>
		push_mem:10 == 517 <ldb Register b, Register b>
		push_mem:12 == 518 <@push_reg Register b>
			push_reg:10 == 518 <.define registerToPush Register b>
			push_reg:13 == 518 <ldc Register a, Constant 0>
			push_reg:14 == 519 <ldb Register a, Register a>
			push_reg:15 == 520 <stb Register a, Register b>
			push_reg:19 == 521 <ldc Register b, Constant 1>
			push_reg:20 == 522 <add Register a, Register a, Register b>
			push_reg:21 == 523 <ldc Register b, Constant 0>
			push_reg:22 == 524 <stb Register b, Register a>
	call:16 == 525 <@push_mem Constant 3>
		push_mem:6 == 525 <.define addr Register b>
		push_mem:7 == 525 <.define value Register b>
		push_mem:9 == 525 <@ldc Register b, Constant 3>
			ldc:1 == 525 <.define writeReg Register b>
			ldc:2 == 525 <.define const Constant 3>
			ldc:4 == 525 <ldc Register a, Constant 0>
			ldc:5 == 526 <ldc Register b, Constant 12>
			ldc:6 == 527 <shl Register a, Register a, Register b>
			ldc:7 == 528 <ldc Register b, Constant 3>
			ldc:8 == 529 <or Register b, Register a, Register b>
		push_mem:10 == 530 <ldb Register b, Register b>
		push_mem:12 == 531 <@push_reg Register b>
			push_reg:10 == 531 <.define registerToPush Register b>
			push_reg:13 == 531 <ldc Register a, Constant 0>
			push_reg:14 == 532 <ldb Register a, Register a>
			push_reg:15 == 533 <stb Register a, Register b>
			push_reg:19 == 534 <ldc Register b, Constant 1>
			push_reg:20 == 535 <add Register a, Register a, Register b>
			push_reg:21 == 536 <ldc Register b, Constant 0>
			push_reg:22 == 537 <stb Register b, Register a>
	call:19 == 538 <@push_const Constant 650>
		push_const:6 == 538 <.define constantToPush Constant 650>
		push_const:12 == 538 <@ldc Register b, Constant 650>
			ldc:1 == 538 <.define writeReg Register b>
			ldc:2 == 538 <.define const Constant 650>
			ldc:4 == 538 <ldc Register a, Constant 0>
			ldc:5 == 539 <ldc Register b, Constant 12>
			ldc:6 == 540 <shl Register a, Register a, Register b>
			ldc:7 == 541 <ldc Register b, Constant 650>
			ldc:8 == 542 <or Register b, Register a, Register b>
		push_const:14 == 543 <@push_reg Register b>
			push_reg:10 == 543 <.define registerToPush Register b>
			push_reg:13 == 543 <ldc Register a, Constant 0>
			push_reg:14 == 544 <ldb Register a, Register a>
			push_reg:15 == 545 <stb Register a, Register b>
			push_reg:19 == 546 <ldc Register b, Constant 1>
			push_reg:20 == 547 <add Register a, Register a, Register b>
			push_reg:21 == 548 <ldc Register b, Constant 0>
			push_reg:22 == 549 <stb Register b, Register a>
	call:24 == 550 <@push_mem Constant 0>
		push_mem:6 == 550 <.define addr Register b>
		push_mem:7 == 550 <.define value Register b>
		push_mem:9 == 550 <@ldc Register b, Constant 0>
			ldc:1 == 550 <.define writeReg Register b>
			ldc:2 == 550 <.define const Constant 0>
			ldc:4 == 550 <ldc Register a, Constant 0>
			ldc:5 == 551 <ldc Register b, Constant 12>
			ldc:6 == 552 <shl Register a, Register a, Register b>
			ldc:7 == 553 <ldc Register b, Constant 0>
			ldc:8 == 554 <or Register b, Register a, Register b>
		push_mem:10 == 555 <ldb Register b, Register b>
		push_mem:12 == 556 <@push_reg Register b>
			push_reg:10 == 556 <.define registerToPush Register b>
			push_reg:13 == 556 <ldc Register a, Constant 0>
			push_reg:14 == 557 <ldb Register a, Register a>
			push_reg:15 == 558 <stb Register a, Register b>
			push_reg:19 == 559 <ldc Register b, Constant 1>
			push_reg:20 == 560 <add Register a, Register a, Register b>
			push_reg:21 == 561 <ldc Register b, Constant 0>
			push_reg:22 == 562 <stb Register b, Register a>
	call:26 == 563 <@push_const Constant 3>
		push_const:6 == 563 <.define constantToPush Constant 3>
		push_const:12 == 563 <@ldc Register b, Constant 3>
			ldc:1 == 563 <.define writeReg Register b>
			ldc:2 == 563 <.define const Constant 3>
			ldc:4 == 563 <ldc Register a, Constant 0>
			ldc:5 == 564 <ldc Register b, Constant 12>
			ldc:6 == 565 <shl Register a, Register a, Register b>
			ldc:7 == 566 <ldc Register b, Constant 3>
			ldc:8 == 567 <or Register b, Register a, Register b>
		push_const:14 == 568 <@push_reg Register b>
			push_reg:10 == 568 <.define registerToPush Register b>
			push_reg:13 == 568 <ldc Register a, Constant 0>
			push_reg:14 == 569 <ldb Register a, Register a>
			push_reg:15 == 570 <stb Register a, Register b>
			push_reg:19 == 571 <ldc Register b, Constant 1>
			push_reg:20 == 572 <add Register a, Register a, Register b>
			push_reg:21 == 573 <ldc Register b, Constant 0>
			push_reg:22 == 574 <stb Register b, Register a>
	call:27 == 575 <@push_const Constant 0>
		push_const:6 == 575 <.define constantToPush Constant 0>
		push_const:12 == 575 <@ldc Register b, Constant 0>
			ldc:1 == 575 <.define writeReg Register b>
			ldc:2 == 575 <.define const Constant 0>
			ldc:4 == 575 <ldc Register a, Constant 0>
			ldc:5 == 576 <ldc Register b, Constant 12>
			ldc:6 == 577 <shl Register a, Register a, Register b>
			ldc:7 == 578 <ldc Register b, Constant 0>
			ldc:8 == 579 <or Register b, Register a, Register b>
		push_const:14 == 580 <@push_reg Register b>
			push_reg:10 == 580 <.define registerToPush Register b>
			push_reg:13 == 580 <ldc Register a, Constant 0>
			push_reg:14 == 581 <ldb Register a, Register a>
			push_reg:15 == 582 <stb Register a, Register b>
			push_reg:19 == 583 <ldc Register b, Constant 1>
			push_reg:20 == 584 <add Register a, Register a, Register b>
			push_reg:21 == 585 <ldc Register b, Constant 0>
			push_reg:22 == 586 <stb Register b, Register a>
	call:28 == 587 <@add >
		add:3 == 587 <.define lhs Register c>
		add:4 == 587 <.define rhs Register d>
		add:5 == 587 <.define result Register d>
		add:7 == 587 <@pop_reg Register c>
			pop_reg:10 == 587 <.define registerToLoad Register c>
			pop_reg:13 == 587 <ldc Register a, Constant 0>
			pop_reg:14 == 588 <ldb Register a, Register a>
			pop_reg:15 == 589 <ldc Register b, Constant 1>
			pop_reg:16 == 590 <sub Register a, Register a, Register b>
			pop_reg:17 == 591 <ldc Register b, Constant 0>
			pop_reg:18 == 592 <stb Register b, Register a>
			pop_reg:22 == 593 <ldb Register a, Register c>
		add:8 == 594 <@pop_reg Register d>
			pop_reg:10 == 594 <.define registerToLoad Register d>
			pop_reg:13 == 594 <ldc Register a, Constant 0>
			pop_reg:14 == 595 <ldb Register a, Register a>
			pop_reg:15 == 596 <ldc Register b, Constant 1>
			pop_reg:16 == 597 <sub Register a, Register a, Register b>
			pop_reg:17 == 598 <ldc Register b, Constant 0>
			pop_reg:18 == 599 <stb Register b, Register a>
			pop_reg:22 == 600 <ldb Register a, Register d>
		add:9 == 601 <add Register d, Register c, Register d>
		add:10 == 602 <@push_reg Register d>
			push_reg:10 == 602 <.define registerToPush Register d>
			push_reg:13 == 602 <ldc Register a, Constant 0>
			push_reg:14 == 603 <ldb Register a, Register a>
			push_reg:15 == 604 <stb Register a, Register d>
			push_reg:19 == 605 <ldc Register b, Constant 1>
			push_reg:20 == 606 <add Register a, Register a, Register b>
			push_reg:21 == 607 <ldc Register b, Constant 0>
			push_reg:22 == 608 <stb Register b, Register a>
	call:29 == 609 <@sub >
		sub:3 == 609 <.define lhs Register c>
		sub:4 == 609 <.define rhs Register d>
		sub:5 == 609 <.define result Register d>
		sub:7 == 609 <@pop_reg Register d>
			pop_reg:10 == 609 <.define registerToLoad Register d>
			pop_reg:13 == 609 <ldc Register a, Constant 0>
			pop_reg:14 == 610 <ldb Register a, Register a>
			pop_reg:15 == 611 <ldc Register b, Constant 1>
			pop_reg:16 == 612 <sub Register a, Register a, Register b>
			pop_reg:17 == 613 <ldc Register b, Constant 0>
			pop_reg:18 == 614 <stb Register b, Register a>
			pop_reg:22 == 615 <ldb Register a, Register d>
		sub:8 == 616 <@pop_reg Register c>
			pop_reg:10 == 616 <.define registerToLoad Register c>
			pop_reg:13 == 616 <ldc Register a, Constant 0>
			pop_reg:14 == 617 <ldb Register a, Register a>
			pop_reg:15 == 618 <ldc Register b, Constant 1>
			pop_reg:16 == 619 <sub Register a, Register a, Register b>
			pop_reg:17 == 620 <ldc Register b, Constant 0>
			pop_reg:18 == 621 <stb Register b, Register a>
			pop_reg:22 == 622 <ldb Register a, Register c>
		sub:9 == 623 <sub Register d, Register c, Register d>
		sub:10 == 624 <@push_reg Register d>
			push_reg:10 == 624 <.define registerToPush Register d>
			push_reg:13 == 624 <ldc Register a, Constant 0>
			push_reg:14 == 625 <ldb Register a, Register a>
			push_reg:15 == 626 <stb Register a, Register d>
			push_reg:19 == 627 <ldc Register b, Constant 1>
			push_reg:20 == 628 <add Register a, Register a, Register b>
			push_reg:21 == 629 <ldc Register b, Constant 0>
			push_reg:22 == 630 <stb Register b, Register a>
	call:30 == 631 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 631 <.define val Register c>
		pop_mem_v:7 == 631 <.define addr Constant 2>
		pop_mem_v:9 == 631 <@pop_reg Register c>
			pop_reg:10 == 631 <.define registerToLoad Register c>
			pop_reg:13 == 631 <ldc Register a, Constant 0>
			pop_reg:14 == 632 <ldb Register a, Register a>
			pop_reg:15 == 633 <ldc Register b, Constant 1>
			pop_reg:16 == 634 <sub Register a, Register a, Register b>
			pop_reg:17 == 635 <ldc Register b, Constant 0>
			pop_reg:18 == 636 <stb Register b, Register a>
			pop_reg:22 == 637 <ldb Register a, Register c>
		pop_mem_v:11 == 638 <@ldc Register b, Constant 2>
			ldc:1 == 638 <.define writeReg Register b>
			ldc:2 == 638 <.define const Constant 2>
			ldc:4 == 638 <ldc Register a, Constant 0>
			ldc:5 == 639 <ldc Register b, Constant 12>
			ldc:6 == 640 <shl Register a, Register a, Register b>
			ldc:7 == 641 <ldc Register b, Constant 2>
			ldc:8 == 642 <or Register b, Register a, Register b>
		pop_mem_v:12 == 643 <stb Register b, Register c>
	call:32 == 644 <@ldc Register a, Constant 941>
		ldc:1 == 644 <.define writeReg Register a>
		ldc:2 == 644 <.define const Constant 941>
		ldc:4 == 644 <ldc Register a, Constant 0>
		ldc:5 == 645 <ldc Register b, Constant 12>
		ldc:6 == 646 <shl Register a, Register a, Register b>
		ldc:7 == 647 <ldc Register b, Constant 941>
		ldc:8 == 648 <or Register a, Register a, Register b>
	call:33 == 649 <jmp Register a>
	call:38 == 650 <ldc Register d, Constant 2>
	call:41 == 651 <ldb Register d, Register d>
	call:43 == 652 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 652 <.define val Register c>
		pop_mem_v:7 == 652 <.define addr Constant 3>
		pop_mem_v:9 == 652 <@pop_reg Register c>
			pop_reg:10 == 652 <.define registerToLoad Register c>
			pop_reg:13 == 652 <ldc Register a, Constant 0>
			pop_reg:14 == 653 <ldb Register a, Register a>
			pop_reg:15 == 654 <ldc Register b, Constant 1>
			pop_reg:16 == 655 <sub Register a, Register a, Register b>
			pop_reg:17 == 656 <ldc Register b, Constant 0>
			pop_reg:18 == 657 <stb Register b, Register a>
			pop_reg:22 == 658 <ldb Register a, Register c>
		pop_mem_v:11 == 659 <@ldc Register b, Constant 3>
			ldc:1 == 659 <.define writeReg Register b>
			ldc:2 == 659 <.define const Constant 3>
			ldc:4 == 659 <ldc Register a, Constant 0>
			ldc:5 == 660 <ldc Register b, Constant 12>
			ldc:6 == 661 <shl Register a, Register a, Register b>
			ldc:7 == 662 <ldc Register b, Constant 3>
			ldc:8 == 663 <or Register b, Register a, Register b>
		pop_mem_v:12 == 664 <stb Register b, Register c>
	call:44 == 665 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 665 <.define val Register c>
		pop_mem_v:7 == 665 <.define addr Constant 2>
		pop_mem_v:9 == 665 <@pop_reg Register c>
			pop_reg:10 == 665 <.define registerToLoad Register c>
			pop_reg:13 == 665 <ldc Register a, Constant 0>
			pop_reg:14 == 666 <ldb Register a, Register a>
			pop_reg:15 == 667 <ldc Register b, Constant 1>
			pop_reg:16 == 668 <sub Register a, Register a, Register b>
			pop_reg:17 == 669 <ldc Register b, Constant 0>
			pop_reg:18 == 670 <stb Register b, Register a>
			pop_reg:22 == 671 <ldb Register a, Register c>
		pop_mem_v:11 == 672 <@ldc Register b, Constant 2>
			ldc:1 == 672 <.define writeReg Register b>
			ldc:2 == 672 <.define const Constant 2>
			ldc:4 == 672 <ldc Register a, Constant 0>
			ldc:5 == 673 <ldc Register b, Constant 12>
			ldc:6 == 674 <shl Register a, Register a, Register b>
			ldc:7 == 675 <ldc Register b, Constant 2>
			ldc:8 == 676 <or Register b, Register a, Register b>
		pop_mem_v:12 == 677 <stb Register b, Register c>
	call:46 == 678 <ldc Register c, Constant 0>
	call:47 == 679 <ldb Register c, Register d>
pong.pa2:79 == 680 <@ldc Register a, Constant 176>
	ldc:1 == 680 <.define writeReg Register a>
	ldc:2 == 680 <.define const Constant 176>
	ldc:4 == 680 <ldc Register a, Constant 0>
	ldc:5 == 681 <ldc Register b, Constant 12>
	ldc:6 == 682 <shl Register a, Register a, Register b>
	ldc:7 == 683 <ldc Register b, Constant 176>
	ldc:8 == 684 <or Register a, Register a, Register b>
pong.pa2:80 == 685 <jump Register a>
pong.pa2:86 == 686 <@function Constant 0>
	function:19 == 686 <.define loccount Constant 0>
	function:21 == 686 <.define stackptrptr Register a>
	function:22 == 686 <.define stackptr Register b>
	function:25 == 686 <ldc Register a, Constant 0>
	function:26 == 687 <ldb Register a, Register b>
	function:27 == 688 <ldc Register c, Constant 3>
	function:28 == 689 <stb Register c, Register b>
	function:31 == 690 <ldc Register c, Constant 0>
	function:32 == 691 <add Register b, Register b, Register c>
	function:33 == 692 <stb Register a, Register b>
pong.pa2:89 == 693 <ldc Register a, Constant 22>
pong.pa2:90 == 694 <ldc Register b, Constant 0>
pong.pa2:91 == 695 <stb Register a, Register b>
pong.pa2:93 == 696 <ldc Register a, Constant 18>
pong.pa2:94 == 697 <ldc Register b, Constant 32>
pong.pa2:95 == 698 <stb Register a, Register b>
pong.pa2:97 == 699 <ldc Register a, Constant 19>
pong.pa2:98 == 700 <ldc Register b, Constant 32>
pong.pa2:99 == 701 <stb Register a, Register b>
pong.pa2:106 == 702 <@ldc Register a, Constant 65535>
	ldc:1 == 702 <.define writeReg Register a>
	ldc:2 == 702 <.define const Constant 65535>
	ldc:4 == 702 <ldc Register a, Constant 15>
	ldc:5 == 703 <ldc Register b, Constant 12>
	ldc:6 == 704 <shl Register a, Register a, Register b>
	ldc:7 == 705 <ldc Register b, Constant 4095>
	ldc:8 == 706 <or Register a, Register a, Register b>
pong.pa2:107 == 707 <ldb Register a, Register a>
pong.pa2:113 == 708 <ldc Register b, Constant 1>
pong.pa2:114 == 709 <and Register a, Register a, Register b>
pong.pa2:116 == 710 <ldc Register b, Constant 2>
pong.pa2:117 == 711 <mul Register a, Register a, Register b>
pong.pa2:119 == 712 <ldc Register b, Constant 1>
pong.pa2:120 == 713 <sub Register a, Register a, Register b>
pong.pa2:122 == 714 <ldc Register b, Constant 20>
pong.pa2:123 == 715 <stb Register b, Register a>
pong.pa2:127 == 716 <ldc Register b, Constant 2>
pong.pa2:128 == 717 <and Register a, Register a, Register b>
pong.pa2:130 == 718 <ldc Register b, Constant 2>
pong.pa2:131 == 719 <mul Register a, Register a, Register b>
pong.pa2:133 == 720 <ldc Register b, Constant 1>
pong.pa2:134 == 721 <sub Register a, Register a, Register b>
pong.pa2:136 == 722 <ldc Register b, Constant 21>
pong.pa2:137 == 723 <stb Register b, Register a>
pong.pa2:139 == 724 <@return >
	return:2 == 724 <ldc Register b, Constant 3>
	return:3 == 725 <ldb Register b, Register b>
	return:4 == 726 <ldc Register a, Constant 0>
	return:5 == 727 <stb Register a, Register b>
	return:7 == 728 <@pop_reg Register d>
		pop_reg:10 == 728 <.define registerToLoad Register d>
		pop_reg:13 == 728 <ldc Register a, Constant 0>
		pop_reg:14 == 729 <ldb Register a, Register a>
		pop_reg:15 == 730 <ldc Register b, Constant 1>
		pop_reg:16 == 731 <sub Register a, Register a, Register b>
		pop_reg:17 == 732 <ldc Register b, Constant 0>
		pop_reg:18 == 733 <stb Register b, Register a>
		pop_reg:22 == 734 <ldb Register a, Register d>
	return:9 == 735 <jump Register d>
pong.pa2:146 == 736 <@function Constant 0>
	function:19 == 736 <.define loccount Constant 0>
	function:21 == 736 <.define stackptrptr Register a>
	function:22 == 736 <.define stackptr Register b>
	function:25 == 736 <ldc Register a, Constant 0>
	function:26 == 737 <ldb Register a, Register b>
	function:27 == 738 <ldc Register c, Constant 3>
	function:28 == 739 <stb Register c, Register b>
	function:31 == 740 <ldc Register c, Constant 0>
	function:32 == 741 <add Register b, Register b, Register c>
	function:33 == 742 <stb Register a, Register b>
pong.pa2:156 == 743 <ldc Register b, Constant 0>
pong.pa2:157 == 744 <ldc Register a, Constant 25>
pong.pa2:158 == 745 <stb Register a, Register b>
pong.pa2:159 == 746 <ldc Register a, Constant 26>
pong.pa2:160 == 747 <stb Register a, Register b>
pong.pa2:163 == 748 <@ldc Register a, Constant 24576>
	ldc:1 == 748 <.define writeReg Register a>
	ldc:2 == 748 <.define const Constant 24576>
	ldc:4 == 748 <ldc Register a, Constant 6>
	ldc:5 == 749 <ldc Register b, Constant 12>
	ldc:6 == 750 <shl Register a, Register a, Register b>
	ldc:7 == 751 <ldc Register b, Constant 0>
	ldc:8 == 752 <or Register a, Register a, Register b>
pong.pa2:164 == 753 <ldb Register a, Register a>
pong.pa2:166 == 754 <ldc Register d, Constant 788>
pong.pa2:168 == 755 <ldc Register b, Constant 128>
pong.pa2:169 == 756 <ldc Register c, Constant 768>
pong.pa2:170 == 757 <jeq Register c, Register a, Register b>
pong.pa2:172 == 758 <ldc Register b, Constant 64>
pong.pa2:173 == 759 <ldc Register c, Constant 774>
pong.pa2:174 == 760 <jeq Register c, Register a, Register b>
pong.pa2:176 == 761 <ldc Register b, Constant 8>
pong.pa2:177 == 762 <ldc Register c, Constant 778>
pong.pa2:178 == 763 <jeq Register c, Register a, Register b>
pong.pa2:180 == 764 <ldc Register b, Constant 1>
pong.pa2:181 == 765 <ldc Register c, Constant 784>
pong.pa2:182 == 766 <jeq Register c, Register a, Register b>
pong.pa2:184 == 767 <jmp Register d>
pong.pa2:187 == 768 <ldc Register c, Constant 25>
pong.pa2:190 == 769 <ldc Register a, Constant 0>
pong.pa2:191 == 770 <ldc Register b, Constant 1>
pong.pa2:192 == 771 <sub Register b, Register a, Register b>
pong.pa2:193 == 772 <stb Register c, Register b>
pong.pa2:194 == 773 <jmp Register d>
pong.pa2:196 == 774 <ldc Register c, Constant 25>
pong.pa2:198 == 775 <ldc Register b, Constant 1>
pong.pa2:199 == 776 <stb Register c, Register b>
pong.pa2:200 == 777 <jmp Register d>
pong.pa2:202 == 778 <ldc Register c, Constant 26>
pong.pa2:205 == 779 <ldc Register a, Constant 0>
pong.pa2:206 == 780 <ldc Register b, Constant 1>
pong.pa2:207 == 781 <sub Register b, Register a, Register b>
pong.pa2:208 == 782 <stb Register c, Register b>
pong.pa2:209 == 783 <jmp Register d>
pong.pa2:211 == 784 <ldc Register c, Constant 26>
pong.pa2:213 == 785 <ldc Register b, Constant 1>
pong.pa2:214 == 786 <stb Register c, Register b>
pong.pa2:215 == 787 <jmp Register d>
pong.pa2:218 == 788 <@return >
	return:2 == 788 <ldc Register b, Constant 3>
	return:3 == 789 <ldb Register b, Register b>
	return:4 == 790 <ldc Register a, Constant 0>
	return:5 == 791 <stb Register a, Register b>
	return:7 == 792 <@pop_reg Register d>
		pop_reg:10 == 792 <.define registerToLoad Register d>
		pop_reg:13 == 792 <ldc Register a, Constant 0>
		pop_reg:14 == 793 <ldb Register a, Register a>
		pop_reg:15 == 794 <ldc Register b, Constant 1>
		pop_reg:16 == 795 <sub Register a, Register a, Register b>
		pop_reg:17 == 796 <ldc Register b, Constant 0>
		pop_reg:18 == 797 <stb Register b, Register a>
		pop_reg:22 == 798 <ldb Register a, Register d>
	return:9 == 799 <jump Register d>
pong.pa2:226 == 800 <@function Constant 0>
	function:19 == 800 <.define loccount Constant 0>
	function:21 == 800 <.define stackptrptr Register a>
	function:22 == 800 <.define stackptr Register b>
	function:25 == 800 <ldc Register a, Constant 0>
	function:26 == 801 <ldb Register a, Register b>
	function:27 == 802 <ldc Register c, Constant 3>
	function:28 == 803 <stb Register c, Register b>
	function:31 == 804 <ldc Register c, Constant 0>
	function:32 == 805 <add Register b, Register b, Register c>
	function:33 == 806 <stb Register a, Register b>
pong.pa2:230 == 807 <@push_mem Constant 16>
	push_mem:6 == 807 <.define addr Register b>
	push_mem:7 == 807 <.define value Register b>
	push_mem:9 == 807 <@ldc Register b, Constant 16>
		ldc:1 == 807 <.define writeReg Register b>
		ldc:2 == 807 <.define const Constant 16>
		ldc:4 == 807 <ldc Register a, Constant 0>
		ldc:5 == 808 <ldc Register b, Constant 12>
		ldc:6 == 809 <shl Register a, Register a, Register b>
		ldc:7 == 810 <ldc Register b, Constant 16>
		ldc:8 == 811 <or Register b, Register a, Register b>
	push_mem:10 == 812 <ldb Register b, Register b>
	push_mem:12 == 813 <@push_reg Register b>
		push_reg:10 == 813 <.define registerToPush Register b>
		push_reg:13 == 813 <ldc Register a, Constant 0>
		push_reg:14 == 814 <ldb Register a, Register a>
		push_reg:15 == 815 <stb Register a, Register b>
		push_reg:19 == 816 <ldc Register b, Constant 1>
		push_reg:20 == 817 <add Register a, Register a, Register b>
		push_reg:21 == 818 <ldc Register b, Constant 0>
		push_reg:22 == 819 <stb Register b, Register a>
pong.pa2:231 == 820 <@push_mem Constant 25>
	push_mem:6 == 820 <.define addr Register b>
	push_mem:7 == 820 <.define value Register b>
	push_mem:9 == 820 <@ldc Register b, Constant 25>
		ldc:1 == 820 <.define writeReg Register b>
		ldc:2 == 820 <.define const Constant 25>
		ldc:4 == 820 <ldc Register a, Constant 0>
		ldc:5 == 821 <ldc Register b, Constant 12>
		ldc:6 == 822 <shl Register a, Register a, Register b>
		ldc:7 == 823 <ldc Register b, Constant 25>
		ldc:8 == 824 <or Register b, Register a, Register b>
	push_mem:10 == 825 <ldb Register b, Register b>
	push_mem:12 == 826 <@push_reg Register b>
		push_reg:10 == 826 <.define registerToPush Register b>
		push_reg:13 == 826 <ldc Register a, Constant 0>
		push_reg:14 == 827 <ldb Register a, Register a>
		push_reg:15 == 828 <stb Register a, Register b>
		push_reg:19 == 829 <ldc Register b, Constant 1>
		push_reg:20 == 830 <add Register a, Register a, Register b>
		push_reg:21 == 831 <ldc Register b, Constant 0>
		push_reg:22 == 832 <stb Register b, Register a>
pong.pa2:232 == 833 <@add >
	add:3 == 833 <.define lhs Register c>
	add:4 == 833 <.define rhs Register d>
	add:5 == 833 <.define result Register d>
	add:7 == 833 <@pop_reg Register c>
		pop_reg:10 == 833 <.define registerToLoad Register c>
		pop_reg:13 == 833 <ldc Register a, Constant 0>
		pop_reg:14 == 834 <ldb Register a, Register a>
		pop_reg:15 == 835 <ldc Register b, Constant 1>
		pop_reg:16 == 836 <sub Register a, Register a, Register b>
		pop_reg:17 == 837 <ldc Register b, Constant 0>
		pop_reg:18 == 838 <stb Register b, Register a>
		pop_reg:22 == 839 <ldb Register a, Register c>
	add:8 == 840 <@pop_reg Register d>
		pop_reg:10 == 840 <.define registerToLoad Register d>
		pop_reg:13 == 840 <ldc Register a, Constant 0>
		pop_reg:14 == 841 <ldb Register a, Register a>
		pop_reg:15 == 842 <ldc Register b, Constant 1>
		pop_reg:16 == 843 <sub Register a, Register a, Register b>
		pop_reg:17 == 844 <ldc Register b, Constant 0>
		pop_reg:18 == 845 <stb Register b, Register a>
		pop_reg:22 == 846 <ldb Register a, Register d>
	add:9 == 847 <add Register d, Register c, Register d>
	add:10 == 848 <@push_reg Register d>
		push_reg:10 == 848 <.define registerToPush Register d>
		push_reg:13 == 848 <ldc Register a, Constant 0>
		push_reg:14 == 849 <ldb Register a, Register a>
		push_reg:15 == 850 <stb Register a, Register d>
		push_reg:19 == 851 <ldc Register b, Constant 1>
		push_reg:20 == 852 <add Register a, Register a, Register b>
		push_reg:21 == 853 <ldc Register b, Constant 0>
		push_reg:22 == 854 <stb Register b, Register a>
pong.pa2:233 == 855 <@pop_mem_v Constant 16>
	pop_mem_v:6 == 855 <.define val Register c>
	pop_mem_v:7 == 855 <.define addr Constant 16>
	pop_mem_v:9 == 855 <@pop_reg Register c>
		pop_reg:10 == 855 <.define registerToLoad Register c>
		pop_reg:13 == 855 <ldc Register a, Constant 0>
		pop_reg:14 == 856 <ldb Register a, Register a>
		pop_reg:15 == 857 <ldc Register b, Constant 1>
		pop_reg:16 == 858 <sub Register a, Register a, Register b>
		pop_reg:17 == 859 <ldc Register b, Constant 0>
		pop_reg:18 == 860 <stb Register b, Register a>
		pop_reg:22 == 861 <ldb Register a, Register c>
	pop_mem_v:11 == 862 <@ldc Register b, Constant 16>
		ldc:1 == 862 <.define writeReg Register b>
		ldc:2 == 862 <.define const Constant 16>
		ldc:4 == 862 <ldc Register a, Constant 0>
		ldc:5 == 863 <ldc Register b, Constant 12>
		ldc:6 == 864 <shl Register a, Register a, Register b>
		ldc:7 == 865 <ldc Register b, Constant 16>
		ldc:8 == 866 <or Register b, Register a, Register b>
	pop_mem_v:12 == 867 <stb Register b, Register c>
pong.pa2:235 == 868 <@push_mem Constant 17>
	push_mem:6 == 868 <.define addr Register b>
	push_mem:7 == 868 <.define value Register b>
	push_mem:9 == 868 <@ldc Register b, Constant 17>
		ldc:1 == 868 <.define writeReg Register b>
		ldc:2 == 868 <.define const Constant 17>
		ldc:4 == 868 <ldc Register a, Constant 0>
		ldc:5 == 869 <ldc Register b, Constant 12>
		ldc:6 == 870 <shl Register a, Register a, Register b>
		ldc:7 == 871 <ldc Register b, Constant 17>
		ldc:8 == 872 <or Register b, Register a, Register b>
	push_mem:10 == 873 <ldb Register b, Register b>
	push_mem:12 == 874 <@push_reg Register b>
		push_reg:10 == 874 <.define registerToPush Register b>
		push_reg:13 == 874 <ldc Register a, Constant 0>
		push_reg:14 == 875 <ldb Register a, Register a>
		push_reg:15 == 876 <stb Register a, Register b>
		push_reg:19 == 877 <ldc Register b, Constant 1>
		push_reg:20 == 878 <add Register a, Register a, Register b>
		push_reg:21 == 879 <ldc Register b, Constant 0>
		push_reg:22 == 880 <stb Register b, Register a>
pong.pa2:236 == 881 <@push_mem Constant 26>
	push_mem:6 == 881 <.define addr Register b>
	push_mem:7 == 881 <.define value Register b>
	push_mem:9 == 881 <@ldc Register b, Constant 26>
		ldc:1 == 881 <.define writeReg Register b>
		ldc:2 == 881 <.define const Constant 26>
		ldc:4 == 881 <ldc Register a, Constant 0>
		ldc:5 == 882 <ldc Register b, Constant 12>
		ldc:6 == 883 <shl Register a, Register a, Register b>
		ldc:7 == 884 <ldc Register b, Constant 26>
		ldc:8 == 885 <or Register b, Register a, Register b>
	push_mem:10 == 886 <ldb Register b, Register b>
	push_mem:12 == 887 <@push_reg Register b>
		push_reg:10 == 887 <.define registerToPush Register b>
		push_reg:13 == 887 <ldc Register a, Constant 0>
		push_reg:14 == 888 <ldb Register a, Register a>
		push_reg:15 == 889 <stb Register a, Register b>
		push_reg:19 == 890 <ldc Register b, Constant 1>
		push_reg:20 == 891 <add Register a, Register a, Register b>
		push_reg:21 == 892 <ldc Register b, Constant 0>
		push_reg:22 == 893 <stb Register b, Register a>
pong.pa2:237 == 894 <@add >
	add:3 == 894 <.define lhs Register c>
	add:4 == 894 <.define rhs Register d>
	add:5 == 894 <.define result Register d>
	add:7 == 894 <@pop_reg Register c>
		pop_reg:10 == 894 <.define registerToLoad Register c>
		pop_reg:13 == 894 <ldc Register a, Constant 0>
		pop_reg:14 == 895 <ldb Register a, Register a>
		pop_reg:15 == 896 <ldc Register b, Constant 1>
		pop_reg:16 == 897 <sub Register a, Register a, Register b>
		pop_reg:17 == 898 <ldc Register b, Constant 0>
		pop_reg:18 == 899 <stb Register b, Register a>
		pop_reg:22 == 900 <ldb Register a, Register c>
	add:8 == 901 <@pop_reg Register d>
		pop_reg:10 == 901 <.define registerToLoad Register d>
		pop_reg:13 == 901 <ldc Register a, Constant 0>
		pop_reg:14 == 902 <ldb Register a, Register a>
		pop_reg:15 == 903 <ldc Register b, Constant 1>
		pop_reg:16 == 904 <sub Register a, Register a, Register b>
		pop_reg:17 == 905 <ldc Register b, Constant 0>
		pop_reg:18 == 906 <stb Register b, Register a>
		pop_reg:22 == 907 <ldb Register a, Register d>
	add:9 == 908 <add Register d, Register c, Register d>
	add:10 == 909 <@push_reg Register d>
		push_reg:10 == 909 <.define registerToPush Register d>
		push_reg:13 == 909 <ldc Register a, Constant 0>
		push_reg:14 == 910 <ldb Register a, Register a>
		push_reg:15 == 911 <stb Register a, Register d>
		push_reg:19 == 912 <ldc Register b, Constant 1>
		push_reg:20 == 913 <add Register a, Register a, Register b>
		push_reg:21 == 914 <ldc Register b, Constant 0>
		push_reg:22 == 915 <stb Register b, Register a>
pong.pa2:238 == 916 <@pop_mem_v Constant 17>
	pop_mem_v:6 == 916 <.define val Register c>
	pop_mem_v:7 == 916 <.define addr Constant 17>
	pop_mem_v:9 == 916 <@pop_reg Register c>
		pop_reg:10 == 916 <.define registerToLoad Register c>
		pop_reg:13 == 916 <ldc Register a, Constant 0>
		pop_reg:14 == 917 <ldb Register a, Register a>
		pop_reg:15 == 918 <ldc Register b, Constant 1>
		pop_reg:16 == 919 <sub Register a, Register a, Register b>
		pop_reg:17 == 920 <ldc Register b, Constant 0>
		pop_reg:18 == 921 <stb Register b, Register a>
		pop_reg:22 == 922 <ldb Register a, Register c>
	pop_mem_v:11 == 923 <@ldc Register b, Constant 17>
		ldc:1 == 923 <.define writeReg Register b>
		ldc:2 == 923 <.define const Constant 17>
		ldc:4 == 923 <ldc Register a, Constant 0>
		ldc:5 == 924 <ldc Register b, Constant 12>
		ldc:6 == 925 <shl Register a, Register a, Register b>
		ldc:7 == 926 <ldc Register b, Constant 17>
		ldc:8 == 927 <or Register b, Register a, Register b>
	pop_mem_v:12 == 928 <stb Register b, Register c>
pong.pa2:252 == 929 <@return >
	return:2 == 929 <ldc Register b, Constant 3>
	return:3 == 930 <ldb Register b, Register b>
	return:4 == 931 <ldc Register a, Constant 0>
	return:5 == 932 <stb Register a, Register b>
	return:7 == 933 <@pop_reg Register d>
		pop_reg:10 == 933 <.define registerToLoad Register d>
		pop_reg:13 == 933 <ldc Register a, Constant 0>
		pop_reg:14 == 934 <ldb Register a, Register a>
		pop_reg:15 == 935 <ldc Register b, Constant 1>
		pop_reg:16 == 936 <sub Register a, Register a, Register b>
		pop_reg:17 == 937 <ldc Register b, Constant 0>
		pop_reg:18 == 938 <stb Register b, Register a>
		pop_reg:22 == 939 <ldb Register a, Register d>
	return:9 == 940 <jump Register d>
pong.pa2:259 == 941 <@function Constant 0>
	function:19 == 941 <.define loccount Constant 0>
	function:21 == 941 <.define stackptrptr Register a>
	function:22 == 941 <.define stackptr Register b>
	function:25 == 941 <ldc Register a, Constant 0>
	function:26 == 942 <ldb Register a, Register b>
	function:27 == 943 <ldc Register c, Constant 3>
	function:28 == 944 <stb Register c, Register b>
	function:31 == 945 <ldc Register c, Constant 0>
	function:32 == 946 <add Register b, Register b, Register c>
	function:33 == 947 <stb Register a, Register b>
pong.pa2:262 == 948 <@call Constant 1754, Constant 0>
	call:11 == 948 <.define functionLabel Constant 1754>
	call:12 == 948 <.define argcount Constant 0>
	call:15 == 948 <@push_mem Constant 2>
		push_mem:6 == 948 <.define addr Register b>
		push_mem:7 == 948 <.define value Register b>
		push_mem:9 == 948 <@ldc Register b, Constant 2>
			ldc:1 == 948 <.define writeReg Register b>
			ldc:2 == 948 <.define const Constant 2>
			ldc:4 == 948 <ldc Register a, Constant 0>
			ldc:5 == 949 <ldc Register b, Constant 12>
			ldc:6 == 950 <shl Register a, Register a, Register b>
			ldc:7 == 951 <ldc Register b, Constant 2>
			ldc:8 == 952 <or Register b, Register a, Register b>
		push_mem:10 == 953 <ldb Register b, Register b>
		push_mem:12 == 954 <@push_reg Register b>
			push_reg:10 == 954 <.define registerToPush Register b>
			push_reg:13 == 954 <ldc Register a, Constant 0>
			push_reg:14 == 955 <ldb Register a, Register a>
			push_reg:15 == 956 <stb Register a, Register b>
			push_reg:19 == 957 <ldc Register b, Constant 1>
			push_reg:20 == 958 <add Register a, Register a, Register b>
			push_reg:21 == 959 <ldc Register b, Constant 0>
			push_reg:22 == 960 <stb Register b, Register a>
	call:16 == 961 <@push_mem Constant 3>
		push_mem:6 == 961 <.define addr Register b>
		push_mem:7 == 961 <.define value Register b>
		push_mem:9 == 961 <@ldc Register b, Constant 3>
			ldc:1 == 961 <.define writeReg Register b>
			ldc:2 == 961 <.define const Constant 3>
			ldc:4 == 961 <ldc Register a, Constant 0>
			ldc:5 == 962 <ldc Register b, Constant 12>
			ldc:6 == 963 <shl Register a, Register a, Register b>
			ldc:7 == 964 <ldc Register b, Constant 3>
			ldc:8 == 965 <or Register b, Register a, Register b>
		push_mem:10 == 966 <ldb Register b, Register b>
		push_mem:12 == 967 <@push_reg Register b>
			push_reg:10 == 967 <.define registerToPush Register b>
			push_reg:13 == 967 <ldc Register a, Constant 0>
			push_reg:14 == 968 <ldb Register a, Register a>
			push_reg:15 == 969 <stb Register a, Register b>
			push_reg:19 == 970 <ldc Register b, Constant 1>
			push_reg:20 == 971 <add Register a, Register a, Register b>
			push_reg:21 == 972 <ldc Register b, Constant 0>
			push_reg:22 == 973 <stb Register b, Register a>
	call:19 == 974 <@push_const Constant 1086>
		push_const:6 == 974 <.define constantToPush Constant 1086>
		push_const:12 == 974 <@ldc Register b, Constant 1086>
			ldc:1 == 974 <.define writeReg Register b>
			ldc:2 == 974 <.define const Constant 1086>
			ldc:4 == 974 <ldc Register a, Constant 0>
			ldc:5 == 975 <ldc Register b, Constant 12>
			ldc:6 == 976 <shl Register a, Register a, Register b>
			ldc:7 == 977 <ldc Register b, Constant 1086>
			ldc:8 == 978 <or Register b, Register a, Register b>
		push_const:14 == 979 <@push_reg Register b>
			push_reg:10 == 979 <.define registerToPush Register b>
			push_reg:13 == 979 <ldc Register a, Constant 0>
			push_reg:14 == 980 <ldb Register a, Register a>
			push_reg:15 == 981 <stb Register a, Register b>
			push_reg:19 == 982 <ldc Register b, Constant 1>
			push_reg:20 == 983 <add Register a, Register a, Register b>
			push_reg:21 == 984 <ldc Register b, Constant 0>
			push_reg:22 == 985 <stb Register b, Register a>
	call:24 == 986 <@push_mem Constant 0>
		push_mem:6 == 986 <.define addr Register b>
		push_mem:7 == 986 <.define value Register b>
		push_mem:9 == 986 <@ldc Register b, Constant 0>
			ldc:1 == 986 <.define writeReg Register b>
			ldc:2 == 986 <.define const Constant 0>
			ldc:4 == 986 <ldc Register a, Constant 0>
			ldc:5 == 987 <ldc Register b, Constant 12>
			ldc:6 == 988 <shl Register a, Register a, Register b>
			ldc:7 == 989 <ldc Register b, Constant 0>
			ldc:8 == 990 <or Register b, Register a, Register b>
		push_mem:10 == 991 <ldb Register b, Register b>
		push_mem:12 == 992 <@push_reg Register b>
			push_reg:10 == 992 <.define registerToPush Register b>
			push_reg:13 == 992 <ldc Register a, Constant 0>
			push_reg:14 == 993 <ldb Register a, Register a>
			push_reg:15 == 994 <stb Register a, Register b>
			push_reg:19 == 995 <ldc Register b, Constant 1>
			push_reg:20 == 996 <add Register a, Register a, Register b>
			push_reg:21 == 997 <ldc Register b, Constant 0>
			push_reg:22 == 998 <stb Register b, Register a>
	call:26 == 999 <@push_const Constant 3>
		push_const:6 == 999 <.define constantToPush Constant 3>
		push_const:12 == 999 <@ldc Register b, Constant 3>
			ldc:1 == 999 <.define writeReg Register b>
			ldc:2 == 999 <.define const Constant 3>
			ldc:4 == 999 <ldc Register a, Constant 0>
			ldc:5 == 1000 <ldc Register b, Constant 12>
			ldc:6 == 1001 <shl Register a, Register a, Register b>
			ldc:7 == 1002 <ldc Register b, Constant 3>
			ldc:8 == 1003 <or Register b, Register a, Register b>
		push_const:14 == 1004 <@push_reg Register b>
			push_reg:10 == 1004 <.define registerToPush Register b>
			push_reg:13 == 1004 <ldc Register a, Constant 0>
			push_reg:14 == 1005 <ldb Register a, Register a>
			push_reg:15 == 1006 <stb Register a, Register b>
			push_reg:19 == 1007 <ldc Register b, Constant 1>
			push_reg:20 == 1008 <add Register a, Register a, Register b>
			push_reg:21 == 1009 <ldc Register b, Constant 0>
			push_reg:22 == 1010 <stb Register b, Register a>
	call:27 == 1011 <@push_const Constant 0>
		push_const:6 == 1011 <.define constantToPush Constant 0>
		push_const:12 == 1011 <@ldc Register b, Constant 0>
			ldc:1 == 1011 <.define writeReg Register b>
			ldc:2 == 1011 <.define const Constant 0>
			ldc:4 == 1011 <ldc Register a, Constant 0>
			ldc:5 == 1012 <ldc Register b, Constant 12>
			ldc:6 == 1013 <shl Register a, Register a, Register b>
			ldc:7 == 1014 <ldc Register b, Constant 0>
			ldc:8 == 1015 <or Register b, Register a, Register b>
		push_const:14 == 1016 <@push_reg Register b>
			push_reg:10 == 1016 <.define registerToPush Register b>
			push_reg:13 == 1016 <ldc Register a, Constant 0>
			push_reg:14 == 1017 <ldb Register a, Register a>
			push_reg:15 == 1018 <stb Register a, Register b>
			push_reg:19 == 1019 <ldc Register b, Constant 1>
			push_reg:20 == 1020 <add Register a, Register a, Register b>
			push_reg:21 == 1021 <ldc Register b, Constant 0>
			push_reg:22 == 1022 <stb Register b, Register a>
	call:28 == 1023 <@add >
		add:3 == 1023 <.define lhs Register c>
		add:4 == 1023 <.define rhs Register d>
		add:5 == 1023 <.define result Register d>
		add:7 == 1023 <@pop_reg Register c>
			pop_reg:10 == 1023 <.define registerToLoad Register c>
			pop_reg:13 == 1023 <ldc Register a, Constant 0>
			pop_reg:14 == 1024 <ldb Register a, Register a>
			pop_reg:15 == 1025 <ldc Register b, Constant 1>
			pop_reg:16 == 1026 <sub Register a, Register a, Register b>
			pop_reg:17 == 1027 <ldc Register b, Constant 0>
			pop_reg:18 == 1028 <stb Register b, Register a>
			pop_reg:22 == 1029 <ldb Register a, Register c>
		add:8 == 1030 <@pop_reg Register d>
			pop_reg:10 == 1030 <.define registerToLoad Register d>
			pop_reg:13 == 1030 <ldc Register a, Constant 0>
			pop_reg:14 == 1031 <ldb Register a, Register a>
			pop_reg:15 == 1032 <ldc Register b, Constant 1>
			pop_reg:16 == 1033 <sub Register a, Register a, Register b>
			pop_reg:17 == 1034 <ldc Register b, Constant 0>
			pop_reg:18 == 1035 <stb Register b, Register a>
			pop_reg:22 == 1036 <ldb Register a, Register d>
		add:9 == 1037 <add Register d, Register c, Register d>
		add:10 == 1038 <@push_reg Register d>
			push_reg:10 == 1038 <.define registerToPush Register d>
			push_reg:13 == 1038 <ldc Register a, Constant 0>
			push_reg:14 == 1039 <ldb Register a, Register a>
			push_reg:15 == 1040 <stb Register a, Register d>
			push_reg:19 == 1041 <ldc Register b, Constant 1>
			push_reg:20 == 1042 <add Register a, Register a, Register b>
			push_reg:21 == 1043 <ldc Register b, Constant 0>
			push_reg:22 == 1044 <stb Register b, Register a>
	call:29 == 1045 <@sub >
		sub:3 == 1045 <.define lhs Register c>
		sub:4 == 1045 <.define rhs Register d>
		sub:5 == 1045 <.define result Register d>
		sub:7 == 1045 <@pop_reg Register d>
			pop_reg:10 == 1045 <.define registerToLoad Register d>
			pop_reg:13 == 1045 <ldc Register a, Constant 0>
			pop_reg:14 == 1046 <ldb Register a, Register a>
			pop_reg:15 == 1047 <ldc Register b, Constant 1>
			pop_reg:16 == 1048 <sub Register a, Register a, Register b>
			pop_reg:17 == 1049 <ldc Register b, Constant 0>
			pop_reg:18 == 1050 <stb Register b, Register a>
			pop_reg:22 == 1051 <ldb Register a, Register d>
		sub:8 == 1052 <@pop_reg Register c>
			pop_reg:10 == 1052 <.define registerToLoad Register c>
			pop_reg:13 == 1052 <ldc Register a, Constant 0>
			pop_reg:14 == 1053 <ldb Register a, Register a>
			pop_reg:15 == 1054 <ldc Register b, Constant 1>
			pop_reg:16 == 1055 <sub Register a, Register a, Register b>
			pop_reg:17 == 1056 <ldc Register b, Constant 0>
			pop_reg:18 == 1057 <stb Register b, Register a>
			pop_reg:22 == 1058 <ldb Register a, Register c>
		sub:9 == 1059 <sub Register d, Register c, Register d>
		sub:10 == 1060 <@push_reg Register d>
			push_reg:10 == 1060 <.define registerToPush Register d>
			push_reg:13 == 1060 <ldc Register a, Constant 0>
			push_reg:14 == 1061 <ldb Register a, Register a>
			push_reg:15 == 1062 <stb Register a, Register d>
			push_reg:19 == 1063 <ldc Register b, Constant 1>
			push_reg:20 == 1064 <add Register a, Register a, Register b>
			push_reg:21 == 1065 <ldc Register b, Constant 0>
			push_reg:22 == 1066 <stb Register b, Register a>
	call:30 == 1067 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 1067 <.define val Register c>
		pop_mem_v:7 == 1067 <.define addr Constant 2>
		pop_mem_v:9 == 1067 <@pop_reg Register c>
			pop_reg:10 == 1067 <.define registerToLoad Register c>
			pop_reg:13 == 1067 <ldc Register a, Constant 0>
			pop_reg:14 == 1068 <ldb Register a, Register a>
			pop_reg:15 == 1069 <ldc Register b, Constant 1>
			pop_reg:16 == 1070 <sub Register a, Register a, Register b>
			pop_reg:17 == 1071 <ldc Register b, Constant 0>
			pop_reg:18 == 1072 <stb Register b, Register a>
			pop_reg:22 == 1073 <ldb Register a, Register c>
		pop_mem_v:11 == 1074 <@ldc Register b, Constant 2>
			ldc:1 == 1074 <.define writeReg Register b>
			ldc:2 == 1074 <.define const Constant 2>
			ldc:4 == 1074 <ldc Register a, Constant 0>
			ldc:5 == 1075 <ldc Register b, Constant 12>
			ldc:6 == 1076 <shl Register a, Register a, Register b>
			ldc:7 == 1077 <ldc Register b, Constant 2>
			ldc:8 == 1078 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1079 <stb Register b, Register c>
	call:32 == 1080 <@ldc Register a, Constant 1754>
		ldc:1 == 1080 <.define writeReg Register a>
		ldc:2 == 1080 <.define const Constant 1754>
		ldc:4 == 1080 <ldc Register a, Constant 0>
		ldc:5 == 1081 <ldc Register b, Constant 12>
		ldc:6 == 1082 <shl Register a, Register a, Register b>
		ldc:7 == 1083 <ldc Register b, Constant 1754>
		ldc:8 == 1084 <or Register a, Register a, Register b>
	call:33 == 1085 <jmp Register a>
	call:38 == 1086 <ldc Register d, Constant 2>
	call:41 == 1087 <ldb Register d, Register d>
	call:43 == 1088 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 1088 <.define val Register c>
		pop_mem_v:7 == 1088 <.define addr Constant 3>
		pop_mem_v:9 == 1088 <@pop_reg Register c>
			pop_reg:10 == 1088 <.define registerToLoad Register c>
			pop_reg:13 == 1088 <ldc Register a, Constant 0>
			pop_reg:14 == 1089 <ldb Register a, Register a>
			pop_reg:15 == 1090 <ldc Register b, Constant 1>
			pop_reg:16 == 1091 <sub Register a, Register a, Register b>
			pop_reg:17 == 1092 <ldc Register b, Constant 0>
			pop_reg:18 == 1093 <stb Register b, Register a>
			pop_reg:22 == 1094 <ldb Register a, Register c>
		pop_mem_v:11 == 1095 <@ldc Register b, Constant 3>
			ldc:1 == 1095 <.define writeReg Register b>
			ldc:2 == 1095 <.define const Constant 3>
			ldc:4 == 1095 <ldc Register a, Constant 0>
			ldc:5 == 1096 <ldc Register b, Constant 12>
			ldc:6 == 1097 <shl Register a, Register a, Register b>
			ldc:7 == 1098 <ldc Register b, Constant 3>
			ldc:8 == 1099 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1100 <stb Register b, Register c>
	call:44 == 1101 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 1101 <.define val Register c>
		pop_mem_v:7 == 1101 <.define addr Constant 2>
		pop_mem_v:9 == 1101 <@pop_reg Register c>
			pop_reg:10 == 1101 <.define registerToLoad Register c>
			pop_reg:13 == 1101 <ldc Register a, Constant 0>
			pop_reg:14 == 1102 <ldb Register a, Register a>
			pop_reg:15 == 1103 <ldc Register b, Constant 1>
			pop_reg:16 == 1104 <sub Register a, Register a, Register b>
			pop_reg:17 == 1105 <ldc Register b, Constant 0>
			pop_reg:18 == 1106 <stb Register b, Register a>
			pop_reg:22 == 1107 <ldb Register a, Register c>
		pop_mem_v:11 == 1108 <@ldc Register b, Constant 2>
			ldc:1 == 1108 <.define writeReg Register b>
			ldc:2 == 1108 <.define const Constant 2>
			ldc:4 == 1108 <ldc Register a, Constant 0>
			ldc:5 == 1109 <ldc Register b, Constant 12>
			ldc:6 == 1110 <shl Register a, Register a, Register b>
			ldc:7 == 1111 <ldc Register b, Constant 2>
			ldc:8 == 1112 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1113 <stb Register b, Register c>
	call:46 == 1114 <ldc Register c, Constant 0>
	call:47 == 1115 <ldb Register c, Register d>
pong.pa2:264 == 1116 <@push_mem Constant 18>
	push_mem:6 == 1116 <.define addr Register b>
	push_mem:7 == 1116 <.define value Register b>
	push_mem:9 == 1116 <@ldc Register b, Constant 18>
		ldc:1 == 1116 <.define writeReg Register b>
		ldc:2 == 1116 <.define const Constant 18>
		ldc:4 == 1116 <ldc Register a, Constant 0>
		ldc:5 == 1117 <ldc Register b, Constant 12>
		ldc:6 == 1118 <shl Register a, Register a, Register b>
		ldc:7 == 1119 <ldc Register b, Constant 18>
		ldc:8 == 1120 <or Register b, Register a, Register b>
	push_mem:10 == 1121 <ldb Register b, Register b>
	push_mem:12 == 1122 <@push_reg Register b>
		push_reg:10 == 1122 <.define registerToPush Register b>
		push_reg:13 == 1122 <ldc Register a, Constant 0>
		push_reg:14 == 1123 <ldb Register a, Register a>
		push_reg:15 == 1124 <stb Register a, Register b>
		push_reg:19 == 1125 <ldc Register b, Constant 1>
		push_reg:20 == 1126 <add Register a, Register a, Register b>
		push_reg:21 == 1127 <ldc Register b, Constant 0>
		push_reg:22 == 1128 <stb Register b, Register a>
pong.pa2:265 == 1129 <@push_mem Constant 19>
	push_mem:6 == 1129 <.define addr Register b>
	push_mem:7 == 1129 <.define value Register b>
	push_mem:9 == 1129 <@ldc Register b, Constant 19>
		ldc:1 == 1129 <.define writeReg Register b>
		ldc:2 == 1129 <.define const Constant 19>
		ldc:4 == 1129 <ldc Register a, Constant 0>
		ldc:5 == 1130 <ldc Register b, Constant 12>
		ldc:6 == 1131 <shl Register a, Register a, Register b>
		ldc:7 == 1132 <ldc Register b, Constant 19>
		ldc:8 == 1133 <or Register b, Register a, Register b>
	push_mem:10 == 1134 <ldb Register b, Register b>
	push_mem:12 == 1135 <@push_reg Register b>
		push_reg:10 == 1135 <.define registerToPush Register b>
		push_reg:13 == 1135 <ldc Register a, Constant 0>
		push_reg:14 == 1136 <ldb Register a, Register a>
		push_reg:15 == 1137 <stb Register a, Register b>
		push_reg:19 == 1138 <ldc Register b, Constant 1>
		push_reg:20 == 1139 <add Register a, Register a, Register b>
		push_reg:21 == 1140 <ldc Register b, Constant 0>
		push_reg:22 == 1141 <stb Register b, Register a>
pong.pa2:267 == 1142 <@push_const Constant 0>
	push_const:6 == 1142 <.define constantToPush Constant 0>
	push_const:12 == 1142 <@ldc Register b, Constant 0>
		ldc:1 == 1142 <.define writeReg Register b>
		ldc:2 == 1142 <.define const Constant 0>
		ldc:4 == 1142 <ldc Register a, Constant 0>
		ldc:5 == 1143 <ldc Register b, Constant 12>
		ldc:6 == 1144 <shl Register a, Register a, Register b>
		ldc:7 == 1145 <ldc Register b, Constant 0>
		ldc:8 == 1146 <or Register b, Register a, Register b>
	push_const:14 == 1147 <@push_reg Register b>
		push_reg:10 == 1147 <.define registerToPush Register b>
		push_reg:13 == 1147 <ldc Register a, Constant 0>
		push_reg:14 == 1148 <ldb Register a, Register a>
		push_reg:15 == 1149 <stb Register a, Register b>
		push_reg:19 == 1150 <ldc Register b, Constant 1>
		push_reg:20 == 1151 <add Register a, Register a, Register b>
		push_reg:21 == 1152 <ldc Register b, Constant 0>
		push_reg:22 == 1153 <stb Register b, Register a>
pong.pa2:268 == 1154 <@call Constant 2751, Constant 3>
	call:11 == 1154 <.define functionLabel Constant 2751>
	call:12 == 1154 <.define argcount Constant 3>
	call:15 == 1154 <@push_mem Constant 2>
		push_mem:6 == 1154 <.define addr Register b>
		push_mem:7 == 1154 <.define value Register b>
		push_mem:9 == 1154 <@ldc Register b, Constant 2>
			ldc:1 == 1154 <.define writeReg Register b>
			ldc:2 == 1154 <.define const Constant 2>
			ldc:4 == 1154 <ldc Register a, Constant 0>
			ldc:5 == 1155 <ldc Register b, Constant 12>
			ldc:6 == 1156 <shl Register a, Register a, Register b>
			ldc:7 == 1157 <ldc Register b, Constant 2>
			ldc:8 == 1158 <or Register b, Register a, Register b>
		push_mem:10 == 1159 <ldb Register b, Register b>
		push_mem:12 == 1160 <@push_reg Register b>
			push_reg:10 == 1160 <.define registerToPush Register b>
			push_reg:13 == 1160 <ldc Register a, Constant 0>
			push_reg:14 == 1161 <ldb Register a, Register a>
			push_reg:15 == 1162 <stb Register a, Register b>
			push_reg:19 == 1163 <ldc Register b, Constant 1>
			push_reg:20 == 1164 <add Register a, Register a, Register b>
			push_reg:21 == 1165 <ldc Register b, Constant 0>
			push_reg:22 == 1166 <stb Register b, Register a>
	call:16 == 1167 <@push_mem Constant 3>
		push_mem:6 == 1167 <.define addr Register b>
		push_mem:7 == 1167 <.define value Register b>
		push_mem:9 == 1167 <@ldc Register b, Constant 3>
			ldc:1 == 1167 <.define writeReg Register b>
			ldc:2 == 1167 <.define const Constant 3>
			ldc:4 == 1167 <ldc Register a, Constant 0>
			ldc:5 == 1168 <ldc Register b, Constant 12>
			ldc:6 == 1169 <shl Register a, Register a, Register b>
			ldc:7 == 1170 <ldc Register b, Constant 3>
			ldc:8 == 1171 <or Register b, Register a, Register b>
		push_mem:10 == 1172 <ldb Register b, Register b>
		push_mem:12 == 1173 <@push_reg Register b>
			push_reg:10 == 1173 <.define registerToPush Register b>
			push_reg:13 == 1173 <ldc Register a, Constant 0>
			push_reg:14 == 1174 <ldb Register a, Register a>
			push_reg:15 == 1175 <stb Register a, Register b>
			push_reg:19 == 1176 <ldc Register b, Constant 1>
			push_reg:20 == 1177 <add Register a, Register a, Register b>
			push_reg:21 == 1178 <ldc Register b, Constant 0>
			push_reg:22 == 1179 <stb Register b, Register a>
	call:19 == 1180 <@push_const Constant 1292>
		push_const:6 == 1180 <.define constantToPush Constant 1292>
		push_const:12 == 1180 <@ldc Register b, Constant 1292>
			ldc:1 == 1180 <.define writeReg Register b>
			ldc:2 == 1180 <.define const Constant 1292>
			ldc:4 == 1180 <ldc Register a, Constant 0>
			ldc:5 == 1181 <ldc Register b, Constant 12>
			ldc:6 == 1182 <shl Register a, Register a, Register b>
			ldc:7 == 1183 <ldc Register b, Constant 1292>
			ldc:8 == 1184 <or Register b, Register a, Register b>
		push_const:14 == 1185 <@push_reg Register b>
			push_reg:10 == 1185 <.define registerToPush Register b>
			push_reg:13 == 1185 <ldc Register a, Constant 0>
			push_reg:14 == 1186 <ldb Register a, Register a>
			push_reg:15 == 1187 <stb Register a, Register b>
			push_reg:19 == 1188 <ldc Register b, Constant 1>
			push_reg:20 == 1189 <add Register a, Register a, Register b>
			push_reg:21 == 1190 <ldc Register b, Constant 0>
			push_reg:22 == 1191 <stb Register b, Register a>
	call:24 == 1192 <@push_mem Constant 0>
		push_mem:6 == 1192 <.define addr Register b>
		push_mem:7 == 1192 <.define value Register b>
		push_mem:9 == 1192 <@ldc Register b, Constant 0>
			ldc:1 == 1192 <.define writeReg Register b>
			ldc:2 == 1192 <.define const Constant 0>
			ldc:4 == 1192 <ldc Register a, Constant 0>
			ldc:5 == 1193 <ldc Register b, Constant 12>
			ldc:6 == 1194 <shl Register a, Register a, Register b>
			ldc:7 == 1195 <ldc Register b, Constant 0>
			ldc:8 == 1196 <or Register b, Register a, Register b>
		push_mem:10 == 1197 <ldb Register b, Register b>
		push_mem:12 == 1198 <@push_reg Register b>
			push_reg:10 == 1198 <.define registerToPush Register b>
			push_reg:13 == 1198 <ldc Register a, Constant 0>
			push_reg:14 == 1199 <ldb Register a, Register a>
			push_reg:15 == 1200 <stb Register a, Register b>
			push_reg:19 == 1201 <ldc Register b, Constant 1>
			push_reg:20 == 1202 <add Register a, Register a, Register b>
			push_reg:21 == 1203 <ldc Register b, Constant 0>
			push_reg:22 == 1204 <stb Register b, Register a>
	call:26 == 1205 <@push_const Constant 3>
		push_const:6 == 1205 <.define constantToPush Constant 3>
		push_const:12 == 1205 <@ldc Register b, Constant 3>
			ldc:1 == 1205 <.define writeReg Register b>
			ldc:2 == 1205 <.define const Constant 3>
			ldc:4 == 1205 <ldc Register a, Constant 0>
			ldc:5 == 1206 <ldc Register b, Constant 12>
			ldc:6 == 1207 <shl Register a, Register a, Register b>
			ldc:7 == 1208 <ldc Register b, Constant 3>
			ldc:8 == 1209 <or Register b, Register a, Register b>
		push_const:14 == 1210 <@push_reg Register b>
			push_reg:10 == 1210 <.define registerToPush Register b>
			push_reg:13 == 1210 <ldc Register a, Constant 0>
			push_reg:14 == 1211 <ldb Register a, Register a>
			push_reg:15 == 1212 <stb Register a, Register b>
			push_reg:19 == 1213 <ldc Register b, Constant 1>
			push_reg:20 == 1214 <add Register a, Register a, Register b>
			push_reg:21 == 1215 <ldc Register b, Constant 0>
			push_reg:22 == 1216 <stb Register b, Register a>
	call:27 == 1217 <@push_const Constant 3>
		push_const:6 == 1217 <.define constantToPush Constant 3>
		push_const:12 == 1217 <@ldc Register b, Constant 3>
			ldc:1 == 1217 <.define writeReg Register b>
			ldc:2 == 1217 <.define const Constant 3>
			ldc:4 == 1217 <ldc Register a, Constant 0>
			ldc:5 == 1218 <ldc Register b, Constant 12>
			ldc:6 == 1219 <shl Register a, Register a, Register b>
			ldc:7 == 1220 <ldc Register b, Constant 3>
			ldc:8 == 1221 <or Register b, Register a, Register b>
		push_const:14 == 1222 <@push_reg Register b>
			push_reg:10 == 1222 <.define registerToPush Register b>
			push_reg:13 == 1222 <ldc Register a, Constant 0>
			push_reg:14 == 1223 <ldb Register a, Register a>
			push_reg:15 == 1224 <stb Register a, Register b>
			push_reg:19 == 1225 <ldc Register b, Constant 1>
			push_reg:20 == 1226 <add Register a, Register a, Register b>
			push_reg:21 == 1227 <ldc Register b, Constant 0>
			push_reg:22 == 1228 <stb Register b, Register a>
	call:28 == 1229 <@add >
		add:3 == 1229 <.define lhs Register c>
		add:4 == 1229 <.define rhs Register d>
		add:5 == 1229 <.define result Register d>
		add:7 == 1229 <@pop_reg Register c>
			pop_reg:10 == 1229 <.define registerToLoad Register c>
			pop_reg:13 == 1229 <ldc Register a, Constant 0>
			pop_reg:14 == 1230 <ldb Register a, Register a>
			pop_reg:15 == 1231 <ldc Register b, Constant 1>
			pop_reg:16 == 1232 <sub Register a, Register a, Register b>
			pop_reg:17 == 1233 <ldc Register b, Constant 0>
			pop_reg:18 == 1234 <stb Register b, Register a>
			pop_reg:22 == 1235 <ldb Register a, Register c>
		add:8 == 1236 <@pop_reg Register d>
			pop_reg:10 == 1236 <.define registerToLoad Register d>
			pop_reg:13 == 1236 <ldc Register a, Constant 0>
			pop_reg:14 == 1237 <ldb Register a, Register a>
			pop_reg:15 == 1238 <ldc Register b, Constant 1>
			pop_reg:16 == 1239 <sub Register a, Register a, Register b>
			pop_reg:17 == 1240 <ldc Register b, Constant 0>
			pop_reg:18 == 1241 <stb Register b, Register a>
			pop_reg:22 == 1242 <ldb Register a, Register d>
		add:9 == 1243 <add Register d, Register c, Register d>
		add:10 == 1244 <@push_reg Register d>
			push_reg:10 == 1244 <.define registerToPush Register d>
			push_reg:13 == 1244 <ldc Register a, Constant 0>
			push_reg:14 == 1245 <ldb Register a, Register a>
			push_reg:15 == 1246 <stb Register a, Register d>
			push_reg:19 == 1247 <ldc Register b, Constant 1>
			push_reg:20 == 1248 <add Register a, Register a, Register b>
			push_reg:21 == 1249 <ldc Register b, Constant 0>
			push_reg:22 == 1250 <stb Register b, Register a>
	call:29 == 1251 <@sub >
		sub:3 == 1251 <.define lhs Register c>
		sub:4 == 1251 <.define rhs Register d>
		sub:5 == 1251 <.define result Register d>
		sub:7 == 1251 <@pop_reg Register d>
			pop_reg:10 == 1251 <.define registerToLoad Register d>
			pop_reg:13 == 1251 <ldc Register a, Constant 0>
			pop_reg:14 == 1252 <ldb Register a, Register a>
			pop_reg:15 == 1253 <ldc Register b, Constant 1>
			pop_reg:16 == 1254 <sub Register a, Register a, Register b>
			pop_reg:17 == 1255 <ldc Register b, Constant 0>
			pop_reg:18 == 1256 <stb Register b, Register a>
			pop_reg:22 == 1257 <ldb Register a, Register d>
		sub:8 == 1258 <@pop_reg Register c>
			pop_reg:10 == 1258 <.define registerToLoad Register c>
			pop_reg:13 == 1258 <ldc Register a, Constant 0>
			pop_reg:14 == 1259 <ldb Register a, Register a>
			pop_reg:15 == 1260 <ldc Register b, Constant 1>
			pop_reg:16 == 1261 <sub Register a, Register a, Register b>
			pop_reg:17 == 1262 <ldc Register b, Constant 0>
			pop_reg:18 == 1263 <stb Register b, Register a>
			pop_reg:22 == 1264 <ldb Register a, Register c>
		sub:9 == 1265 <sub Register d, Register c, Register d>
		sub:10 == 1266 <@push_reg Register d>
			push_reg:10 == 1266 <.define registerToPush Register d>
			push_reg:13 == 1266 <ldc Register a, Constant 0>
			push_reg:14 == 1267 <ldb Register a, Register a>
			push_reg:15 == 1268 <stb Register a, Register d>
			push_reg:19 == 1269 <ldc Register b, Constant 1>
			push_reg:20 == 1270 <add Register a, Register a, Register b>
			push_reg:21 == 1271 <ldc Register b, Constant 0>
			push_reg:22 == 1272 <stb Register b, Register a>
	call:30 == 1273 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 1273 <.define val Register c>
		pop_mem_v:7 == 1273 <.define addr Constant 2>
		pop_mem_v:9 == 1273 <@pop_reg Register c>
			pop_reg:10 == 1273 <.define registerToLoad Register c>
			pop_reg:13 == 1273 <ldc Register a, Constant 0>
			pop_reg:14 == 1274 <ldb Register a, Register a>
			pop_reg:15 == 1275 <ldc Register b, Constant 1>
			pop_reg:16 == 1276 <sub Register a, Register a, Register b>
			pop_reg:17 == 1277 <ldc Register b, Constant 0>
			pop_reg:18 == 1278 <stb Register b, Register a>
			pop_reg:22 == 1279 <ldb Register a, Register c>
		pop_mem_v:11 == 1280 <@ldc Register b, Constant 2>
			ldc:1 == 1280 <.define writeReg Register b>
			ldc:2 == 1280 <.define const Constant 2>
			ldc:4 == 1280 <ldc Register a, Constant 0>
			ldc:5 == 1281 <ldc Register b, Constant 12>
			ldc:6 == 1282 <shl Register a, Register a, Register b>
			ldc:7 == 1283 <ldc Register b, Constant 2>
			ldc:8 == 1284 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1285 <stb Register b, Register c>
	call:32 == 1286 <@ldc Register a, Constant 2751>
		ldc:1 == 1286 <.define writeReg Register a>
		ldc:2 == 1286 <.define const Constant 2751>
		ldc:4 == 1286 <ldc Register a, Constant 0>
		ldc:5 == 1287 <ldc Register b, Constant 12>
		ldc:6 == 1288 <shl Register a, Register a, Register b>
		ldc:7 == 1289 <ldc Register b, Constant 2751>
		ldc:8 == 1290 <or Register a, Register a, Register b>
	call:33 == 1291 <jmp Register a>
	call:38 == 1292 <ldc Register d, Constant 2>
	call:41 == 1293 <ldb Register d, Register d>
	call:43 == 1294 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 1294 <.define val Register c>
		pop_mem_v:7 == 1294 <.define addr Constant 3>
		pop_mem_v:9 == 1294 <@pop_reg Register c>
			pop_reg:10 == 1294 <.define registerToLoad Register c>
			pop_reg:13 == 1294 <ldc Register a, Constant 0>
			pop_reg:14 == 1295 <ldb Register a, Register a>
			pop_reg:15 == 1296 <ldc Register b, Constant 1>
			pop_reg:16 == 1297 <sub Register a, Register a, Register b>
			pop_reg:17 == 1298 <ldc Register b, Constant 0>
			pop_reg:18 == 1299 <stb Register b, Register a>
			pop_reg:22 == 1300 <ldb Register a, Register c>
		pop_mem_v:11 == 1301 <@ldc Register b, Constant 3>
			ldc:1 == 1301 <.define writeReg Register b>
			ldc:2 == 1301 <.define const Constant 3>
			ldc:4 == 1301 <ldc Register a, Constant 0>
			ldc:5 == 1302 <ldc Register b, Constant 12>
			ldc:6 == 1303 <shl Register a, Register a, Register b>
			ldc:7 == 1304 <ldc Register b, Constant 3>
			ldc:8 == 1305 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1306 <stb Register b, Register c>
	call:44 == 1307 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 1307 <.define val Register c>
		pop_mem_v:7 == 1307 <.define addr Constant 2>
		pop_mem_v:9 == 1307 <@pop_reg Register c>
			pop_reg:10 == 1307 <.define registerToLoad Register c>
			pop_reg:13 == 1307 <ldc Register a, Constant 0>
			pop_reg:14 == 1308 <ldb Register a, Register a>
			pop_reg:15 == 1309 <ldc Register b, Constant 1>
			pop_reg:16 == 1310 <sub Register a, Register a, Register b>
			pop_reg:17 == 1311 <ldc Register b, Constant 0>
			pop_reg:18 == 1312 <stb Register b, Register a>
			pop_reg:22 == 1313 <ldb Register a, Register c>
		pop_mem_v:11 == 1314 <@ldc Register b, Constant 2>
			ldc:1 == 1314 <.define writeReg Register b>
			ldc:2 == 1314 <.define const Constant 2>
			ldc:4 == 1314 <ldc Register a, Constant 0>
			ldc:5 == 1315 <ldc Register b, Constant 12>
			ldc:6 == 1316 <shl Register a, Register a, Register b>
			ldc:7 == 1317 <ldc Register b, Constant 2>
			ldc:8 == 1318 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1319 <stb Register b, Register c>
	call:46 == 1320 <ldc Register c, Constant 0>
	call:47 == 1321 <ldb Register c, Register d>
pong.pa2:270 == 1322 <@push_const Constant 56>
	push_const:6 == 1322 <.define constantToPush Constant 56>
	push_const:12 == 1322 <@ldc Register b, Constant 56>
		ldc:1 == 1322 <.define writeReg Register b>
		ldc:2 == 1322 <.define const Constant 56>
		ldc:4 == 1322 <ldc Register a, Constant 0>
		ldc:5 == 1323 <ldc Register b, Constant 12>
		ldc:6 == 1324 <shl Register a, Register a, Register b>
		ldc:7 == 1325 <ldc Register b, Constant 56>
		ldc:8 == 1326 <or Register b, Register a, Register b>
	push_const:14 == 1327 <@push_reg Register b>
		push_reg:10 == 1327 <.define registerToPush Register b>
		push_reg:13 == 1327 <ldc Register a, Constant 0>
		push_reg:14 == 1328 <ldb Register a, Register a>
		push_reg:15 == 1329 <stb Register a, Register b>
		push_reg:19 == 1330 <ldc Register b, Constant 1>
		push_reg:20 == 1331 <add Register a, Register a, Register b>
		push_reg:21 == 1332 <ldc Register b, Constant 0>
		push_reg:22 == 1333 <stb Register b, Register a>
pong.pa2:271 == 1334 <@push_mem Constant 17>
	push_mem:6 == 1334 <.define addr Register b>
	push_mem:7 == 1334 <.define value Register b>
	push_mem:9 == 1334 <@ldc Register b, Constant 17>
		ldc:1 == 1334 <.define writeReg Register b>
		ldc:2 == 1334 <.define const Constant 17>
		ldc:4 == 1334 <ldc Register a, Constant 0>
		ldc:5 == 1335 <ldc Register b, Constant 12>
		ldc:6 == 1336 <shl Register a, Register a, Register b>
		ldc:7 == 1337 <ldc Register b, Constant 17>
		ldc:8 == 1338 <or Register b, Register a, Register b>
	push_mem:10 == 1339 <ldb Register b, Register b>
	push_mem:12 == 1340 <@push_reg Register b>
		push_reg:10 == 1340 <.define registerToPush Register b>
		push_reg:13 == 1340 <ldc Register a, Constant 0>
		push_reg:14 == 1341 <ldb Register a, Register a>
		push_reg:15 == 1342 <stb Register a, Register b>
		push_reg:19 == 1343 <ldc Register b, Constant 1>
		push_reg:20 == 1344 <add Register a, Register a, Register b>
		push_reg:21 == 1345 <ldc Register b, Constant 0>
		push_reg:22 == 1346 <stb Register b, Register a>
pong.pa2:272 == 1347 <@push_const Constant 9>
	push_const:6 == 1347 <.define constantToPush Constant 9>
	push_const:12 == 1347 <@ldc Register b, Constant 9>
		ldc:1 == 1347 <.define writeReg Register b>
		ldc:2 == 1347 <.define const Constant 9>
		ldc:4 == 1347 <ldc Register a, Constant 0>
		ldc:5 == 1348 <ldc Register b, Constant 12>
		ldc:6 == 1349 <shl Register a, Register a, Register b>
		ldc:7 == 1350 <ldc Register b, Constant 9>
		ldc:8 == 1351 <or Register b, Register a, Register b>
	push_const:14 == 1352 <@push_reg Register b>
		push_reg:10 == 1352 <.define registerToPush Register b>
		push_reg:13 == 1352 <ldc Register a, Constant 0>
		push_reg:14 == 1353 <ldb Register a, Register a>
		push_reg:15 == 1354 <stb Register a, Register b>
		push_reg:19 == 1355 <ldc Register b, Constant 1>
		push_reg:20 == 1356 <add Register a, Register a, Register b>
		push_reg:21 == 1357 <ldc Register b, Constant 0>
		push_reg:22 == 1358 <stb Register b, Register a>
pong.pa2:273 == 1359 <@call Constant 1973, Constant 3>
	call:11 == 1359 <.define functionLabel Constant 1973>
	call:12 == 1359 <.define argcount Constant 3>
	call:15 == 1359 <@push_mem Constant 2>
		push_mem:6 == 1359 <.define addr Register b>
		push_mem:7 == 1359 <.define value Register b>
		push_mem:9 == 1359 <@ldc Register b, Constant 2>
			ldc:1 == 1359 <.define writeReg Register b>
			ldc:2 == 1359 <.define const Constant 2>
			ldc:4 == 1359 <ldc Register a, Constant 0>
			ldc:5 == 1360 <ldc Register b, Constant 12>
			ldc:6 == 1361 <shl Register a, Register a, Register b>
			ldc:7 == 1362 <ldc Register b, Constant 2>
			ldc:8 == 1363 <or Register b, Register a, Register b>
		push_mem:10 == 1364 <ldb Register b, Register b>
		push_mem:12 == 1365 <@push_reg Register b>
			push_reg:10 == 1365 <.define registerToPush Register b>
			push_reg:13 == 1365 <ldc Register a, Constant 0>
			push_reg:14 == 1366 <ldb Register a, Register a>
			push_reg:15 == 1367 <stb Register a, Register b>
			push_reg:19 == 1368 <ldc Register b, Constant 1>
			push_reg:20 == 1369 <add Register a, Register a, Register b>
			push_reg:21 == 1370 <ldc Register b, Constant 0>
			push_reg:22 == 1371 <stb Register b, Register a>
	call:16 == 1372 <@push_mem Constant 3>
		push_mem:6 == 1372 <.define addr Register b>
		push_mem:7 == 1372 <.define value Register b>
		push_mem:9 == 1372 <@ldc Register b, Constant 3>
			ldc:1 == 1372 <.define writeReg Register b>
			ldc:2 == 1372 <.define const Constant 3>
			ldc:4 == 1372 <ldc Register a, Constant 0>
			ldc:5 == 1373 <ldc Register b, Constant 12>
			ldc:6 == 1374 <shl Register a, Register a, Register b>
			ldc:7 == 1375 <ldc Register b, Constant 3>
			ldc:8 == 1376 <or Register b, Register a, Register b>
		push_mem:10 == 1377 <ldb Register b, Register b>
		push_mem:12 == 1378 <@push_reg Register b>
			push_reg:10 == 1378 <.define registerToPush Register b>
			push_reg:13 == 1378 <ldc Register a, Constant 0>
			push_reg:14 == 1379 <ldb Register a, Register a>
			push_reg:15 == 1380 <stb Register a, Register b>
			push_reg:19 == 1381 <ldc Register b, Constant 1>
			push_reg:20 == 1382 <add Register a, Register a, Register b>
			push_reg:21 == 1383 <ldc Register b, Constant 0>
			push_reg:22 == 1384 <stb Register b, Register a>
	call:19 == 1385 <@push_const Constant 1497>
		push_const:6 == 1385 <.define constantToPush Constant 1497>
		push_const:12 == 1385 <@ldc Register b, Constant 1497>
			ldc:1 == 1385 <.define writeReg Register b>
			ldc:2 == 1385 <.define const Constant 1497>
			ldc:4 == 1385 <ldc Register a, Constant 0>
			ldc:5 == 1386 <ldc Register b, Constant 12>
			ldc:6 == 1387 <shl Register a, Register a, Register b>
			ldc:7 == 1388 <ldc Register b, Constant 1497>
			ldc:8 == 1389 <or Register b, Register a, Register b>
		push_const:14 == 1390 <@push_reg Register b>
			push_reg:10 == 1390 <.define registerToPush Register b>
			push_reg:13 == 1390 <ldc Register a, Constant 0>
			push_reg:14 == 1391 <ldb Register a, Register a>
			push_reg:15 == 1392 <stb Register a, Register b>
			push_reg:19 == 1393 <ldc Register b, Constant 1>
			push_reg:20 == 1394 <add Register a, Register a, Register b>
			push_reg:21 == 1395 <ldc Register b, Constant 0>
			push_reg:22 == 1396 <stb Register b, Register a>
	call:24 == 1397 <@push_mem Constant 0>
		push_mem:6 == 1397 <.define addr Register b>
		push_mem:7 == 1397 <.define value Register b>
		push_mem:9 == 1397 <@ldc Register b, Constant 0>
			ldc:1 == 1397 <.define writeReg Register b>
			ldc:2 == 1397 <.define const Constant 0>
			ldc:4 == 1397 <ldc Register a, Constant 0>
			ldc:5 == 1398 <ldc Register b, Constant 12>
			ldc:6 == 1399 <shl Register a, Register a, Register b>
			ldc:7 == 1400 <ldc Register b, Constant 0>
			ldc:8 == 1401 <or Register b, Register a, Register b>
		push_mem:10 == 1402 <ldb Register b, Register b>
		push_mem:12 == 1403 <@push_reg Register b>
			push_reg:10 == 1403 <.define registerToPush Register b>
			push_reg:13 == 1403 <ldc Register a, Constant 0>
			push_reg:14 == 1404 <ldb Register a, Register a>
			push_reg:15 == 1405 <stb Register a, Register b>
			push_reg:19 == 1406 <ldc Register b, Constant 1>
			push_reg:20 == 1407 <add Register a, Register a, Register b>
			push_reg:21 == 1408 <ldc Register b, Constant 0>
			push_reg:22 == 1409 <stb Register b, Register a>
	call:26 == 1410 <@push_const Constant 3>
		push_const:6 == 1410 <.define constantToPush Constant 3>
		push_const:12 == 1410 <@ldc Register b, Constant 3>
			ldc:1 == 1410 <.define writeReg Register b>
			ldc:2 == 1410 <.define const Constant 3>
			ldc:4 == 1410 <ldc Register a, Constant 0>
			ldc:5 == 1411 <ldc Register b, Constant 12>
			ldc:6 == 1412 <shl Register a, Register a, Register b>
			ldc:7 == 1413 <ldc Register b, Constant 3>
			ldc:8 == 1414 <or Register b, Register a, Register b>
		push_const:14 == 1415 <@push_reg Register b>
			push_reg:10 == 1415 <.define registerToPush Register b>
			push_reg:13 == 1415 <ldc Register a, Constant 0>
			push_reg:14 == 1416 <ldb Register a, Register a>
			push_reg:15 == 1417 <stb Register a, Register b>
			push_reg:19 == 1418 <ldc Register b, Constant 1>
			push_reg:20 == 1419 <add Register a, Register a, Register b>
			push_reg:21 == 1420 <ldc Register b, Constant 0>
			push_reg:22 == 1421 <stb Register b, Register a>
	call:27 == 1422 <@push_const Constant 3>
		push_const:6 == 1422 <.define constantToPush Constant 3>
		push_const:12 == 1422 <@ldc Register b, Constant 3>
			ldc:1 == 1422 <.define writeReg Register b>
			ldc:2 == 1422 <.define const Constant 3>
			ldc:4 == 1422 <ldc Register a, Constant 0>
			ldc:5 == 1423 <ldc Register b, Constant 12>
			ldc:6 == 1424 <shl Register a, Register a, Register b>
			ldc:7 == 1425 <ldc Register b, Constant 3>
			ldc:8 == 1426 <or Register b, Register a, Register b>
		push_const:14 == 1427 <@push_reg Register b>
			push_reg:10 == 1427 <.define registerToPush Register b>
			push_reg:13 == 1427 <ldc Register a, Constant 0>
			push_reg:14 == 1428 <ldb Register a, Register a>
			push_reg:15 == 1429 <stb Register a, Register b>
			push_reg:19 == 1430 <ldc Register b, Constant 1>
			push_reg:20 == 1431 <add Register a, Register a, Register b>
			push_reg:21 == 1432 <ldc Register b, Constant 0>
			push_reg:22 == 1433 <stb Register b, Register a>
	call:28 == 1434 <@add >
		add:3 == 1434 <.define lhs Register c>
		add:4 == 1434 <.define rhs Register d>
		add:5 == 1434 <.define result Register d>
		add:7 == 1434 <@pop_reg Register c>
			pop_reg:10 == 1434 <.define registerToLoad Register c>
			pop_reg:13 == 1434 <ldc Register a, Constant 0>
			pop_reg:14 == 1435 <ldb Register a, Register a>
			pop_reg:15 == 1436 <ldc Register b, Constant 1>
			pop_reg:16 == 1437 <sub Register a, Register a, Register b>
			pop_reg:17 == 1438 <ldc Register b, Constant 0>
			pop_reg:18 == 1439 <stb Register b, Register a>
			pop_reg:22 == 1440 <ldb Register a, Register c>
		add:8 == 1441 <@pop_reg Register d>
			pop_reg:10 == 1441 <.define registerToLoad Register d>
			pop_reg:13 == 1441 <ldc Register a, Constant 0>
			pop_reg:14 == 1442 <ldb Register a, Register a>
			pop_reg:15 == 1443 <ldc Register b, Constant 1>
			pop_reg:16 == 1444 <sub Register a, Register a, Register b>
			pop_reg:17 == 1445 <ldc Register b, Constant 0>
			pop_reg:18 == 1446 <stb Register b, Register a>
			pop_reg:22 == 1447 <ldb Register a, Register d>
		add:9 == 1448 <add Register d, Register c, Register d>
		add:10 == 1449 <@push_reg Register d>
			push_reg:10 == 1449 <.define registerToPush Register d>
			push_reg:13 == 1449 <ldc Register a, Constant 0>
			push_reg:14 == 1450 <ldb Register a, Register a>
			push_reg:15 == 1451 <stb Register a, Register d>
			push_reg:19 == 1452 <ldc Register b, Constant 1>
			push_reg:20 == 1453 <add Register a, Register a, Register b>
			push_reg:21 == 1454 <ldc Register b, Constant 0>
			push_reg:22 == 1455 <stb Register b, Register a>
	call:29 == 1456 <@sub >
		sub:3 == 1456 <.define lhs Register c>
		sub:4 == 1456 <.define rhs Register d>
		sub:5 == 1456 <.define result Register d>
		sub:7 == 1456 <@pop_reg Register d>
			pop_reg:10 == 1456 <.define registerToLoad Register d>
			pop_reg:13 == 1456 <ldc Register a, Constant 0>
			pop_reg:14 == 1457 <ldb Register a, Register a>
			pop_reg:15 == 1458 <ldc Register b, Constant 1>
			pop_reg:16 == 1459 <sub Register a, Register a, Register b>
			pop_reg:17 == 1460 <ldc Register b, Constant 0>
			pop_reg:18 == 1461 <stb Register b, Register a>
			pop_reg:22 == 1462 <ldb Register a, Register d>
		sub:8 == 1463 <@pop_reg Register c>
			pop_reg:10 == 1463 <.define registerToLoad Register c>
			pop_reg:13 == 1463 <ldc Register a, Constant 0>
			pop_reg:14 == 1464 <ldb Register a, Register a>
			pop_reg:15 == 1465 <ldc Register b, Constant 1>
			pop_reg:16 == 1466 <sub Register a, Register a, Register b>
			pop_reg:17 == 1467 <ldc Register b, Constant 0>
			pop_reg:18 == 1468 <stb Register b, Register a>
			pop_reg:22 == 1469 <ldb Register a, Register c>
		sub:9 == 1470 <sub Register d, Register c, Register d>
		sub:10 == 1471 <@push_reg Register d>
			push_reg:10 == 1471 <.define registerToPush Register d>
			push_reg:13 == 1471 <ldc Register a, Constant 0>
			push_reg:14 == 1472 <ldb Register a, Register a>
			push_reg:15 == 1473 <stb Register a, Register d>
			push_reg:19 == 1474 <ldc Register b, Constant 1>
			push_reg:20 == 1475 <add Register a, Register a, Register b>
			push_reg:21 == 1476 <ldc Register b, Constant 0>
			push_reg:22 == 1477 <stb Register b, Register a>
	call:30 == 1478 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 1478 <.define val Register c>
		pop_mem_v:7 == 1478 <.define addr Constant 2>
		pop_mem_v:9 == 1478 <@pop_reg Register c>
			pop_reg:10 == 1478 <.define registerToLoad Register c>
			pop_reg:13 == 1478 <ldc Register a, Constant 0>
			pop_reg:14 == 1479 <ldb Register a, Register a>
			pop_reg:15 == 1480 <ldc Register b, Constant 1>
			pop_reg:16 == 1481 <sub Register a, Register a, Register b>
			pop_reg:17 == 1482 <ldc Register b, Constant 0>
			pop_reg:18 == 1483 <stb Register b, Register a>
			pop_reg:22 == 1484 <ldb Register a, Register c>
		pop_mem_v:11 == 1485 <@ldc Register b, Constant 2>
			ldc:1 == 1485 <.define writeReg Register b>
			ldc:2 == 1485 <.define const Constant 2>
			ldc:4 == 1485 <ldc Register a, Constant 0>
			ldc:5 == 1486 <ldc Register b, Constant 12>
			ldc:6 == 1487 <shl Register a, Register a, Register b>
			ldc:7 == 1488 <ldc Register b, Constant 2>
			ldc:8 == 1489 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1490 <stb Register b, Register c>
	call:32 == 1491 <@ldc Register a, Constant 1973>
		ldc:1 == 1491 <.define writeReg Register a>
		ldc:2 == 1491 <.define const Constant 1973>
		ldc:4 == 1491 <ldc Register a, Constant 0>
		ldc:5 == 1492 <ldc Register b, Constant 12>
		ldc:6 == 1493 <shl Register a, Register a, Register b>
		ldc:7 == 1494 <ldc Register b, Constant 1973>
		ldc:8 == 1495 <or Register a, Register a, Register b>
	call:33 == 1496 <jmp Register a>
	call:38 == 1497 <ldc Register d, Constant 2>
	call:41 == 1498 <ldb Register d, Register d>
	call:43 == 1499 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 1499 <.define val Register c>
		pop_mem_v:7 == 1499 <.define addr Constant 3>
		pop_mem_v:9 == 1499 <@pop_reg Register c>
			pop_reg:10 == 1499 <.define registerToLoad Register c>
			pop_reg:13 == 1499 <ldc Register a, Constant 0>
			pop_reg:14 == 1500 <ldb Register a, Register a>
			pop_reg:15 == 1501 <ldc Register b, Constant 1>
			pop_reg:16 == 1502 <sub Register a, Register a, Register b>
			pop_reg:17 == 1503 <ldc Register b, Constant 0>
			pop_reg:18 == 1504 <stb Register b, Register a>
			pop_reg:22 == 1505 <ldb Register a, Register c>
		pop_mem_v:11 == 1506 <@ldc Register b, Constant 3>
			ldc:1 == 1506 <.define writeReg Register b>
			ldc:2 == 1506 <.define const Constant 3>
			ldc:4 == 1506 <ldc Register a, Constant 0>
			ldc:5 == 1507 <ldc Register b, Constant 12>
			ldc:6 == 1508 <shl Register a, Register a, Register b>
			ldc:7 == 1509 <ldc Register b, Constant 3>
			ldc:8 == 1510 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1511 <stb Register b, Register c>
	call:44 == 1512 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 1512 <.define val Register c>
		pop_mem_v:7 == 1512 <.define addr Constant 2>
		pop_mem_v:9 == 1512 <@pop_reg Register c>
			pop_reg:10 == 1512 <.define registerToLoad Register c>
			pop_reg:13 == 1512 <ldc Register a, Constant 0>
			pop_reg:14 == 1513 <ldb Register a, Register a>
			pop_reg:15 == 1514 <ldc Register b, Constant 1>
			pop_reg:16 == 1515 <sub Register a, Register a, Register b>
			pop_reg:17 == 1516 <ldc Register b, Constant 0>
			pop_reg:18 == 1517 <stb Register b, Register a>
			pop_reg:22 == 1518 <ldb Register a, Register c>
		pop_mem_v:11 == 1519 <@ldc Register b, Constant 2>
			ldc:1 == 1519 <.define writeReg Register b>
			ldc:2 == 1519 <.define const Constant 2>
			ldc:4 == 1519 <ldc Register a, Constant 0>
			ldc:5 == 1520 <ldc Register b, Constant 12>
			ldc:6 == 1521 <shl Register a, Register a, Register b>
			ldc:7 == 1522 <ldc Register b, Constant 2>
			ldc:8 == 1523 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1524 <stb Register b, Register c>
	call:46 == 1525 <ldc Register c, Constant 0>
	call:47 == 1526 <ldb Register c, Register d>
pong.pa2:275 == 1527 <@push_const Constant 8>
	push_const:6 == 1527 <.define constantToPush Constant 8>
	push_const:12 == 1527 <@ldc Register b, Constant 8>
		ldc:1 == 1527 <.define writeReg Register b>
		ldc:2 == 1527 <.define const Constant 8>
		ldc:4 == 1527 <ldc Register a, Constant 0>
		ldc:5 == 1528 <ldc Register b, Constant 12>
		ldc:6 == 1529 <shl Register a, Register a, Register b>
		ldc:7 == 1530 <ldc Register b, Constant 8>
		ldc:8 == 1531 <or Register b, Register a, Register b>
	push_const:14 == 1532 <@push_reg Register b>
		push_reg:10 == 1532 <.define registerToPush Register b>
		push_reg:13 == 1532 <ldc Register a, Constant 0>
		push_reg:14 == 1533 <ldb Register a, Register a>
		push_reg:15 == 1534 <stb Register a, Register b>
		push_reg:19 == 1535 <ldc Register b, Constant 1>
		push_reg:20 == 1536 <add Register a, Register a, Register b>
		push_reg:21 == 1537 <ldc Register b, Constant 0>
		push_reg:22 == 1538 <stb Register b, Register a>
pong.pa2:276 == 1539 <@push_mem Constant 16>
	push_mem:6 == 1539 <.define addr Register b>
	push_mem:7 == 1539 <.define value Register b>
	push_mem:9 == 1539 <@ldc Register b, Constant 16>
		ldc:1 == 1539 <.define writeReg Register b>
		ldc:2 == 1539 <.define const Constant 16>
		ldc:4 == 1539 <ldc Register a, Constant 0>
		ldc:5 == 1540 <ldc Register b, Constant 12>
		ldc:6 == 1541 <shl Register a, Register a, Register b>
		ldc:7 == 1542 <ldc Register b, Constant 16>
		ldc:8 == 1543 <or Register b, Register a, Register b>
	push_mem:10 == 1544 <ldb Register b, Register b>
	push_mem:12 == 1545 <@push_reg Register b>
		push_reg:10 == 1545 <.define registerToPush Register b>
		push_reg:13 == 1545 <ldc Register a, Constant 0>
		push_reg:14 == 1546 <ldb Register a, Register a>
		push_reg:15 == 1547 <stb Register a, Register b>
		push_reg:19 == 1548 <ldc Register b, Constant 1>
		push_reg:20 == 1549 <add Register a, Register a, Register b>
		push_reg:21 == 1550 <ldc Register b, Constant 0>
		push_reg:22 == 1551 <stb Register b, Register a>
pong.pa2:277 == 1552 <@push_const Constant 8>
	push_const:6 == 1552 <.define constantToPush Constant 8>
	push_const:12 == 1552 <@ldc Register b, Constant 8>
		ldc:1 == 1552 <.define writeReg Register b>
		ldc:2 == 1552 <.define const Constant 8>
		ldc:4 == 1552 <ldc Register a, Constant 0>
		ldc:5 == 1553 <ldc Register b, Constant 12>
		ldc:6 == 1554 <shl Register a, Register a, Register b>
		ldc:7 == 1555 <ldc Register b, Constant 8>
		ldc:8 == 1556 <or Register b, Register a, Register b>
	push_const:14 == 1557 <@push_reg Register b>
		push_reg:10 == 1557 <.define registerToPush Register b>
		push_reg:13 == 1557 <ldc Register a, Constant 0>
		push_reg:14 == 1558 <ldb Register a, Register a>
		push_reg:15 == 1559 <stb Register a, Register b>
		push_reg:19 == 1560 <ldc Register b, Constant 1>
		push_reg:20 == 1561 <add Register a, Register a, Register b>
		push_reg:21 == 1562 <ldc Register b, Constant 0>
		push_reg:22 == 1563 <stb Register b, Register a>
pong.pa2:278 == 1564 <@call Constant 1973, Constant 3>
	call:11 == 1564 <.define functionLabel Constant 1973>
	call:12 == 1564 <.define argcount Constant 3>
	call:15 == 1564 <@push_mem Constant 2>
		push_mem:6 == 1564 <.define addr Register b>
		push_mem:7 == 1564 <.define value Register b>
		push_mem:9 == 1564 <@ldc Register b, Constant 2>
			ldc:1 == 1564 <.define writeReg Register b>
			ldc:2 == 1564 <.define const Constant 2>
			ldc:4 == 1564 <ldc Register a, Constant 0>
			ldc:5 == 1565 <ldc Register b, Constant 12>
			ldc:6 == 1566 <shl Register a, Register a, Register b>
			ldc:7 == 1567 <ldc Register b, Constant 2>
			ldc:8 == 1568 <or Register b, Register a, Register b>
		push_mem:10 == 1569 <ldb Register b, Register b>
		push_mem:12 == 1570 <@push_reg Register b>
			push_reg:10 == 1570 <.define registerToPush Register b>
			push_reg:13 == 1570 <ldc Register a, Constant 0>
			push_reg:14 == 1571 <ldb Register a, Register a>
			push_reg:15 == 1572 <stb Register a, Register b>
			push_reg:19 == 1573 <ldc Register b, Constant 1>
			push_reg:20 == 1574 <add Register a, Register a, Register b>
			push_reg:21 == 1575 <ldc Register b, Constant 0>
			push_reg:22 == 1576 <stb Register b, Register a>
	call:16 == 1577 <@push_mem Constant 3>
		push_mem:6 == 1577 <.define addr Register b>
		push_mem:7 == 1577 <.define value Register b>
		push_mem:9 == 1577 <@ldc Register b, Constant 3>
			ldc:1 == 1577 <.define writeReg Register b>
			ldc:2 == 1577 <.define const Constant 3>
			ldc:4 == 1577 <ldc Register a, Constant 0>
			ldc:5 == 1578 <ldc Register b, Constant 12>
			ldc:6 == 1579 <shl Register a, Register a, Register b>
			ldc:7 == 1580 <ldc Register b, Constant 3>
			ldc:8 == 1581 <or Register b, Register a, Register b>
		push_mem:10 == 1582 <ldb Register b, Register b>
		push_mem:12 == 1583 <@push_reg Register b>
			push_reg:10 == 1583 <.define registerToPush Register b>
			push_reg:13 == 1583 <ldc Register a, Constant 0>
			push_reg:14 == 1584 <ldb Register a, Register a>
			push_reg:15 == 1585 <stb Register a, Register b>
			push_reg:19 == 1586 <ldc Register b, Constant 1>
			push_reg:20 == 1587 <add Register a, Register a, Register b>
			push_reg:21 == 1588 <ldc Register b, Constant 0>
			push_reg:22 == 1589 <stb Register b, Register a>
	call:19 == 1590 <@push_const Constant 1702>
		push_const:6 == 1590 <.define constantToPush Constant 1702>
		push_const:12 == 1590 <@ldc Register b, Constant 1702>
			ldc:1 == 1590 <.define writeReg Register b>
			ldc:2 == 1590 <.define const Constant 1702>
			ldc:4 == 1590 <ldc Register a, Constant 0>
			ldc:5 == 1591 <ldc Register b, Constant 12>
			ldc:6 == 1592 <shl Register a, Register a, Register b>
			ldc:7 == 1593 <ldc Register b, Constant 1702>
			ldc:8 == 1594 <or Register b, Register a, Register b>
		push_const:14 == 1595 <@push_reg Register b>
			push_reg:10 == 1595 <.define registerToPush Register b>
			push_reg:13 == 1595 <ldc Register a, Constant 0>
			push_reg:14 == 1596 <ldb Register a, Register a>
			push_reg:15 == 1597 <stb Register a, Register b>
			push_reg:19 == 1598 <ldc Register b, Constant 1>
			push_reg:20 == 1599 <add Register a, Register a, Register b>
			push_reg:21 == 1600 <ldc Register b, Constant 0>
			push_reg:22 == 1601 <stb Register b, Register a>
	call:24 == 1602 <@push_mem Constant 0>
		push_mem:6 == 1602 <.define addr Register b>
		push_mem:7 == 1602 <.define value Register b>
		push_mem:9 == 1602 <@ldc Register b, Constant 0>
			ldc:1 == 1602 <.define writeReg Register b>
			ldc:2 == 1602 <.define const Constant 0>
			ldc:4 == 1602 <ldc Register a, Constant 0>
			ldc:5 == 1603 <ldc Register b, Constant 12>
			ldc:6 == 1604 <shl Register a, Register a, Register b>
			ldc:7 == 1605 <ldc Register b, Constant 0>
			ldc:8 == 1606 <or Register b, Register a, Register b>
		push_mem:10 == 1607 <ldb Register b, Register b>
		push_mem:12 == 1608 <@push_reg Register b>
			push_reg:10 == 1608 <.define registerToPush Register b>
			push_reg:13 == 1608 <ldc Register a, Constant 0>
			push_reg:14 == 1609 <ldb Register a, Register a>
			push_reg:15 == 1610 <stb Register a, Register b>
			push_reg:19 == 1611 <ldc Register b, Constant 1>
			push_reg:20 == 1612 <add Register a, Register a, Register b>
			push_reg:21 == 1613 <ldc Register b, Constant 0>
			push_reg:22 == 1614 <stb Register b, Register a>
	call:26 == 1615 <@push_const Constant 3>
		push_const:6 == 1615 <.define constantToPush Constant 3>
		push_const:12 == 1615 <@ldc Register b, Constant 3>
			ldc:1 == 1615 <.define writeReg Register b>
			ldc:2 == 1615 <.define const Constant 3>
			ldc:4 == 1615 <ldc Register a, Constant 0>
			ldc:5 == 1616 <ldc Register b, Constant 12>
			ldc:6 == 1617 <shl Register a, Register a, Register b>
			ldc:7 == 1618 <ldc Register b, Constant 3>
			ldc:8 == 1619 <or Register b, Register a, Register b>
		push_const:14 == 1620 <@push_reg Register b>
			push_reg:10 == 1620 <.define registerToPush Register b>
			push_reg:13 == 1620 <ldc Register a, Constant 0>
			push_reg:14 == 1621 <ldb Register a, Register a>
			push_reg:15 == 1622 <stb Register a, Register b>
			push_reg:19 == 1623 <ldc Register b, Constant 1>
			push_reg:20 == 1624 <add Register a, Register a, Register b>
			push_reg:21 == 1625 <ldc Register b, Constant 0>
			push_reg:22 == 1626 <stb Register b, Register a>
	call:27 == 1627 <@push_const Constant 3>
		push_const:6 == 1627 <.define constantToPush Constant 3>
		push_const:12 == 1627 <@ldc Register b, Constant 3>
			ldc:1 == 1627 <.define writeReg Register b>
			ldc:2 == 1627 <.define const Constant 3>
			ldc:4 == 1627 <ldc Register a, Constant 0>
			ldc:5 == 1628 <ldc Register b, Constant 12>
			ldc:6 == 1629 <shl Register a, Register a, Register b>
			ldc:7 == 1630 <ldc Register b, Constant 3>
			ldc:8 == 1631 <or Register b, Register a, Register b>
		push_const:14 == 1632 <@push_reg Register b>
			push_reg:10 == 1632 <.define registerToPush Register b>
			push_reg:13 == 1632 <ldc Register a, Constant 0>
			push_reg:14 == 1633 <ldb Register a, Register a>
			push_reg:15 == 1634 <stb Register a, Register b>
			push_reg:19 == 1635 <ldc Register b, Constant 1>
			push_reg:20 == 1636 <add Register a, Register a, Register b>
			push_reg:21 == 1637 <ldc Register b, Constant 0>
			push_reg:22 == 1638 <stb Register b, Register a>
	call:28 == 1639 <@add >
		add:3 == 1639 <.define lhs Register c>
		add:4 == 1639 <.define rhs Register d>
		add:5 == 1639 <.define result Register d>
		add:7 == 1639 <@pop_reg Register c>
			pop_reg:10 == 1639 <.define registerToLoad Register c>
			pop_reg:13 == 1639 <ldc Register a, Constant 0>
			pop_reg:14 == 1640 <ldb Register a, Register a>
			pop_reg:15 == 1641 <ldc Register b, Constant 1>
			pop_reg:16 == 1642 <sub Register a, Register a, Register b>
			pop_reg:17 == 1643 <ldc Register b, Constant 0>
			pop_reg:18 == 1644 <stb Register b, Register a>
			pop_reg:22 == 1645 <ldb Register a, Register c>
		add:8 == 1646 <@pop_reg Register d>
			pop_reg:10 == 1646 <.define registerToLoad Register d>
			pop_reg:13 == 1646 <ldc Register a, Constant 0>
			pop_reg:14 == 1647 <ldb Register a, Register a>
			pop_reg:15 == 1648 <ldc Register b, Constant 1>
			pop_reg:16 == 1649 <sub Register a, Register a, Register b>
			pop_reg:17 == 1650 <ldc Register b, Constant 0>
			pop_reg:18 == 1651 <stb Register b, Register a>
			pop_reg:22 == 1652 <ldb Register a, Register d>
		add:9 == 1653 <add Register d, Register c, Register d>
		add:10 == 1654 <@push_reg Register d>
			push_reg:10 == 1654 <.define registerToPush Register d>
			push_reg:13 == 1654 <ldc Register a, Constant 0>
			push_reg:14 == 1655 <ldb Register a, Register a>
			push_reg:15 == 1656 <stb Register a, Register d>
			push_reg:19 == 1657 <ldc Register b, Constant 1>
			push_reg:20 == 1658 <add Register a, Register a, Register b>
			push_reg:21 == 1659 <ldc Register b, Constant 0>
			push_reg:22 == 1660 <stb Register b, Register a>
	call:29 == 1661 <@sub >
		sub:3 == 1661 <.define lhs Register c>
		sub:4 == 1661 <.define rhs Register d>
		sub:5 == 1661 <.define result Register d>
		sub:7 == 1661 <@pop_reg Register d>
			pop_reg:10 == 1661 <.define registerToLoad Register d>
			pop_reg:13 == 1661 <ldc Register a, Constant 0>
			pop_reg:14 == 1662 <ldb Register a, Register a>
			pop_reg:15 == 1663 <ldc Register b, Constant 1>
			pop_reg:16 == 1664 <sub Register a, Register a, Register b>
			pop_reg:17 == 1665 <ldc Register b, Constant 0>
			pop_reg:18 == 1666 <stb Register b, Register a>
			pop_reg:22 == 1667 <ldb Register a, Register d>
		sub:8 == 1668 <@pop_reg Register c>
			pop_reg:10 == 1668 <.define registerToLoad Register c>
			pop_reg:13 == 1668 <ldc Register a, Constant 0>
			pop_reg:14 == 1669 <ldb Register a, Register a>
			pop_reg:15 == 1670 <ldc Register b, Constant 1>
			pop_reg:16 == 1671 <sub Register a, Register a, Register b>
			pop_reg:17 == 1672 <ldc Register b, Constant 0>
			pop_reg:18 == 1673 <stb Register b, Register a>
			pop_reg:22 == 1674 <ldb Register a, Register c>
		sub:9 == 1675 <sub Register d, Register c, Register d>
		sub:10 == 1676 <@push_reg Register d>
			push_reg:10 == 1676 <.define registerToPush Register d>
			push_reg:13 == 1676 <ldc Register a, Constant 0>
			push_reg:14 == 1677 <ldb Register a, Register a>
			push_reg:15 == 1678 <stb Register a, Register d>
			push_reg:19 == 1679 <ldc Register b, Constant 1>
			push_reg:20 == 1680 <add Register a, Register a, Register b>
			push_reg:21 == 1681 <ldc Register b, Constant 0>
			push_reg:22 == 1682 <stb Register b, Register a>
	call:30 == 1683 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 1683 <.define val Register c>
		pop_mem_v:7 == 1683 <.define addr Constant 2>
		pop_mem_v:9 == 1683 <@pop_reg Register c>
			pop_reg:10 == 1683 <.define registerToLoad Register c>
			pop_reg:13 == 1683 <ldc Register a, Constant 0>
			pop_reg:14 == 1684 <ldb Register a, Register a>
			pop_reg:15 == 1685 <ldc Register b, Constant 1>
			pop_reg:16 == 1686 <sub Register a, Register a, Register b>
			pop_reg:17 == 1687 <ldc Register b, Constant 0>
			pop_reg:18 == 1688 <stb Register b, Register a>
			pop_reg:22 == 1689 <ldb Register a, Register c>
		pop_mem_v:11 == 1690 <@ldc Register b, Constant 2>
			ldc:1 == 1690 <.define writeReg Register b>
			ldc:2 == 1690 <.define const Constant 2>
			ldc:4 == 1690 <ldc Register a, Constant 0>
			ldc:5 == 1691 <ldc Register b, Constant 12>
			ldc:6 == 1692 <shl Register a, Register a, Register b>
			ldc:7 == 1693 <ldc Register b, Constant 2>
			ldc:8 == 1694 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1695 <stb Register b, Register c>
	call:32 == 1696 <@ldc Register a, Constant 1973>
		ldc:1 == 1696 <.define writeReg Register a>
		ldc:2 == 1696 <.define const Constant 1973>
		ldc:4 == 1696 <ldc Register a, Constant 0>
		ldc:5 == 1697 <ldc Register b, Constant 12>
		ldc:6 == 1698 <shl Register a, Register a, Register b>
		ldc:7 == 1699 <ldc Register b, Constant 1973>
		ldc:8 == 1700 <or Register a, Register a, Register b>
	call:33 == 1701 <jmp Register a>
	call:38 == 1702 <ldc Register d, Constant 2>
	call:41 == 1703 <ldb Register d, Register d>
	call:43 == 1704 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 1704 <.define val Register c>
		pop_mem_v:7 == 1704 <.define addr Constant 3>
		pop_mem_v:9 == 1704 <@pop_reg Register c>
			pop_reg:10 == 1704 <.define registerToLoad Register c>
			pop_reg:13 == 1704 <ldc Register a, Constant 0>
			pop_reg:14 == 1705 <ldb Register a, Register a>
			pop_reg:15 == 1706 <ldc Register b, Constant 1>
			pop_reg:16 == 1707 <sub Register a, Register a, Register b>
			pop_reg:17 == 1708 <ldc Register b, Constant 0>
			pop_reg:18 == 1709 <stb Register b, Register a>
			pop_reg:22 == 1710 <ldb Register a, Register c>
		pop_mem_v:11 == 1711 <@ldc Register b, Constant 3>
			ldc:1 == 1711 <.define writeReg Register b>
			ldc:2 == 1711 <.define const Constant 3>
			ldc:4 == 1711 <ldc Register a, Constant 0>
			ldc:5 == 1712 <ldc Register b, Constant 12>
			ldc:6 == 1713 <shl Register a, Register a, Register b>
			ldc:7 == 1714 <ldc Register b, Constant 3>
			ldc:8 == 1715 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1716 <stb Register b, Register c>
	call:44 == 1717 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 1717 <.define val Register c>
		pop_mem_v:7 == 1717 <.define addr Constant 2>
		pop_mem_v:9 == 1717 <@pop_reg Register c>
			pop_reg:10 == 1717 <.define registerToLoad Register c>
			pop_reg:13 == 1717 <ldc Register a, Constant 0>
			pop_reg:14 == 1718 <ldb Register a, Register a>
			pop_reg:15 == 1719 <ldc Register b, Constant 1>
			pop_reg:16 == 1720 <sub Register a, Register a, Register b>
			pop_reg:17 == 1721 <ldc Register b, Constant 0>
			pop_reg:18 == 1722 <stb Register b, Register a>
			pop_reg:22 == 1723 <ldb Register a, Register c>
		pop_mem_v:11 == 1724 <@ldc Register b, Constant 2>
			ldc:1 == 1724 <.define writeReg Register b>
			ldc:2 == 1724 <.define const Constant 2>
			ldc:4 == 1724 <ldc Register a, Constant 0>
			ldc:5 == 1725 <ldc Register b, Constant 12>
			ldc:6 == 1726 <shl Register a, Register a, Register b>
			ldc:7 == 1727 <ldc Register b, Constant 2>
			ldc:8 == 1728 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1729 <stb Register b, Register c>
	call:46 == 1730 <ldc Register c, Constant 0>
	call:47 == 1731 <ldb Register c, Register d>
pong.pa2:286 == 1732 <@ldc Register a, Constant 24577>
	ldc:1 == 1732 <.define writeReg Register a>
	ldc:2 == 1732 <.define const Constant 24577>
	ldc:4 == 1732 <ldc Register a, Constant 6>
	ldc:5 == 1733 <ldc Register b, Constant 12>
	ldc:6 == 1734 <shl Register a, Register a, Register b>
	ldc:7 == 1735 <ldc Register b, Constant 1>
	ldc:8 == 1736 <or Register a, Register a, Register b>
pong.pa2:287 == 1737 <ldb Register a, Register b>
pong.pa2:288 == 1738 <not Register b, Register b>
pong.pa2:290 == 1739 <ldc Register c, Constant 1>
pong.pa2:291 == 1740 <and Register b, Register b, Register c>
pong.pa2:292 == 1741 <stb Register a, Register b>
pong.pa2:295 == 1742 <@return >
	return:2 == 1742 <ldc Register b, Constant 3>
	return:3 == 1743 <ldb Register b, Register b>
	return:4 == 1744 <ldc Register a, Constant 0>
	return:5 == 1745 <stb Register a, Register b>
	return:7 == 1746 <@pop_reg Register d>
		pop_reg:10 == 1746 <.define registerToLoad Register d>
		pop_reg:13 == 1746 <ldc Register a, Constant 0>
		pop_reg:14 == 1747 <ldb Register a, Register a>
		pop_reg:15 == 1748 <ldc Register b, Constant 1>
		pop_reg:16 == 1749 <sub Register a, Register a, Register b>
		pop_reg:17 == 1750 <ldc Register b, Constant 0>
		pop_reg:18 == 1751 <stb Register b, Register a>
		pop_reg:22 == 1752 <ldb Register a, Register d>
	return:9 == 1753 <jump Register d>
pong.pa2:301 == 1754 <@function Constant 0>
	function:19 == 1754 <.define loccount Constant 0>
	function:21 == 1754 <.define stackptrptr Register a>
	function:22 == 1754 <.define stackptr Register b>
	function:25 == 1754 <ldc Register a, Constant 0>
	function:26 == 1755 <ldb Register a, Register b>
	function:27 == 1756 <ldc Register c, Constant 3>
	function:28 == 1757 <stb Register c, Register b>
	function:31 == 1758 <ldc Register c, Constant 0>
	function:32 == 1759 <add Register b, Register b, Register c>
	function:33 == 1760 <stb Register a, Register b>
pong.pa2:311 == 1761 <@call_value Constant 3080, Constant 0>
	call_value:1 == 1761 <@call Constant 3080, Constant 0>
		call:11 == 1761 <.define functionLabel Constant 3080>
		call:12 == 1761 <.define argcount Constant 0>
		call:15 == 1761 <@push_mem Constant 2>
			push_mem:6 == 1761 <.define addr Register b>
			push_mem:7 == 1761 <.define value Register b>
			push_mem:9 == 1761 <@ldc Register b, Constant 2>
				ldc:1 == 1761 <.define writeReg Register b>
				ldc:2 == 1761 <.define const Constant 2>
				ldc:4 == 1761 <ldc Register a, Constant 0>
				ldc:5 == 1762 <ldc Register b, Constant 12>
				ldc:6 == 1763 <shl Register a, Register a, Register b>
				ldc:7 == 1764 <ldc Register b, Constant 2>
				ldc:8 == 1765 <or Register b, Register a, Register b>
			push_mem:10 == 1766 <ldb Register b, Register b>
			push_mem:12 == 1767 <@push_reg Register b>
				push_reg:10 == 1767 <.define registerToPush Register b>
				push_reg:13 == 1767 <ldc Register a, Constant 0>
				push_reg:14 == 1768 <ldb Register a, Register a>
				push_reg:15 == 1769 <stb Register a, Register b>
				push_reg:19 == 1770 <ldc Register b, Constant 1>
				push_reg:20 == 1771 <add Register a, Register a, Register b>
				push_reg:21 == 1772 <ldc Register b, Constant 0>
				push_reg:22 == 1773 <stb Register b, Register a>
		call:16 == 1774 <@push_mem Constant 3>
			push_mem:6 == 1774 <.define addr Register b>
			push_mem:7 == 1774 <.define value Register b>
			push_mem:9 == 1774 <@ldc Register b, Constant 3>
				ldc:1 == 1774 <.define writeReg Register b>
				ldc:2 == 1774 <.define const Constant 3>
				ldc:4 == 1774 <ldc Register a, Constant 0>
				ldc:5 == 1775 <ldc Register b, Constant 12>
				ldc:6 == 1776 <shl Register a, Register a, Register b>
				ldc:7 == 1777 <ldc Register b, Constant 3>
				ldc:8 == 1778 <or Register b, Register a, Register b>
			push_mem:10 == 1779 <ldb Register b, Register b>
			push_mem:12 == 1780 <@push_reg Register b>
				push_reg:10 == 1780 <.define registerToPush Register b>
				push_reg:13 == 1780 <ldc Register a, Constant 0>
				push_reg:14 == 1781 <ldb Register a, Register a>
				push_reg:15 == 1782 <stb Register a, Register b>
				push_reg:19 == 1783 <ldc Register b, Constant 1>
				push_reg:20 == 1784 <add Register a, Register a, Register b>
				push_reg:21 == 1785 <ldc Register b, Constant 0>
				push_reg:22 == 1786 <stb Register b, Register a>
		call:19 == 1787 <@push_const Constant 1899>
			push_const:6 == 1787 <.define constantToPush Constant 1899>
			push_const:12 == 1787 <@ldc Register b, Constant 1899>
				ldc:1 == 1787 <.define writeReg Register b>
				ldc:2 == 1787 <.define const Constant 1899>
				ldc:4 == 1787 <ldc Register a, Constant 0>
				ldc:5 == 1788 <ldc Register b, Constant 12>
				ldc:6 == 1789 <shl Register a, Register a, Register b>
				ldc:7 == 1790 <ldc Register b, Constant 1899>
				ldc:8 == 1791 <or Register b, Register a, Register b>
			push_const:14 == 1792 <@push_reg Register b>
				push_reg:10 == 1792 <.define registerToPush Register b>
				push_reg:13 == 1792 <ldc Register a, Constant 0>
				push_reg:14 == 1793 <ldb Register a, Register a>
				push_reg:15 == 1794 <stb Register a, Register b>
				push_reg:19 == 1795 <ldc Register b, Constant 1>
				push_reg:20 == 1796 <add Register a, Register a, Register b>
				push_reg:21 == 1797 <ldc Register b, Constant 0>
				push_reg:22 == 1798 <stb Register b, Register a>
		call:24 == 1799 <@push_mem Constant 0>
			push_mem:6 == 1799 <.define addr Register b>
			push_mem:7 == 1799 <.define value Register b>
			push_mem:9 == 1799 <@ldc Register b, Constant 0>
				ldc:1 == 1799 <.define writeReg Register b>
				ldc:2 == 1799 <.define const Constant 0>
				ldc:4 == 1799 <ldc Register a, Constant 0>
				ldc:5 == 1800 <ldc Register b, Constant 12>
				ldc:6 == 1801 <shl Register a, Register a, Register b>
				ldc:7 == 1802 <ldc Register b, Constant 0>
				ldc:8 == 1803 <or Register b, Register a, Register b>
			push_mem:10 == 1804 <ldb Register b, Register b>
			push_mem:12 == 1805 <@push_reg Register b>
				push_reg:10 == 1805 <.define registerToPush Register b>
				push_reg:13 == 1805 <ldc Register a, Constant 0>
				push_reg:14 == 1806 <ldb Register a, Register a>
				push_reg:15 == 1807 <stb Register a, Register b>
				push_reg:19 == 1808 <ldc Register b, Constant 1>
				push_reg:20 == 1809 <add Register a, Register a, Register b>
				push_reg:21 == 1810 <ldc Register b, Constant 0>
				push_reg:22 == 1811 <stb Register b, Register a>
		call:26 == 1812 <@push_const Constant 3>
			push_const:6 == 1812 <.define constantToPush Constant 3>
			push_const:12 == 1812 <@ldc Register b, Constant 3>
				ldc:1 == 1812 <.define writeReg Register b>
				ldc:2 == 1812 <.define const Constant 3>
				ldc:4 == 1812 <ldc Register a, Constant 0>
				ldc:5 == 1813 <ldc Register b, Constant 12>
				ldc:6 == 1814 <shl Register a, Register a, Register b>
				ldc:7 == 1815 <ldc Register b, Constant 3>
				ldc:8 == 1816 <or Register b, Register a, Register b>
			push_const:14 == 1817 <@push_reg Register b>
				push_reg:10 == 1817 <.define registerToPush Register b>
				push_reg:13 == 1817 <ldc Register a, Constant 0>
				push_reg:14 == 1818 <ldb Register a, Register a>
				push_reg:15 == 1819 <stb Register a, Register b>
				push_reg:19 == 1820 <ldc Register b, Constant 1>
				push_reg:20 == 1821 <add Register a, Register a, Register b>
				push_reg:21 == 1822 <ldc Register b, Constant 0>
				push_reg:22 == 1823 <stb Register b, Register a>
		call:27 == 1824 <@push_const Constant 0>
			push_const:6 == 1824 <.define constantToPush Constant 0>
			push_const:12 == 1824 <@ldc Register b, Constant 0>
				ldc:1 == 1824 <.define writeReg Register b>
				ldc:2 == 1824 <.define const Constant 0>
				ldc:4 == 1824 <ldc Register a, Constant 0>
				ldc:5 == 1825 <ldc Register b, Constant 12>
				ldc:6 == 1826 <shl Register a, Register a, Register b>
				ldc:7 == 1827 <ldc Register b, Constant 0>
				ldc:8 == 1828 <or Register b, Register a, Register b>
			push_const:14 == 1829 <@push_reg Register b>
				push_reg:10 == 1829 <.define registerToPush Register b>
				push_reg:13 == 1829 <ldc Register a, Constant 0>
				push_reg:14 == 1830 <ldb Register a, Register a>
				push_reg:15 == 1831 <stb Register a, Register b>
				push_reg:19 == 1832 <ldc Register b, Constant 1>
				push_reg:20 == 1833 <add Register a, Register a, Register b>
				push_reg:21 == 1834 <ldc Register b, Constant 0>
				push_reg:22 == 1835 <stb Register b, Register a>
		call:28 == 1836 <@add >
			add:3 == 1836 <.define lhs Register c>
			add:4 == 1836 <.define rhs Register d>
			add:5 == 1836 <.define result Register d>
			add:7 == 1836 <@pop_reg Register c>
				pop_reg:10 == 1836 <.define registerToLoad Register c>
				pop_reg:13 == 1836 <ldc Register a, Constant 0>
				pop_reg:14 == 1837 <ldb Register a, Register a>
				pop_reg:15 == 1838 <ldc Register b, Constant 1>
				pop_reg:16 == 1839 <sub Register a, Register a, Register b>
				pop_reg:17 == 1840 <ldc Register b, Constant 0>
				pop_reg:18 == 1841 <stb Register b, Register a>
				pop_reg:22 == 1842 <ldb Register a, Register c>
			add:8 == 1843 <@pop_reg Register d>
				pop_reg:10 == 1843 <.define registerToLoad Register d>
				pop_reg:13 == 1843 <ldc Register a, Constant 0>
				pop_reg:14 == 1844 <ldb Register a, Register a>
				pop_reg:15 == 1845 <ldc Register b, Constant 1>
				pop_reg:16 == 1846 <sub Register a, Register a, Register b>
				pop_reg:17 == 1847 <ldc Register b, Constant 0>
				pop_reg:18 == 1848 <stb Register b, Register a>
				pop_reg:22 == 1849 <ldb Register a, Register d>
			add:9 == 1850 <add Register d, Register c, Register d>
			add:10 == 1851 <@push_reg Register d>
				push_reg:10 == 1851 <.define registerToPush Register d>
				push_reg:13 == 1851 <ldc Register a, Constant 0>
				push_reg:14 == 1852 <ldb Register a, Register a>
				push_reg:15 == 1853 <stb Register a, Register d>
				push_reg:19 == 1854 <ldc Register b, Constant 1>
				push_reg:20 == 1855 <add Register a, Register a, Register b>
				push_reg:21 == 1856 <ldc Register b, Constant 0>
				push_reg:22 == 1857 <stb Register b, Register a>
		call:29 == 1858 <@sub >
			sub:3 == 1858 <.define lhs Register c>
			sub:4 == 1858 <.define rhs Register d>
			sub:5 == 1858 <.define result Register d>
			sub:7 == 1858 <@pop_reg Register d>
				pop_reg:10 == 1858 <.define registerToLoad Register d>
				pop_reg:13 == 1858 <ldc Register a, Constant 0>
				pop_reg:14 == 1859 <ldb Register a, Register a>
				pop_reg:15 == 1860 <ldc Register b, Constant 1>
				pop_reg:16 == 1861 <sub Register a, Register a, Register b>
				pop_reg:17 == 1862 <ldc Register b, Constant 0>
				pop_reg:18 == 1863 <stb Register b, Register a>
				pop_reg:22 == 1864 <ldb Register a, Register d>
			sub:8 == 1865 <@pop_reg Register c>
				pop_reg:10 == 1865 <.define registerToLoad Register c>
				pop_reg:13 == 1865 <ldc Register a, Constant 0>
				pop_reg:14 == 1866 <ldb Register a, Register a>
				pop_reg:15 == 1867 <ldc Register b, Constant 1>
				pop_reg:16 == 1868 <sub Register a, Register a, Register b>
				pop_reg:17 == 1869 <ldc Register b, Constant 0>
				pop_reg:18 == 1870 <stb Register b, Register a>
				pop_reg:22 == 1871 <ldb Register a, Register c>
			sub:9 == 1872 <sub Register d, Register c, Register d>
			sub:10 == 1873 <@push_reg Register d>
				push_reg:10 == 1873 <.define registerToPush Register d>
				push_reg:13 == 1873 <ldc Register a, Constant 0>
				push_reg:14 == 1874 <ldb Register a, Register a>
				push_reg:15 == 1875 <stb Register a, Register d>
				push_reg:19 == 1876 <ldc Register b, Constant 1>
				push_reg:20 == 1877 <add Register a, Register a, Register b>
				push_reg:21 == 1878 <ldc Register b, Constant 0>
				push_reg:22 == 1879 <stb Register b, Register a>
		call:30 == 1880 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 1880 <.define val Register c>
			pop_mem_v:7 == 1880 <.define addr Constant 2>
			pop_mem_v:9 == 1880 <@pop_reg Register c>
				pop_reg:10 == 1880 <.define registerToLoad Register c>
				pop_reg:13 == 1880 <ldc Register a, Constant 0>
				pop_reg:14 == 1881 <ldb Register a, Register a>
				pop_reg:15 == 1882 <ldc Register b, Constant 1>
				pop_reg:16 == 1883 <sub Register a, Register a, Register b>
				pop_reg:17 == 1884 <ldc Register b, Constant 0>
				pop_reg:18 == 1885 <stb Register b, Register a>
				pop_reg:22 == 1886 <ldb Register a, Register c>
			pop_mem_v:11 == 1887 <@ldc Register b, Constant 2>
				ldc:1 == 1887 <.define writeReg Register b>
				ldc:2 == 1887 <.define const Constant 2>
				ldc:4 == 1887 <ldc Register a, Constant 0>
				ldc:5 == 1888 <ldc Register b, Constant 12>
				ldc:6 == 1889 <shl Register a, Register a, Register b>
				ldc:7 == 1890 <ldc Register b, Constant 2>
				ldc:8 == 1891 <or Register b, Register a, Register b>
			pop_mem_v:12 == 1892 <stb Register b, Register c>
		call:32 == 1893 <@ldc Register a, Constant 3080>
			ldc:1 == 1893 <.define writeReg Register a>
			ldc:2 == 1893 <.define const Constant 3080>
			ldc:4 == 1893 <ldc Register a, Constant 0>
			ldc:5 == 1894 <ldc Register b, Constant 12>
			ldc:6 == 1895 <shl Register a, Register a, Register b>
			ldc:7 == 1896 <ldc Register b, Constant 3080>
			ldc:8 == 1897 <or Register a, Register a, Register b>
		call:33 == 1898 <jmp Register a>
		call:38 == 1899 <ldc Register d, Constant 2>
		call:41 == 1900 <ldb Register d, Register d>
		call:43 == 1901 <@pop_mem_v Constant 3>
			pop_mem_v:6 == 1901 <.define val Register c>
			pop_mem_v:7 == 1901 <.define addr Constant 3>
			pop_mem_v:9 == 1901 <@pop_reg Register c>
				pop_reg:10 == 1901 <.define registerToLoad Register c>
				pop_reg:13 == 1901 <ldc Register a, Constant 0>
				pop_reg:14 == 1902 <ldb Register a, Register a>
				pop_reg:15 == 1903 <ldc Register b, Constant 1>
				pop_reg:16 == 1904 <sub Register a, Register a, Register b>
				pop_reg:17 == 1905 <ldc Register b, Constant 0>
				pop_reg:18 == 1906 <stb Register b, Register a>
				pop_reg:22 == 1907 <ldb Register a, Register c>
			pop_mem_v:11 == 1908 <@ldc Register b, Constant 3>
				ldc:1 == 1908 <.define writeReg Register b>
				ldc:2 == 1908 <.define const Constant 3>
				ldc:4 == 1908 <ldc Register a, Constant 0>
				ldc:5 == 1909 <ldc Register b, Constant 12>
				ldc:6 == 1910 <shl Register a, Register a, Register b>
				ldc:7 == 1911 <ldc Register b, Constant 3>
				ldc:8 == 1912 <or Register b, Register a, Register b>
			pop_mem_v:12 == 1913 <stb Register b, Register c>
		call:44 == 1914 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 1914 <.define val Register c>
			pop_mem_v:7 == 1914 <.define addr Constant 2>
			pop_mem_v:9 == 1914 <@pop_reg Register c>
				pop_reg:10 == 1914 <.define registerToLoad Register c>
				pop_reg:13 == 1914 <ldc Register a, Constant 0>
				pop_reg:14 == 1915 <ldb Register a, Register a>
				pop_reg:15 == 1916 <ldc Register b, Constant 1>
				pop_reg:16 == 1917 <sub Register a, Register a, Register b>
				pop_reg:17 == 1918 <ldc Register b, Constant 0>
				pop_reg:18 == 1919 <stb Register b, Register a>
				pop_reg:22 == 1920 <ldb Register a, Register c>
			pop_mem_v:11 == 1921 <@ldc Register b, Constant 2>
				ldc:1 == 1921 <.define writeReg Register b>
				ldc:2 == 1921 <.define const Constant 2>
				ldc:4 == 1921 <ldc Register a, Constant 0>
				ldc:5 == 1922 <ldc Register b, Constant 12>
				ldc:6 == 1923 <shl Register a, Register a, Register b>
				ldc:7 == 1924 <ldc Register b, Constant 2>
				ldc:8 == 1925 <or Register b, Register a, Register b>
			pop_mem_v:12 == 1926 <stb Register b, Register c>
		call:46 == 1927 <ldc Register c, Constant 0>
		call:47 == 1928 <ldb Register c, Register d>
	call_value:3 == 1929 <@push_mem Constant 1>
		push_mem:6 == 1929 <.define addr Register b>
		push_mem:7 == 1929 <.define value Register b>
		push_mem:9 == 1929 <@ldc Register b, Constant 1>
			ldc:1 == 1929 <.define writeReg Register b>
			ldc:2 == 1929 <.define const Constant 1>
			ldc:4 == 1929 <ldc Register a, Constant 0>
			ldc:5 == 1930 <ldc Register b, Constant 12>
			ldc:6 == 1931 <shl Register a, Register a, Register b>
			ldc:7 == 1932 <ldc Register b, Constant 1>
			ldc:8 == 1933 <or Register b, Register a, Register b>
		push_mem:10 == 1934 <ldb Register b, Register b>
		push_mem:12 == 1935 <@push_reg Register b>
			push_reg:10 == 1935 <.define registerToPush Register b>
			push_reg:13 == 1935 <ldc Register a, Constant 0>
			push_reg:14 == 1936 <ldb Register a, Register a>
			push_reg:15 == 1937 <stb Register a, Register b>
			push_reg:19 == 1938 <ldc Register b, Constant 1>
			push_reg:20 == 1939 <add Register a, Register a, Register b>
			push_reg:21 == 1940 <ldc Register b, Constant 0>
			push_reg:22 == 1941 <stb Register b, Register a>
pong.pa2:312 == 1942 <@pop_reg Register c>
	pop_reg:10 == 1942 <.define registerToLoad Register c>
	pop_reg:13 == 1942 <ldc Register a, Constant 0>
	pop_reg:14 == 1943 <ldb Register a, Register a>
	pop_reg:15 == 1944 <ldc Register b, Constant 1>
	pop_reg:16 == 1945 <sub Register a, Register a, Register b>
	pop_reg:17 == 1946 <ldc Register b, Constant 0>
	pop_reg:18 == 1947 <stb Register b, Register a>
	pop_reg:22 == 1948 <ldb Register a, Register c>
pong.pa2:315 == 1949 <@ldc Register b, Constant 4096>
	ldc:1 == 1949 <.define writeReg Register b>
	ldc:2 == 1949 <.define const Constant 4096>
	ldc:4 == 1949 <ldc Register a, Constant 1>
	ldc:5 == 1950 <ldc Register b, Constant 12>
	ldc:6 == 1951 <shl Register a, Register a, Register b>
	ldc:7 == 1952 <ldc Register b, Constant 0>
	ldc:8 == 1953 <or Register b, Register a, Register b>
pong.pa2:316 == 1954 <add Register d, Register c, Register b>
pong.pa2:319 == 1955 <ldc Register a, Constant 1>
pong.pa2:322 == 1956 <stb Register c, Register a>
pong.pa2:326 == 1957 <ldc Register b, Constant 1>
pong.pa2:327 == 1958 <add Register c, Register c, Register b>
pong.pa2:329 == 1959 <ldc Register b, Constant 1956>
pong.pa2:330 == 1960 <jle Register b, Register c, Register d>
pong.pa2:332 == 1961 <@return >
	return:2 == 1961 <ldc Register b, Constant 3>
	return:3 == 1962 <ldb Register b, Register b>
	return:4 == 1963 <ldc Register a, Constant 0>
	return:5 == 1964 <stb Register a, Register b>
	return:7 == 1965 <@pop_reg Register d>
		pop_reg:10 == 1965 <.define registerToLoad Register d>
		pop_reg:13 == 1965 <ldc Register a, Constant 0>
		pop_reg:14 == 1966 <ldb Register a, Register a>
		pop_reg:15 == 1967 <ldc Register b, Constant 1>
		pop_reg:16 == 1968 <sub Register a, Register a, Register b>
		pop_reg:17 == 1969 <ldc Register b, Constant 0>
		pop_reg:18 == 1970 <stb Register b, Register a>
		pop_reg:22 == 1971 <ldb Register a, Register d>
	return:9 == 1972 <jump Register d>
pong.pa2:339 == 1973 <@function Constant 0>
	function:19 == 1973 <.define loccount Constant 0>
	function:21 == 1973 <.define stackptrptr Register a>
	function:22 == 1973 <.define stackptr Register b>
	function:25 == 1973 <ldc Register a, Constant 0>
	function:26 == 1974 <ldb Register a, Register b>
	function:27 == 1975 <ldc Register c, Constant 3>
	function:28 == 1976 <stb Register c, Register b>
	function:31 == 1977 <ldc Register c, Constant 0>
	function:32 == 1978 <add Register b, Register b, Register c>
	function:33 == 1979 <stb Register a, Register b>
pong.pa2:342 == 1980 <@push_arg Constant 0>
	push_arg:3 == 1980 <.define slot Constant 0>
	push_arg:6 == 1980 <ldc Register a, Constant 2>
	push_arg:7 == 1981 <ldb Register a, Register a>
	push_arg:8 == 1982 <ldc Register b, Constant 0>
	push_arg:9 == 1983 <add Register a, Register a, Register b>
	push_arg:10 == 1984 <ldb Register a, Register b>
	push_arg:12 == 1985 <@push_reg Register b>
		push_reg:10 == 1985 <.define registerToPush Register b>
		push_reg:13 == 1985 <ldc Register a, Constant 0>
		push_reg:14 == 1986 <ldb Register a, Register a>
		push_reg:15 == 1987 <stb Register a, Register b>
		push_reg:19 == 1988 <ldc Register b, Constant 1>
		push_reg:20 == 1989 <add Register a, Register a, Register b>
		push_reg:21 == 1990 <ldc Register b, Constant 0>
		push_reg:22 == 1991 <stb Register b, Register a>
pong.pa2:343 == 1992 <@push_arg Constant 1>
	push_arg:3 == 1992 <.define slot Constant 1>
	push_arg:6 == 1992 <ldc Register a, Constant 2>
	push_arg:7 == 1993 <ldb Register a, Register a>
	push_arg:8 == 1994 <ldc Register b, Constant 1>
	push_arg:9 == 1995 <add Register a, Register a, Register b>
	push_arg:10 == 1996 <ldb Register a, Register b>
	push_arg:12 == 1997 <@push_reg Register b>
		push_reg:10 == 1997 <.define registerToPush Register b>
		push_reg:13 == 1997 <ldc Register a, Constant 0>
		push_reg:14 == 1998 <ldb Register a, Register a>
		push_reg:15 == 1999 <stb Register a, Register b>
		push_reg:19 == 2000 <ldc Register b, Constant 1>
		push_reg:20 == 2001 <add Register a, Register a, Register b>
		push_reg:21 == 2002 <ldc Register b, Constant 0>
		push_reg:22 == 2003 <stb Register b, Register a>
pong.pa2:344 == 2004 <@push_const Constant 8>
	push_const:6 == 2004 <.define constantToPush Constant 8>
	push_const:12 == 2004 <@ldc Register b, Constant 8>
		ldc:1 == 2004 <.define writeReg Register b>
		ldc:2 == 2004 <.define const Constant 8>
		ldc:4 == 2004 <ldc Register a, Constant 0>
		ldc:5 == 2005 <ldc Register b, Constant 12>
		ldc:6 == 2006 <shl Register a, Register a, Register b>
		ldc:7 == 2007 <ldc Register b, Constant 8>
		ldc:8 == 2008 <or Register b, Register a, Register b>
	push_const:14 == 2009 <@push_reg Register b>
		push_reg:10 == 2009 <.define registerToPush Register b>
		push_reg:13 == 2009 <ldc Register a, Constant 0>
		push_reg:14 == 2010 <ldb Register a, Register a>
		push_reg:15 == 2011 <stb Register a, Register b>
		push_reg:19 == 2012 <ldc Register b, Constant 1>
		push_reg:20 == 2013 <add Register a, Register a, Register b>
		push_reg:21 == 2014 <ldc Register b, Constant 0>
		push_reg:22 == 2015 <stb Register b, Register a>
pong.pa2:345 == 2016 <@push_arg Constant 2>
	push_arg:3 == 2016 <.define slot Constant 2>
	push_arg:6 == 2016 <ldc Register a, Constant 2>
	push_arg:7 == 2017 <ldb Register a, Register a>
	push_arg:8 == 2018 <ldc Register b, Constant 2>
	push_arg:9 == 2019 <add Register a, Register a, Register b>
	push_arg:10 == 2020 <ldb Register a, Register b>
	push_arg:12 == 2021 <@push_reg Register b>
		push_reg:10 == 2021 <.define registerToPush Register b>
		push_reg:13 == 2021 <ldc Register a, Constant 0>
		push_reg:14 == 2022 <ldb Register a, Register a>
		push_reg:15 == 2023 <stb Register a, Register b>
		push_reg:19 == 2024 <ldc Register b, Constant 1>
		push_reg:20 == 2025 <add Register a, Register a, Register b>
		push_reg:21 == 2026 <ldc Register b, Constant 0>
		push_reg:22 == 2027 <stb Register b, Register a>
pong.pa2:346 == 2028 <@call Constant 2208, Constant 4>
	call:11 == 2028 <.define functionLabel Constant 2208>
	call:12 == 2028 <.define argcount Constant 4>
	call:15 == 2028 <@push_mem Constant 2>
		push_mem:6 == 2028 <.define addr Register b>
		push_mem:7 == 2028 <.define value Register b>
		push_mem:9 == 2028 <@ldc Register b, Constant 2>
			ldc:1 == 2028 <.define writeReg Register b>
			ldc:2 == 2028 <.define const Constant 2>
			ldc:4 == 2028 <ldc Register a, Constant 0>
			ldc:5 == 2029 <ldc Register b, Constant 12>
			ldc:6 == 2030 <shl Register a, Register a, Register b>
			ldc:7 == 2031 <ldc Register b, Constant 2>
			ldc:8 == 2032 <or Register b, Register a, Register b>
		push_mem:10 == 2033 <ldb Register b, Register b>
		push_mem:12 == 2034 <@push_reg Register b>
			push_reg:10 == 2034 <.define registerToPush Register b>
			push_reg:13 == 2034 <ldc Register a, Constant 0>
			push_reg:14 == 2035 <ldb Register a, Register a>
			push_reg:15 == 2036 <stb Register a, Register b>
			push_reg:19 == 2037 <ldc Register b, Constant 1>
			push_reg:20 == 2038 <add Register a, Register a, Register b>
			push_reg:21 == 2039 <ldc Register b, Constant 0>
			push_reg:22 == 2040 <stb Register b, Register a>
	call:16 == 2041 <@push_mem Constant 3>
		push_mem:6 == 2041 <.define addr Register b>
		push_mem:7 == 2041 <.define value Register b>
		push_mem:9 == 2041 <@ldc Register b, Constant 3>
			ldc:1 == 2041 <.define writeReg Register b>
			ldc:2 == 2041 <.define const Constant 3>
			ldc:4 == 2041 <ldc Register a, Constant 0>
			ldc:5 == 2042 <ldc Register b, Constant 12>
			ldc:6 == 2043 <shl Register a, Register a, Register b>
			ldc:7 == 2044 <ldc Register b, Constant 3>
			ldc:8 == 2045 <or Register b, Register a, Register b>
		push_mem:10 == 2046 <ldb Register b, Register b>
		push_mem:12 == 2047 <@push_reg Register b>
			push_reg:10 == 2047 <.define registerToPush Register b>
			push_reg:13 == 2047 <ldc Register a, Constant 0>
			push_reg:14 == 2048 <ldb Register a, Register a>
			push_reg:15 == 2049 <stb Register a, Register b>
			push_reg:19 == 2050 <ldc Register b, Constant 1>
			push_reg:20 == 2051 <add Register a, Register a, Register b>
			push_reg:21 == 2052 <ldc Register b, Constant 0>
			push_reg:22 == 2053 <stb Register b, Register a>
	call:19 == 2054 <@push_const Constant 2166>
		push_const:6 == 2054 <.define constantToPush Constant 2166>
		push_const:12 == 2054 <@ldc Register b, Constant 2166>
			ldc:1 == 2054 <.define writeReg Register b>
			ldc:2 == 2054 <.define const Constant 2166>
			ldc:4 == 2054 <ldc Register a, Constant 0>
			ldc:5 == 2055 <ldc Register b, Constant 12>
			ldc:6 == 2056 <shl Register a, Register a, Register b>
			ldc:7 == 2057 <ldc Register b, Constant 2166>
			ldc:8 == 2058 <or Register b, Register a, Register b>
		push_const:14 == 2059 <@push_reg Register b>
			push_reg:10 == 2059 <.define registerToPush Register b>
			push_reg:13 == 2059 <ldc Register a, Constant 0>
			push_reg:14 == 2060 <ldb Register a, Register a>
			push_reg:15 == 2061 <stb Register a, Register b>
			push_reg:19 == 2062 <ldc Register b, Constant 1>
			push_reg:20 == 2063 <add Register a, Register a, Register b>
			push_reg:21 == 2064 <ldc Register b, Constant 0>
			push_reg:22 == 2065 <stb Register b, Register a>
	call:24 == 2066 <@push_mem Constant 0>
		push_mem:6 == 2066 <.define addr Register b>
		push_mem:7 == 2066 <.define value Register b>
		push_mem:9 == 2066 <@ldc Register b, Constant 0>
			ldc:1 == 2066 <.define writeReg Register b>
			ldc:2 == 2066 <.define const Constant 0>
			ldc:4 == 2066 <ldc Register a, Constant 0>
			ldc:5 == 2067 <ldc Register b, Constant 12>
			ldc:6 == 2068 <shl Register a, Register a, Register b>
			ldc:7 == 2069 <ldc Register b, Constant 0>
			ldc:8 == 2070 <or Register b, Register a, Register b>
		push_mem:10 == 2071 <ldb Register b, Register b>
		push_mem:12 == 2072 <@push_reg Register b>
			push_reg:10 == 2072 <.define registerToPush Register b>
			push_reg:13 == 2072 <ldc Register a, Constant 0>
			push_reg:14 == 2073 <ldb Register a, Register a>
			push_reg:15 == 2074 <stb Register a, Register b>
			push_reg:19 == 2075 <ldc Register b, Constant 1>
			push_reg:20 == 2076 <add Register a, Register a, Register b>
			push_reg:21 == 2077 <ldc Register b, Constant 0>
			push_reg:22 == 2078 <stb Register b, Register a>
	call:26 == 2079 <@push_const Constant 3>
		push_const:6 == 2079 <.define constantToPush Constant 3>
		push_const:12 == 2079 <@ldc Register b, Constant 3>
			ldc:1 == 2079 <.define writeReg Register b>
			ldc:2 == 2079 <.define const Constant 3>
			ldc:4 == 2079 <ldc Register a, Constant 0>
			ldc:5 == 2080 <ldc Register b, Constant 12>
			ldc:6 == 2081 <shl Register a, Register a, Register b>
			ldc:7 == 2082 <ldc Register b, Constant 3>
			ldc:8 == 2083 <or Register b, Register a, Register b>
		push_const:14 == 2084 <@push_reg Register b>
			push_reg:10 == 2084 <.define registerToPush Register b>
			push_reg:13 == 2084 <ldc Register a, Constant 0>
			push_reg:14 == 2085 <ldb Register a, Register a>
			push_reg:15 == 2086 <stb Register a, Register b>
			push_reg:19 == 2087 <ldc Register b, Constant 1>
			push_reg:20 == 2088 <add Register a, Register a, Register b>
			push_reg:21 == 2089 <ldc Register b, Constant 0>
			push_reg:22 == 2090 <stb Register b, Register a>
	call:27 == 2091 <@push_const Constant 4>
		push_const:6 == 2091 <.define constantToPush Constant 4>
		push_const:12 == 2091 <@ldc Register b, Constant 4>
			ldc:1 == 2091 <.define writeReg Register b>
			ldc:2 == 2091 <.define const Constant 4>
			ldc:4 == 2091 <ldc Register a, Constant 0>
			ldc:5 == 2092 <ldc Register b, Constant 12>
			ldc:6 == 2093 <shl Register a, Register a, Register b>
			ldc:7 == 2094 <ldc Register b, Constant 4>
			ldc:8 == 2095 <or Register b, Register a, Register b>
		push_const:14 == 2096 <@push_reg Register b>
			push_reg:10 == 2096 <.define registerToPush Register b>
			push_reg:13 == 2096 <ldc Register a, Constant 0>
			push_reg:14 == 2097 <ldb Register a, Register a>
			push_reg:15 == 2098 <stb Register a, Register b>
			push_reg:19 == 2099 <ldc Register b, Constant 1>
			push_reg:20 == 2100 <add Register a, Register a, Register b>
			push_reg:21 == 2101 <ldc Register b, Constant 0>
			push_reg:22 == 2102 <stb Register b, Register a>
	call:28 == 2103 <@add >
		add:3 == 2103 <.define lhs Register c>
		add:4 == 2103 <.define rhs Register d>
		add:5 == 2103 <.define result Register d>
		add:7 == 2103 <@pop_reg Register c>
			pop_reg:10 == 2103 <.define registerToLoad Register c>
			pop_reg:13 == 2103 <ldc Register a, Constant 0>
			pop_reg:14 == 2104 <ldb Register a, Register a>
			pop_reg:15 == 2105 <ldc Register b, Constant 1>
			pop_reg:16 == 2106 <sub Register a, Register a, Register b>
			pop_reg:17 == 2107 <ldc Register b, Constant 0>
			pop_reg:18 == 2108 <stb Register b, Register a>
			pop_reg:22 == 2109 <ldb Register a, Register c>
		add:8 == 2110 <@pop_reg Register d>
			pop_reg:10 == 2110 <.define registerToLoad Register d>
			pop_reg:13 == 2110 <ldc Register a, Constant 0>
			pop_reg:14 == 2111 <ldb Register a, Register a>
			pop_reg:15 == 2112 <ldc Register b, Constant 1>
			pop_reg:16 == 2113 <sub Register a, Register a, Register b>
			pop_reg:17 == 2114 <ldc Register b, Constant 0>
			pop_reg:18 == 2115 <stb Register b, Register a>
			pop_reg:22 == 2116 <ldb Register a, Register d>
		add:9 == 2117 <add Register d, Register c, Register d>
		add:10 == 2118 <@push_reg Register d>
			push_reg:10 == 2118 <.define registerToPush Register d>
			push_reg:13 == 2118 <ldc Register a, Constant 0>
			push_reg:14 == 2119 <ldb Register a, Register a>
			push_reg:15 == 2120 <stb Register a, Register d>
			push_reg:19 == 2121 <ldc Register b, Constant 1>
			push_reg:20 == 2122 <add Register a, Register a, Register b>
			push_reg:21 == 2123 <ldc Register b, Constant 0>
			push_reg:22 == 2124 <stb Register b, Register a>
	call:29 == 2125 <@sub >
		sub:3 == 2125 <.define lhs Register c>
		sub:4 == 2125 <.define rhs Register d>
		sub:5 == 2125 <.define result Register d>
		sub:7 == 2125 <@pop_reg Register d>
			pop_reg:10 == 2125 <.define registerToLoad Register d>
			pop_reg:13 == 2125 <ldc Register a, Constant 0>
			pop_reg:14 == 2126 <ldb Register a, Register a>
			pop_reg:15 == 2127 <ldc Register b, Constant 1>
			pop_reg:16 == 2128 <sub Register a, Register a, Register b>
			pop_reg:17 == 2129 <ldc Register b, Constant 0>
			pop_reg:18 == 2130 <stb Register b, Register a>
			pop_reg:22 == 2131 <ldb Register a, Register d>
		sub:8 == 2132 <@pop_reg Register c>
			pop_reg:10 == 2132 <.define registerToLoad Register c>
			pop_reg:13 == 2132 <ldc Register a, Constant 0>
			pop_reg:14 == 2133 <ldb Register a, Register a>
			pop_reg:15 == 2134 <ldc Register b, Constant 1>
			pop_reg:16 == 2135 <sub Register a, Register a, Register b>
			pop_reg:17 == 2136 <ldc Register b, Constant 0>
			pop_reg:18 == 2137 <stb Register b, Register a>
			pop_reg:22 == 2138 <ldb Register a, Register c>
		sub:9 == 2139 <sub Register d, Register c, Register d>
		sub:10 == 2140 <@push_reg Register d>
			push_reg:10 == 2140 <.define registerToPush Register d>
			push_reg:13 == 2140 <ldc Register a, Constant 0>
			push_reg:14 == 2141 <ldb Register a, Register a>
			push_reg:15 == 2142 <stb Register a, Register d>
			push_reg:19 == 2143 <ldc Register b, Constant 1>
			push_reg:20 == 2144 <add Register a, Register a, Register b>
			push_reg:21 == 2145 <ldc Register b, Constant 0>
			push_reg:22 == 2146 <stb Register b, Register a>
	call:30 == 2147 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 2147 <.define val Register c>
		pop_mem_v:7 == 2147 <.define addr Constant 2>
		pop_mem_v:9 == 2147 <@pop_reg Register c>
			pop_reg:10 == 2147 <.define registerToLoad Register c>
			pop_reg:13 == 2147 <ldc Register a, Constant 0>
			pop_reg:14 == 2148 <ldb Register a, Register a>
			pop_reg:15 == 2149 <ldc Register b, Constant 1>
			pop_reg:16 == 2150 <sub Register a, Register a, Register b>
			pop_reg:17 == 2151 <ldc Register b, Constant 0>
			pop_reg:18 == 2152 <stb Register b, Register a>
			pop_reg:22 == 2153 <ldb Register a, Register c>
		pop_mem_v:11 == 2154 <@ldc Register b, Constant 2>
			ldc:1 == 2154 <.define writeReg Register b>
			ldc:2 == 2154 <.define const Constant 2>
			ldc:4 == 2154 <ldc Register a, Constant 0>
			ldc:5 == 2155 <ldc Register b, Constant 12>
			ldc:6 == 2156 <shl Register a, Register a, Register b>
			ldc:7 == 2157 <ldc Register b, Constant 2>
			ldc:8 == 2158 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2159 <stb Register b, Register c>
	call:32 == 2160 <@ldc Register a, Constant 2208>
		ldc:1 == 2160 <.define writeReg Register a>
		ldc:2 == 2160 <.define const Constant 2208>
		ldc:4 == 2160 <ldc Register a, Constant 0>
		ldc:5 == 2161 <ldc Register b, Constant 12>
		ldc:6 == 2162 <shl Register a, Register a, Register b>
		ldc:7 == 2163 <ldc Register b, Constant 2208>
		ldc:8 == 2164 <or Register a, Register a, Register b>
	call:33 == 2165 <jmp Register a>
	call:38 == 2166 <ldc Register d, Constant 2>
	call:41 == 2167 <ldb Register d, Register d>
	call:43 == 2168 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 2168 <.define val Register c>
		pop_mem_v:7 == 2168 <.define addr Constant 3>
		pop_mem_v:9 == 2168 <@pop_reg Register c>
			pop_reg:10 == 2168 <.define registerToLoad Register c>
			pop_reg:13 == 2168 <ldc Register a, Constant 0>
			pop_reg:14 == 2169 <ldb Register a, Register a>
			pop_reg:15 == 2170 <ldc Register b, Constant 1>
			pop_reg:16 == 2171 <sub Register a, Register a, Register b>
			pop_reg:17 == 2172 <ldc Register b, Constant 0>
			pop_reg:18 == 2173 <stb Register b, Register a>
			pop_reg:22 == 2174 <ldb Register a, Register c>
		pop_mem_v:11 == 2175 <@ldc Register b, Constant 3>
			ldc:1 == 2175 <.define writeReg Register b>
			ldc:2 == 2175 <.define const Constant 3>
			ldc:4 == 2175 <ldc Register a, Constant 0>
			ldc:5 == 2176 <ldc Register b, Constant 12>
			ldc:6 == 2177 <shl Register a, Register a, Register b>
			ldc:7 == 2178 <ldc Register b, Constant 3>
			ldc:8 == 2179 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2180 <stb Register b, Register c>
	call:44 == 2181 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 2181 <.define val Register c>
		pop_mem_v:7 == 2181 <.define addr Constant 2>
		pop_mem_v:9 == 2181 <@pop_reg Register c>
			pop_reg:10 == 2181 <.define registerToLoad Register c>
			pop_reg:13 == 2181 <ldc Register a, Constant 0>
			pop_reg:14 == 2182 <ldb Register a, Register a>
			pop_reg:15 == 2183 <ldc Register b, Constant 1>
			pop_reg:16 == 2184 <sub Register a, Register a, Register b>
			pop_reg:17 == 2185 <ldc Register b, Constant 0>
			pop_reg:18 == 2186 <stb Register b, Register a>
			pop_reg:22 == 2187 <ldb Register a, Register c>
		pop_mem_v:11 == 2188 <@ldc Register b, Constant 2>
			ldc:1 == 2188 <.define writeReg Register b>
			ldc:2 == 2188 <.define const Constant 2>
			ldc:4 == 2188 <ldc Register a, Constant 0>
			ldc:5 == 2189 <ldc Register b, Constant 12>
			ldc:6 == 2190 <shl Register a, Register a, Register b>
			ldc:7 == 2191 <ldc Register b, Constant 2>
			ldc:8 == 2192 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2193 <stb Register b, Register c>
	call:46 == 2194 <ldc Register c, Constant 0>
	call:47 == 2195 <ldb Register c, Register d>
pong.pa2:348 == 2196 <@return >
	return:2 == 2196 <ldc Register b, Constant 3>
	return:3 == 2197 <ldb Register b, Register b>
	return:4 == 2198 <ldc Register a, Constant 0>
	return:5 == 2199 <stb Register a, Register b>
	return:7 == 2200 <@pop_reg Register d>
		pop_reg:10 == 2200 <.define registerToLoad Register d>
		pop_reg:13 == 2200 <ldc Register a, Constant 0>
		pop_reg:14 == 2201 <ldb Register a, Register a>
		pop_reg:15 == 2202 <ldc Register b, Constant 1>
		pop_reg:16 == 2203 <sub Register a, Register a, Register b>
		pop_reg:17 == 2204 <ldc Register b, Constant 0>
		pop_reg:18 == 2205 <stb Register b, Register a>
		pop_reg:22 == 2206 <ldb Register a, Register d>
	return:9 == 2207 <jump Register d>
pong.pa2:355 == 2208 <@function Constant 2>
	function:19 == 2208 <.define loccount Constant 2>
	function:21 == 2208 <.define stackptrptr Register a>
	function:22 == 2208 <.define stackptr Register b>
	function:25 == 2208 <ldc Register a, Constant 0>
	function:26 == 2209 <ldb Register a, Register b>
	function:27 == 2210 <ldc Register c, Constant 3>
	function:28 == 2211 <stb Register c, Register b>
	function:31 == 2212 <ldc Register c, Constant 2>
	function:32 == 2213 <add Register b, Register b, Register c>
	function:33 == 2214 <stb Register a, Register b>
pong.pa2:359 == 2215 <@call_value Constant 3080, Constant 0>
	call_value:1 == 2215 <@call Constant 3080, Constant 0>
		call:11 == 2215 <.define functionLabel Constant 3080>
		call:12 == 2215 <.define argcount Constant 0>
		call:15 == 2215 <@push_mem Constant 2>
			push_mem:6 == 2215 <.define addr Register b>
			push_mem:7 == 2215 <.define value Register b>
			push_mem:9 == 2215 <@ldc Register b, Constant 2>
				ldc:1 == 2215 <.define writeReg Register b>
				ldc:2 == 2215 <.define const Constant 2>
				ldc:4 == 2215 <ldc Register a, Constant 0>
				ldc:5 == 2216 <ldc Register b, Constant 12>
				ldc:6 == 2217 <shl Register a, Register a, Register b>
				ldc:7 == 2218 <ldc Register b, Constant 2>
				ldc:8 == 2219 <or Register b, Register a, Register b>
			push_mem:10 == 2220 <ldb Register b, Register b>
			push_mem:12 == 2221 <@push_reg Register b>
				push_reg:10 == 2221 <.define registerToPush Register b>
				push_reg:13 == 2221 <ldc Register a, Constant 0>
				push_reg:14 == 2222 <ldb Register a, Register a>
				push_reg:15 == 2223 <stb Register a, Register b>
				push_reg:19 == 2224 <ldc Register b, Constant 1>
				push_reg:20 == 2225 <add Register a, Register a, Register b>
				push_reg:21 == 2226 <ldc Register b, Constant 0>
				push_reg:22 == 2227 <stb Register b, Register a>
		call:16 == 2228 <@push_mem Constant 3>
			push_mem:6 == 2228 <.define addr Register b>
			push_mem:7 == 2228 <.define value Register b>
			push_mem:9 == 2228 <@ldc Register b, Constant 3>
				ldc:1 == 2228 <.define writeReg Register b>
				ldc:2 == 2228 <.define const Constant 3>
				ldc:4 == 2228 <ldc Register a, Constant 0>
				ldc:5 == 2229 <ldc Register b, Constant 12>
				ldc:6 == 2230 <shl Register a, Register a, Register b>
				ldc:7 == 2231 <ldc Register b, Constant 3>
				ldc:8 == 2232 <or Register b, Register a, Register b>
			push_mem:10 == 2233 <ldb Register b, Register b>
			push_mem:12 == 2234 <@push_reg Register b>
				push_reg:10 == 2234 <.define registerToPush Register b>
				push_reg:13 == 2234 <ldc Register a, Constant 0>
				push_reg:14 == 2235 <ldb Register a, Register a>
				push_reg:15 == 2236 <stb Register a, Register b>
				push_reg:19 == 2237 <ldc Register b, Constant 1>
				push_reg:20 == 2238 <add Register a, Register a, Register b>
				push_reg:21 == 2239 <ldc Register b, Constant 0>
				push_reg:22 == 2240 <stb Register b, Register a>
		call:19 == 2241 <@push_const Constant 2353>
			push_const:6 == 2241 <.define constantToPush Constant 2353>
			push_const:12 == 2241 <@ldc Register b, Constant 2353>
				ldc:1 == 2241 <.define writeReg Register b>
				ldc:2 == 2241 <.define const Constant 2353>
				ldc:4 == 2241 <ldc Register a, Constant 0>
				ldc:5 == 2242 <ldc Register b, Constant 12>
				ldc:6 == 2243 <shl Register a, Register a, Register b>
				ldc:7 == 2244 <ldc Register b, Constant 2353>
				ldc:8 == 2245 <or Register b, Register a, Register b>
			push_const:14 == 2246 <@push_reg Register b>
				push_reg:10 == 2246 <.define registerToPush Register b>
				push_reg:13 == 2246 <ldc Register a, Constant 0>
				push_reg:14 == 2247 <ldb Register a, Register a>
				push_reg:15 == 2248 <stb Register a, Register b>
				push_reg:19 == 2249 <ldc Register b, Constant 1>
				push_reg:20 == 2250 <add Register a, Register a, Register b>
				push_reg:21 == 2251 <ldc Register b, Constant 0>
				push_reg:22 == 2252 <stb Register b, Register a>
		call:24 == 2253 <@push_mem Constant 0>
			push_mem:6 == 2253 <.define addr Register b>
			push_mem:7 == 2253 <.define value Register b>
			push_mem:9 == 2253 <@ldc Register b, Constant 0>
				ldc:1 == 2253 <.define writeReg Register b>
				ldc:2 == 2253 <.define const Constant 0>
				ldc:4 == 2253 <ldc Register a, Constant 0>
				ldc:5 == 2254 <ldc Register b, Constant 12>
				ldc:6 == 2255 <shl Register a, Register a, Register b>
				ldc:7 == 2256 <ldc Register b, Constant 0>
				ldc:8 == 2257 <or Register b, Register a, Register b>
			push_mem:10 == 2258 <ldb Register b, Register b>
			push_mem:12 == 2259 <@push_reg Register b>
				push_reg:10 == 2259 <.define registerToPush Register b>
				push_reg:13 == 2259 <ldc Register a, Constant 0>
				push_reg:14 == 2260 <ldb Register a, Register a>
				push_reg:15 == 2261 <stb Register a, Register b>
				push_reg:19 == 2262 <ldc Register b, Constant 1>
				push_reg:20 == 2263 <add Register a, Register a, Register b>
				push_reg:21 == 2264 <ldc Register b, Constant 0>
				push_reg:22 == 2265 <stb Register b, Register a>
		call:26 == 2266 <@push_const Constant 3>
			push_const:6 == 2266 <.define constantToPush Constant 3>
			push_const:12 == 2266 <@ldc Register b, Constant 3>
				ldc:1 == 2266 <.define writeReg Register b>
				ldc:2 == 2266 <.define const Constant 3>
				ldc:4 == 2266 <ldc Register a, Constant 0>
				ldc:5 == 2267 <ldc Register b, Constant 12>
				ldc:6 == 2268 <shl Register a, Register a, Register b>
				ldc:7 == 2269 <ldc Register b, Constant 3>
				ldc:8 == 2270 <or Register b, Register a, Register b>
			push_const:14 == 2271 <@push_reg Register b>
				push_reg:10 == 2271 <.define registerToPush Register b>
				push_reg:13 == 2271 <ldc Register a, Constant 0>
				push_reg:14 == 2272 <ldb Register a, Register a>
				push_reg:15 == 2273 <stb Register a, Register b>
				push_reg:19 == 2274 <ldc Register b, Constant 1>
				push_reg:20 == 2275 <add Register a, Register a, Register b>
				push_reg:21 == 2276 <ldc Register b, Constant 0>
				push_reg:22 == 2277 <stb Register b, Register a>
		call:27 == 2278 <@push_const Constant 0>
			push_const:6 == 2278 <.define constantToPush Constant 0>
			push_const:12 == 2278 <@ldc Register b, Constant 0>
				ldc:1 == 2278 <.define writeReg Register b>
				ldc:2 == 2278 <.define const Constant 0>
				ldc:4 == 2278 <ldc Register a, Constant 0>
				ldc:5 == 2279 <ldc Register b, Constant 12>
				ldc:6 == 2280 <shl Register a, Register a, Register b>
				ldc:7 == 2281 <ldc Register b, Constant 0>
				ldc:8 == 2282 <or Register b, Register a, Register b>
			push_const:14 == 2283 <@push_reg Register b>
				push_reg:10 == 2283 <.define registerToPush Register b>
				push_reg:13 == 2283 <ldc Register a, Constant 0>
				push_reg:14 == 2284 <ldb Register a, Register a>
				push_reg:15 == 2285 <stb Register a, Register b>
				push_reg:19 == 2286 <ldc Register b, Constant 1>
				push_reg:20 == 2287 <add Register a, Register a, Register b>
				push_reg:21 == 2288 <ldc Register b, Constant 0>
				push_reg:22 == 2289 <stb Register b, Register a>
		call:28 == 2290 <@add >
			add:3 == 2290 <.define lhs Register c>
			add:4 == 2290 <.define rhs Register d>
			add:5 == 2290 <.define result Register d>
			add:7 == 2290 <@pop_reg Register c>
				pop_reg:10 == 2290 <.define registerToLoad Register c>
				pop_reg:13 == 2290 <ldc Register a, Constant 0>
				pop_reg:14 == 2291 <ldb Register a, Register a>
				pop_reg:15 == 2292 <ldc Register b, Constant 1>
				pop_reg:16 == 2293 <sub Register a, Register a, Register b>
				pop_reg:17 == 2294 <ldc Register b, Constant 0>
				pop_reg:18 == 2295 <stb Register b, Register a>
				pop_reg:22 == 2296 <ldb Register a, Register c>
			add:8 == 2297 <@pop_reg Register d>
				pop_reg:10 == 2297 <.define registerToLoad Register d>
				pop_reg:13 == 2297 <ldc Register a, Constant 0>
				pop_reg:14 == 2298 <ldb Register a, Register a>
				pop_reg:15 == 2299 <ldc Register b, Constant 1>
				pop_reg:16 == 2300 <sub Register a, Register a, Register b>
				pop_reg:17 == 2301 <ldc Register b, Constant 0>
				pop_reg:18 == 2302 <stb Register b, Register a>
				pop_reg:22 == 2303 <ldb Register a, Register d>
			add:9 == 2304 <add Register d, Register c, Register d>
			add:10 == 2305 <@push_reg Register d>
				push_reg:10 == 2305 <.define registerToPush Register d>
				push_reg:13 == 2305 <ldc Register a, Constant 0>
				push_reg:14 == 2306 <ldb Register a, Register a>
				push_reg:15 == 2307 <stb Register a, Register d>
				push_reg:19 == 2308 <ldc Register b, Constant 1>
				push_reg:20 == 2309 <add Register a, Register a, Register b>
				push_reg:21 == 2310 <ldc Register b, Constant 0>
				push_reg:22 == 2311 <stb Register b, Register a>
		call:29 == 2312 <@sub >
			sub:3 == 2312 <.define lhs Register c>
			sub:4 == 2312 <.define rhs Register d>
			sub:5 == 2312 <.define result Register d>
			sub:7 == 2312 <@pop_reg Register d>
				pop_reg:10 == 2312 <.define registerToLoad Register d>
				pop_reg:13 == 2312 <ldc Register a, Constant 0>
				pop_reg:14 == 2313 <ldb Register a, Register a>
				pop_reg:15 == 2314 <ldc Register b, Constant 1>
				pop_reg:16 == 2315 <sub Register a, Register a, Register b>
				pop_reg:17 == 2316 <ldc Register b, Constant 0>
				pop_reg:18 == 2317 <stb Register b, Register a>
				pop_reg:22 == 2318 <ldb Register a, Register d>
			sub:8 == 2319 <@pop_reg Register c>
				pop_reg:10 == 2319 <.define registerToLoad Register c>
				pop_reg:13 == 2319 <ldc Register a, Constant 0>
				pop_reg:14 == 2320 <ldb Register a, Register a>
				pop_reg:15 == 2321 <ldc Register b, Constant 1>
				pop_reg:16 == 2322 <sub Register a, Register a, Register b>
				pop_reg:17 == 2323 <ldc Register b, Constant 0>
				pop_reg:18 == 2324 <stb Register b, Register a>
				pop_reg:22 == 2325 <ldb Register a, Register c>
			sub:9 == 2326 <sub Register d, Register c, Register d>
			sub:10 == 2327 <@push_reg Register d>
				push_reg:10 == 2327 <.define registerToPush Register d>
				push_reg:13 == 2327 <ldc Register a, Constant 0>
				push_reg:14 == 2328 <ldb Register a, Register a>
				push_reg:15 == 2329 <stb Register a, Register d>
				push_reg:19 == 2330 <ldc Register b, Constant 1>
				push_reg:20 == 2331 <add Register a, Register a, Register b>
				push_reg:21 == 2332 <ldc Register b, Constant 0>
				push_reg:22 == 2333 <stb Register b, Register a>
		call:30 == 2334 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 2334 <.define val Register c>
			pop_mem_v:7 == 2334 <.define addr Constant 2>
			pop_mem_v:9 == 2334 <@pop_reg Register c>
				pop_reg:10 == 2334 <.define registerToLoad Register c>
				pop_reg:13 == 2334 <ldc Register a, Constant 0>
				pop_reg:14 == 2335 <ldb Register a, Register a>
				pop_reg:15 == 2336 <ldc Register b, Constant 1>
				pop_reg:16 == 2337 <sub Register a, Register a, Register b>
				pop_reg:17 == 2338 <ldc Register b, Constant 0>
				pop_reg:18 == 2339 <stb Register b, Register a>
				pop_reg:22 == 2340 <ldb Register a, Register c>
			pop_mem_v:11 == 2341 <@ldc Register b, Constant 2>
				ldc:1 == 2341 <.define writeReg Register b>
				ldc:2 == 2341 <.define const Constant 2>
				ldc:4 == 2341 <ldc Register a, Constant 0>
				ldc:5 == 2342 <ldc Register b, Constant 12>
				ldc:6 == 2343 <shl Register a, Register a, Register b>
				ldc:7 == 2344 <ldc Register b, Constant 2>
				ldc:8 == 2345 <or Register b, Register a, Register b>
			pop_mem_v:12 == 2346 <stb Register b, Register c>
		call:32 == 2347 <@ldc Register a, Constant 3080>
			ldc:1 == 2347 <.define writeReg Register a>
			ldc:2 == 2347 <.define const Constant 3080>
			ldc:4 == 2347 <ldc Register a, Constant 0>
			ldc:5 == 2348 <ldc Register b, Constant 12>
			ldc:6 == 2349 <shl Register a, Register a, Register b>
			ldc:7 == 2350 <ldc Register b, Constant 3080>
			ldc:8 == 2351 <or Register a, Register a, Register b>
		call:33 == 2352 <jmp Register a>
		call:38 == 2353 <ldc Register d, Constant 2>
		call:41 == 2354 <ldb Register d, Register d>
		call:43 == 2355 <@pop_mem_v Constant 3>
			pop_mem_v:6 == 2355 <.define val Register c>
			pop_mem_v:7 == 2355 <.define addr Constant 3>
			pop_mem_v:9 == 2355 <@pop_reg Register c>
				pop_reg:10 == 2355 <.define registerToLoad Register c>
				pop_reg:13 == 2355 <ldc Register a, Constant 0>
				pop_reg:14 == 2356 <ldb Register a, Register a>
				pop_reg:15 == 2357 <ldc Register b, Constant 1>
				pop_reg:16 == 2358 <sub Register a, Register a, Register b>
				pop_reg:17 == 2359 <ldc Register b, Constant 0>
				pop_reg:18 == 2360 <stb Register b, Register a>
				pop_reg:22 == 2361 <ldb Register a, Register c>
			pop_mem_v:11 == 2362 <@ldc Register b, Constant 3>
				ldc:1 == 2362 <.define writeReg Register b>
				ldc:2 == 2362 <.define const Constant 3>
				ldc:4 == 2362 <ldc Register a, Constant 0>
				ldc:5 == 2363 <ldc Register b, Constant 12>
				ldc:6 == 2364 <shl Register a, Register a, Register b>
				ldc:7 == 2365 <ldc Register b, Constant 3>
				ldc:8 == 2366 <or Register b, Register a, Register b>
			pop_mem_v:12 == 2367 <stb Register b, Register c>
		call:44 == 2368 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 2368 <.define val Register c>
			pop_mem_v:7 == 2368 <.define addr Constant 2>
			pop_mem_v:9 == 2368 <@pop_reg Register c>
				pop_reg:10 == 2368 <.define registerToLoad Register c>
				pop_reg:13 == 2368 <ldc Register a, Constant 0>
				pop_reg:14 == 2369 <ldb Register a, Register a>
				pop_reg:15 == 2370 <ldc Register b, Constant 1>
				pop_reg:16 == 2371 <sub Register a, Register a, Register b>
				pop_reg:17 == 2372 <ldc Register b, Constant 0>
				pop_reg:18 == 2373 <stb Register b, Register a>
				pop_reg:22 == 2374 <ldb Register a, Register c>
			pop_mem_v:11 == 2375 <@ldc Register b, Constant 2>
				ldc:1 == 2375 <.define writeReg Register b>
				ldc:2 == 2375 <.define const Constant 2>
				ldc:4 == 2375 <ldc Register a, Constant 0>
				ldc:5 == 2376 <ldc Register b, Constant 12>
				ldc:6 == 2377 <shl Register a, Register a, Register b>
				ldc:7 == 2378 <ldc Register b, Constant 2>
				ldc:8 == 2379 <or Register b, Register a, Register b>
			pop_mem_v:12 == 2380 <stb Register b, Register c>
		call:46 == 2381 <ldc Register c, Constant 0>
		call:47 == 2382 <ldb Register c, Register d>
	call_value:3 == 2383 <@push_mem Constant 1>
		push_mem:6 == 2383 <.define addr Register b>
		push_mem:7 == 2383 <.define value Register b>
		push_mem:9 == 2383 <@ldc Register b, Constant 1>
			ldc:1 == 2383 <.define writeReg Register b>
			ldc:2 == 2383 <.define const Constant 1>
			ldc:4 == 2383 <ldc Register a, Constant 0>
			ldc:5 == 2384 <ldc Register b, Constant 12>
			ldc:6 == 2385 <shl Register a, Register a, Register b>
			ldc:7 == 2386 <ldc Register b, Constant 1>
			ldc:8 == 2387 <or Register b, Register a, Register b>
		push_mem:10 == 2388 <ldb Register b, Register b>
		push_mem:12 == 2389 <@push_reg Register b>
			push_reg:10 == 2389 <.define registerToPush Register b>
			push_reg:13 == 2389 <ldc Register a, Constant 0>
			push_reg:14 == 2390 <ldb Register a, Register a>
			push_reg:15 == 2391 <stb Register a, Register b>
			push_reg:19 == 2392 <ldc Register b, Constant 1>
			push_reg:20 == 2393 <add Register a, Register a, Register b>
			push_reg:21 == 2394 <ldc Register b, Constant 0>
			push_reg:22 == 2395 <stb Register b, Register a>
pong.pa2:361 == 2396 <@push_arg Constant 1>
	push_arg:3 == 2396 <.define slot Constant 1>
	push_arg:6 == 2396 <ldc Register a, Constant 2>
	push_arg:7 == 2397 <ldb Register a, Register a>
	push_arg:8 == 2398 <ldc Register b, Constant 1>
	push_arg:9 == 2399 <add Register a, Register a, Register b>
	push_arg:10 == 2400 <ldb Register a, Register b>
	push_arg:12 == 2401 <@push_reg Register b>
		push_reg:10 == 2401 <.define registerToPush Register b>
		push_reg:13 == 2401 <ldc Register a, Constant 0>
		push_reg:14 == 2402 <ldb Register a, Register a>
		push_reg:15 == 2403 <stb Register a, Register b>
		push_reg:19 == 2404 <ldc Register b, Constant 1>
		push_reg:20 == 2405 <add Register a, Register a, Register b>
		push_reg:21 == 2406 <ldc Register b, Constant 0>
		push_reg:22 == 2407 <stb Register b, Register a>
pong.pa2:362 == 2408 <@push_const Constant 64>
	push_const:6 == 2408 <.define constantToPush Constant 64>
	push_const:12 == 2408 <@ldc Register b, Constant 64>
		ldc:1 == 2408 <.define writeReg Register b>
		ldc:2 == 2408 <.define const Constant 64>
		ldc:4 == 2408 <ldc Register a, Constant 0>
		ldc:5 == 2409 <ldc Register b, Constant 12>
		ldc:6 == 2410 <shl Register a, Register a, Register b>
		ldc:7 == 2411 <ldc Register b, Constant 64>
		ldc:8 == 2412 <or Register b, Register a, Register b>
	push_const:14 == 2413 <@push_reg Register b>
		push_reg:10 == 2413 <.define registerToPush Register b>
		push_reg:13 == 2413 <ldc Register a, Constant 0>
		push_reg:14 == 2414 <ldb Register a, Register a>
		push_reg:15 == 2415 <stb Register a, Register b>
		push_reg:19 == 2416 <ldc Register b, Constant 1>
		push_reg:20 == 2417 <add Register a, Register a, Register b>
		push_reg:21 == 2418 <ldc Register b, Constant 0>
		push_reg:22 == 2419 <stb Register b, Register a>
pong.pa2:363 == 2420 <@mul >
	mul:3 == 2420 <.define lhs Register c>
	mul:4 == 2420 <.define rhs Register d>
	mul:5 == 2420 <.define result Register d>
	mul:7 == 2420 <@pop_reg Register c>
		pop_reg:10 == 2420 <.define registerToLoad Register c>
		pop_reg:13 == 2420 <ldc Register a, Constant 0>
		pop_reg:14 == 2421 <ldb Register a, Register a>
		pop_reg:15 == 2422 <ldc Register b, Constant 1>
		pop_reg:16 == 2423 <sub Register a, Register a, Register b>
		pop_reg:17 == 2424 <ldc Register b, Constant 0>
		pop_reg:18 == 2425 <stb Register b, Register a>
		pop_reg:22 == 2426 <ldb Register a, Register c>
	mul:8 == 2427 <@pop_reg Register d>
		pop_reg:10 == 2427 <.define registerToLoad Register d>
		pop_reg:13 == 2427 <ldc Register a, Constant 0>
		pop_reg:14 == 2428 <ldb Register a, Register a>
		pop_reg:15 == 2429 <ldc Register b, Constant 1>
		pop_reg:16 == 2430 <sub Register a, Register a, Register b>
		pop_reg:17 == 2431 <ldc Register b, Constant 0>
		pop_reg:18 == 2432 <stb Register b, Register a>
		pop_reg:22 == 2433 <ldb Register a, Register d>
	mul:9 == 2434 <mul Register d, Register c, Register d>
	mul:10 == 2435 <@push_reg Register d>
		push_reg:10 == 2435 <.define registerToPush Register d>
		push_reg:13 == 2435 <ldc Register a, Constant 0>
		push_reg:14 == 2436 <ldb Register a, Register a>
		push_reg:15 == 2437 <stb Register a, Register d>
		push_reg:19 == 2438 <ldc Register b, Constant 1>
		push_reg:20 == 2439 <add Register a, Register a, Register b>
		push_reg:21 == 2440 <ldc Register b, Constant 0>
		push_reg:22 == 2441 <stb Register b, Register a>
pong.pa2:364 == 2442 <@add >
	add:3 == 2442 <.define lhs Register c>
	add:4 == 2442 <.define rhs Register d>
	add:5 == 2442 <.define result Register d>
	add:7 == 2442 <@pop_reg Register c>
		pop_reg:10 == 2442 <.define registerToLoad Register c>
		pop_reg:13 == 2442 <ldc Register a, Constant 0>
		pop_reg:14 == 2443 <ldb Register a, Register a>
		pop_reg:15 == 2444 <ldc Register b, Constant 1>
		pop_reg:16 == 2445 <sub Register a, Register a, Register b>
		pop_reg:17 == 2446 <ldc Register b, Constant 0>
		pop_reg:18 == 2447 <stb Register b, Register a>
		pop_reg:22 == 2448 <ldb Register a, Register c>
	add:8 == 2449 <@pop_reg Register d>
		pop_reg:10 == 2449 <.define registerToLoad Register d>
		pop_reg:13 == 2449 <ldc Register a, Constant 0>
		pop_reg:14 == 2450 <ldb Register a, Register a>
		pop_reg:15 == 2451 <ldc Register b, Constant 1>
		pop_reg:16 == 2452 <sub Register a, Register a, Register b>
		pop_reg:17 == 2453 <ldc Register b, Constant 0>
		pop_reg:18 == 2454 <stb Register b, Register a>
		pop_reg:22 == 2455 <ldb Register a, Register d>
	add:9 == 2456 <add Register d, Register c, Register d>
	add:10 == 2457 <@push_reg Register d>
		push_reg:10 == 2457 <.define registerToPush Register d>
		push_reg:13 == 2457 <ldc Register a, Constant 0>
		push_reg:14 == 2458 <ldb Register a, Register a>
		push_reg:15 == 2459 <stb Register a, Register d>
		push_reg:19 == 2460 <ldc Register b, Constant 1>
		push_reg:20 == 2461 <add Register a, Register a, Register b>
		push_reg:21 == 2462 <ldc Register b, Constant 0>
		push_reg:22 == 2463 <stb Register b, Register a>
pong.pa2:365 == 2464 <@push_arg Constant 0>
	push_arg:3 == 2464 <.define slot Constant 0>
	push_arg:6 == 2464 <ldc Register a, Constant 2>
	push_arg:7 == 2465 <ldb Register a, Register a>
	push_arg:8 == 2466 <ldc Register b, Constant 0>
	push_arg:9 == 2467 <add Register a, Register a, Register b>
	push_arg:10 == 2468 <ldb Register a, Register b>
	push_arg:12 == 2469 <@push_reg Register b>
		push_reg:10 == 2469 <.define registerToPush Register b>
		push_reg:13 == 2469 <ldc Register a, Constant 0>
		push_reg:14 == 2470 <ldb Register a, Register a>
		push_reg:15 == 2471 <stb Register a, Register b>
		push_reg:19 == 2472 <ldc Register b, Constant 1>
		push_reg:20 == 2473 <add Register a, Register a, Register b>
		push_reg:21 == 2474 <ldc Register b, Constant 0>
		push_reg:22 == 2475 <stb Register b, Register a>
pong.pa2:366 == 2476 <@add >
	add:3 == 2476 <.define lhs Register c>
	add:4 == 2476 <.define rhs Register d>
	add:5 == 2476 <.define result Register d>
	add:7 == 2476 <@pop_reg Register c>
		pop_reg:10 == 2476 <.define registerToLoad Register c>
		pop_reg:13 == 2476 <ldc Register a, Constant 0>
		pop_reg:14 == 2477 <ldb Register a, Register a>
		pop_reg:15 == 2478 <ldc Register b, Constant 1>
		pop_reg:16 == 2479 <sub Register a, Register a, Register b>
		pop_reg:17 == 2480 <ldc Register b, Constant 0>
		pop_reg:18 == 2481 <stb Register b, Register a>
		pop_reg:22 == 2482 <ldb Register a, Register c>
	add:8 == 2483 <@pop_reg Register d>
		pop_reg:10 == 2483 <.define registerToLoad Register d>
		pop_reg:13 == 2483 <ldc Register a, Constant 0>
		pop_reg:14 == 2484 <ldb Register a, Register a>
		pop_reg:15 == 2485 <ldc Register b, Constant 1>
		pop_reg:16 == 2486 <sub Register a, Register a, Register b>
		pop_reg:17 == 2487 <ldc Register b, Constant 0>
		pop_reg:18 == 2488 <stb Register b, Register a>
		pop_reg:22 == 2489 <ldb Register a, Register d>
	add:9 == 2490 <add Register d, Register c, Register d>
	add:10 == 2491 <@push_reg Register d>
		push_reg:10 == 2491 <.define registerToPush Register d>
		push_reg:13 == 2491 <ldc Register a, Constant 0>
		push_reg:14 == 2492 <ldb Register a, Register a>
		push_reg:15 == 2493 <stb Register a, Register d>
		push_reg:19 == 2494 <ldc Register b, Constant 1>
		push_reg:20 == 2495 <add Register a, Register a, Register b>
		push_reg:21 == 2496 <ldc Register b, Constant 0>
		push_reg:22 == 2497 <stb Register b, Register a>
pong.pa2:367 == 2498 <@pop_local Constant 0>
	pop_local:6 == 2498 <.define slot Constant 0>
	pop_local:8 == 2498 <@pop_reg Register a>
		pop_reg:10 == 2498 <.define registerToLoad Register a>
		pop_reg:13 == 2498 <ldc Register a, Constant 0>
		pop_reg:14 == 2499 <ldb Register a, Register a>
		pop_reg:15 == 2500 <ldc Register b, Constant 1>
		pop_reg:16 == 2501 <sub Register a, Register a, Register b>
		pop_reg:17 == 2502 <ldc Register b, Constant 0>
		pop_reg:18 == 2503 <stb Register b, Register a>
		pop_reg:22 == 2504 <ldb Register a, Register a>
	pop_local:13 == 2505 <ldc Register c, Constant 3>
	pop_local:14 == 2506 <ldb Register c, Register c>
	pop_local:17 == 2507 <ldc Register b, Constant 0>
	pop_local:18 == 2508 <add Register b, Register b, Register c>
	pop_local:21 == 2509 <stb Register b, Register a>
pong.pa2:370 == 2510 <@push_local Constant 0>
	push_local:3 == 2510 <.define slot Constant 0>
	push_local:6 == 2510 <ldc Register a, Constant 3>
	push_local:7 == 2511 <ldb Register a, Register a>
	push_local:8 == 2512 <ldc Register b, Constant 0>
	push_local:9 == 2513 <add Register a, Register a, Register b>
	push_local:10 == 2514 <ldb Register a, Register b>
	push_local:12 == 2515 <@push_reg Register b>
		push_reg:10 == 2515 <.define registerToPush Register b>
		push_reg:13 == 2515 <ldc Register a, Constant 0>
		push_reg:14 == 2516 <ldb Register a, Register a>
		push_reg:15 == 2517 <stb Register a, Register b>
		push_reg:19 == 2518 <ldc Register b, Constant 1>
		push_reg:20 == 2519 <add Register a, Register a, Register b>
		push_reg:21 == 2520 <ldc Register b, Constant 0>
		push_reg:22 == 2521 <stb Register b, Register a>
pong.pa2:371 == 2522 <@push_arg Constant 2>
	push_arg:3 == 2522 <.define slot Constant 2>
	push_arg:6 == 2522 <ldc Register a, Constant 2>
	push_arg:7 == 2523 <ldb Register a, Register a>
	push_arg:8 == 2524 <ldc Register b, Constant 2>
	push_arg:9 == 2525 <add Register a, Register a, Register b>
	push_arg:10 == 2526 <ldb Register a, Register b>
	push_arg:12 == 2527 <@push_reg Register b>
		push_reg:10 == 2527 <.define registerToPush Register b>
		push_reg:13 == 2527 <ldc Register a, Constant 0>
		push_reg:14 == 2528 <ldb Register a, Register a>
		push_reg:15 == 2529 <stb Register a, Register b>
		push_reg:19 == 2530 <ldc Register b, Constant 1>
		push_reg:20 == 2531 <add Register a, Register a, Register b>
		push_reg:21 == 2532 <ldc Register b, Constant 0>
		push_reg:22 == 2533 <stb Register b, Register a>
pong.pa2:372 == 2534 <@push_const Constant 64>
	push_const:6 == 2534 <.define constantToPush Constant 64>
	push_const:12 == 2534 <@ldc Register b, Constant 64>
		ldc:1 == 2534 <.define writeReg Register b>
		ldc:2 == 2534 <.define const Constant 64>
		ldc:4 == 2534 <ldc Register a, Constant 0>
		ldc:5 == 2535 <ldc Register b, Constant 12>
		ldc:6 == 2536 <shl Register a, Register a, Register b>
		ldc:7 == 2537 <ldc Register b, Constant 64>
		ldc:8 == 2538 <or Register b, Register a, Register b>
	push_const:14 == 2539 <@push_reg Register b>
		push_reg:10 == 2539 <.define registerToPush Register b>
		push_reg:13 == 2539 <ldc Register a, Constant 0>
		push_reg:14 == 2540 <ldb Register a, Register a>
		push_reg:15 == 2541 <stb Register a, Register b>
		push_reg:19 == 2542 <ldc Register b, Constant 1>
		push_reg:20 == 2543 <add Register a, Register a, Register b>
		push_reg:21 == 2544 <ldc Register b, Constant 0>
		push_reg:22 == 2545 <stb Register b, Register a>
pong.pa2:373 == 2546 <@mul >
	mul:3 == 2546 <.define lhs Register c>
	mul:4 == 2546 <.define rhs Register d>
	mul:5 == 2546 <.define result Register d>
	mul:7 == 2546 <@pop_reg Register c>
		pop_reg:10 == 2546 <.define registerToLoad Register c>
		pop_reg:13 == 2546 <ldc Register a, Constant 0>
		pop_reg:14 == 2547 <ldb Register a, Register a>
		pop_reg:15 == 2548 <ldc Register b, Constant 1>
		pop_reg:16 == 2549 <sub Register a, Register a, Register b>
		pop_reg:17 == 2550 <ldc Register b, Constant 0>
		pop_reg:18 == 2551 <stb Register b, Register a>
		pop_reg:22 == 2552 <ldb Register a, Register c>
	mul:8 == 2553 <@pop_reg Register d>
		pop_reg:10 == 2553 <.define registerToLoad Register d>
		pop_reg:13 == 2553 <ldc Register a, Constant 0>
		pop_reg:14 == 2554 <ldb Register a, Register a>
		pop_reg:15 == 2555 <ldc Register b, Constant 1>
		pop_reg:16 == 2556 <sub Register a, Register a, Register b>
		pop_reg:17 == 2557 <ldc Register b, Constant 0>
		pop_reg:18 == 2558 <stb Register b, Register a>
		pop_reg:22 == 2559 <ldb Register a, Register d>
	mul:9 == 2560 <mul Register d, Register c, Register d>
	mul:10 == 2561 <@push_reg Register d>
		push_reg:10 == 2561 <.define registerToPush Register d>
		push_reg:13 == 2561 <ldc Register a, Constant 0>
		push_reg:14 == 2562 <ldb Register a, Register a>
		push_reg:15 == 2563 <stb Register a, Register d>
		push_reg:19 == 2564 <ldc Register b, Constant 1>
		push_reg:20 == 2565 <add Register a, Register a, Register b>
		push_reg:21 == 2566 <ldc Register b, Constant 0>
		push_reg:22 == 2567 <stb Register b, Register a>
pong.pa2:374 == 2568 <@add >
	add:3 == 2568 <.define lhs Register c>
	add:4 == 2568 <.define rhs Register d>
	add:5 == 2568 <.define result Register d>
	add:7 == 2568 <@pop_reg Register c>
		pop_reg:10 == 2568 <.define registerToLoad Register c>
		pop_reg:13 == 2568 <ldc Register a, Constant 0>
		pop_reg:14 == 2569 <ldb Register a, Register a>
		pop_reg:15 == 2570 <ldc Register b, Constant 1>
		pop_reg:16 == 2571 <sub Register a, Register a, Register b>
		pop_reg:17 == 2572 <ldc Register b, Constant 0>
		pop_reg:18 == 2573 <stb Register b, Register a>
		pop_reg:22 == 2574 <ldb Register a, Register c>
	add:8 == 2575 <@pop_reg Register d>
		pop_reg:10 == 2575 <.define registerToLoad Register d>
		pop_reg:13 == 2575 <ldc Register a, Constant 0>
		pop_reg:14 == 2576 <ldb Register a, Register a>
		pop_reg:15 == 2577 <ldc Register b, Constant 1>
		pop_reg:16 == 2578 <sub Register a, Register a, Register b>
		pop_reg:17 == 2579 <ldc Register b, Constant 0>
		pop_reg:18 == 2580 <stb Register b, Register a>
		pop_reg:22 == 2581 <ldb Register a, Register d>
	add:9 == 2582 <add Register d, Register c, Register d>
	add:10 == 2583 <@push_reg Register d>
		push_reg:10 == 2583 <.define registerToPush Register d>
		push_reg:13 == 2583 <ldc Register a, Constant 0>
		push_reg:14 == 2584 <ldb Register a, Register a>
		push_reg:15 == 2585 <stb Register a, Register d>
		push_reg:19 == 2586 <ldc Register b, Constant 1>
		push_reg:20 == 2587 <add Register a, Register a, Register b>
		push_reg:21 == 2588 <ldc Register b, Constant 0>
		push_reg:22 == 2589 <stb Register b, Register a>
pong.pa2:375 == 2590 <@pop_local Constant 1>
	pop_local:6 == 2590 <.define slot Constant 1>
	pop_local:8 == 2590 <@pop_reg Register a>
		pop_reg:10 == 2590 <.define registerToLoad Register a>
		pop_reg:13 == 2590 <ldc Register a, Constant 0>
		pop_reg:14 == 2591 <ldb Register a, Register a>
		pop_reg:15 == 2592 <ldc Register b, Constant 1>
		pop_reg:16 == 2593 <sub Register a, Register a, Register b>
		pop_reg:17 == 2594 <ldc Register b, Constant 0>
		pop_reg:18 == 2595 <stb Register b, Register a>
		pop_reg:22 == 2596 <ldb Register a, Register a>
	pop_local:13 == 2597 <ldc Register c, Constant 3>
	pop_local:14 == 2598 <ldb Register c, Register c>
	pop_local:17 == 2599 <ldc Register b, Constant 1>
	pop_local:18 == 2600 <add Register b, Register b, Register c>
	pop_local:21 == 2601 <stb Register b, Register a>
pong.pa2:387 == 2602 <@push_arg Constant 3>
	push_arg:3 == 2602 <.define slot Constant 3>
	push_arg:6 == 2602 <ldc Register a, Constant 2>
	push_arg:7 == 2603 <ldb Register a, Register a>
	push_arg:8 == 2604 <ldc Register b, Constant 3>
	push_arg:9 == 2605 <add Register a, Register a, Register b>
	push_arg:10 == 2606 <ldb Register a, Register b>
	push_arg:12 == 2607 <@push_reg Register b>
		push_reg:10 == 2607 <.define registerToPush Register b>
		push_reg:13 == 2607 <ldc Register a, Constant 0>
		push_reg:14 == 2608 <ldb Register a, Register a>
		push_reg:15 == 2609 <stb Register a, Register b>
		push_reg:19 == 2610 <ldc Register b, Constant 1>
		push_reg:20 == 2611 <add Register a, Register a, Register b>
		push_reg:21 == 2612 <ldc Register b, Constant 0>
		push_reg:22 == 2613 <stb Register b, Register a>
pong.pa2:389 == 2614 <@push_local Constant 0>
	push_local:3 == 2614 <.define slot Constant 0>
	push_local:6 == 2614 <ldc Register a, Constant 3>
	push_local:7 == 2615 <ldb Register a, Register a>
	push_local:8 == 2616 <ldc Register b, Constant 0>
	push_local:9 == 2617 <add Register a, Register a, Register b>
	push_local:10 == 2618 <ldb Register a, Register b>
	push_local:12 == 2619 <@push_reg Register b>
		push_reg:10 == 2619 <.define registerToPush Register b>
		push_reg:13 == 2619 <ldc Register a, Constant 0>
		push_reg:14 == 2620 <ldb Register a, Register a>
		push_reg:15 == 2621 <stb Register a, Register b>
		push_reg:19 == 2622 <ldc Register b, Constant 1>
		push_reg:20 == 2623 <add Register a, Register a, Register b>
		push_reg:21 == 2624 <ldc Register b, Constant 0>
		push_reg:22 == 2625 <stb Register b, Register a>
pong.pa2:390 == 2626 <@pop_mem_av >
	pop_mem_av:4 == 2626 <.define addr Register c>
	pop_mem_av:5 == 2626 <.define val Register a>
	pop_mem_av:7 == 2626 <@pop_reg Register c>
		pop_reg:10 == 2626 <.define registerToLoad Register c>
		pop_reg:13 == 2626 <ldc Register a, Constant 0>
		pop_reg:14 == 2627 <ldb Register a, Register a>
		pop_reg:15 == 2628 <ldc Register b, Constant 1>
		pop_reg:16 == 2629 <sub Register a, Register a, Register b>
		pop_reg:17 == 2630 <ldc Register b, Constant 0>
		pop_reg:18 == 2631 <stb Register b, Register a>
		pop_reg:22 == 2632 <ldb Register a, Register c>
	pop_mem_av:8 == 2633 <@pop_reg Register a>
		pop_reg:10 == 2633 <.define registerToLoad Register a>
		pop_reg:13 == 2633 <ldc Register a, Constant 0>
		pop_reg:14 == 2634 <ldb Register a, Register a>
		pop_reg:15 == 2635 <ldc Register b, Constant 1>
		pop_reg:16 == 2636 <sub Register a, Register a, Register b>
		pop_reg:17 == 2637 <ldc Register b, Constant 0>
		pop_reg:18 == 2638 <stb Register b, Register a>
		pop_reg:22 == 2639 <ldb Register a, Register a>
	pop_mem_av:10 == 2640 <stb Register c, Register a>
pong.pa2:392 == 2641 <@push_local Constant 0>
	push_local:3 == 2641 <.define slot Constant 0>
	push_local:6 == 2641 <ldc Register a, Constant 3>
	push_local:7 == 2642 <ldb Register a, Register a>
	push_local:8 == 2643 <ldc Register b, Constant 0>
	push_local:9 == 2644 <add Register a, Register a, Register b>
	push_local:10 == 2645 <ldb Register a, Register b>
	push_local:12 == 2646 <@push_reg Register b>
		push_reg:10 == 2646 <.define registerToPush Register b>
		push_reg:13 == 2646 <ldc Register a, Constant 0>
		push_reg:14 == 2647 <ldb Register a, Register a>
		push_reg:15 == 2648 <stb Register a, Register b>
		push_reg:19 == 2649 <ldc Register b, Constant 1>
		push_reg:20 == 2650 <add Register a, Register a, Register b>
		push_reg:21 == 2651 <ldc Register b, Constant 0>
		push_reg:22 == 2652 <stb Register b, Register a>
pong.pa2:393 == 2653 <@push_const Constant 64>
	push_const:6 == 2653 <.define constantToPush Constant 64>
	push_const:12 == 2653 <@ldc Register b, Constant 64>
		ldc:1 == 2653 <.define writeReg Register b>
		ldc:2 == 2653 <.define const Constant 64>
		ldc:4 == 2653 <ldc Register a, Constant 0>
		ldc:5 == 2654 <ldc Register b, Constant 12>
		ldc:6 == 2655 <shl Register a, Register a, Register b>
		ldc:7 == 2656 <ldc Register b, Constant 64>
		ldc:8 == 2657 <or Register b, Register a, Register b>
	push_const:14 == 2658 <@push_reg Register b>
		push_reg:10 == 2658 <.define registerToPush Register b>
		push_reg:13 == 2658 <ldc Register a, Constant 0>
		push_reg:14 == 2659 <ldb Register a, Register a>
		push_reg:15 == 2660 <stb Register a, Register b>
		push_reg:19 == 2661 <ldc Register b, Constant 1>
		push_reg:20 == 2662 <add Register a, Register a, Register b>
		push_reg:21 == 2663 <ldc Register b, Constant 0>
		push_reg:22 == 2664 <stb Register b, Register a>
pong.pa2:394 == 2665 <@add >
	add:3 == 2665 <.define lhs Register c>
	add:4 == 2665 <.define rhs Register d>
	add:5 == 2665 <.define result Register d>
	add:7 == 2665 <@pop_reg Register c>
		pop_reg:10 == 2665 <.define registerToLoad Register c>
		pop_reg:13 == 2665 <ldc Register a, Constant 0>
		pop_reg:14 == 2666 <ldb Register a, Register a>
		pop_reg:15 == 2667 <ldc Register b, Constant 1>
		pop_reg:16 == 2668 <sub Register a, Register a, Register b>
		pop_reg:17 == 2669 <ldc Register b, Constant 0>
		pop_reg:18 == 2670 <stb Register b, Register a>
		pop_reg:22 == 2671 <ldb Register a, Register c>
	add:8 == 2672 <@pop_reg Register d>
		pop_reg:10 == 2672 <.define registerToLoad Register d>
		pop_reg:13 == 2672 <ldc Register a, Constant 0>
		pop_reg:14 == 2673 <ldb Register a, Register a>
		pop_reg:15 == 2674 <ldc Register b, Constant 1>
		pop_reg:16 == 2675 <sub Register a, Register a, Register b>
		pop_reg:17 == 2676 <ldc Register b, Constant 0>
		pop_reg:18 == 2677 <stb Register b, Register a>
		pop_reg:22 == 2678 <ldb Register a, Register d>
	add:9 == 2679 <add Register d, Register c, Register d>
	add:10 == 2680 <@push_reg Register d>
		push_reg:10 == 2680 <.define registerToPush Register d>
		push_reg:13 == 2680 <ldc Register a, Constant 0>
		push_reg:14 == 2681 <ldb Register a, Register a>
		push_reg:15 == 2682 <stb Register a, Register d>
		push_reg:19 == 2683 <ldc Register b, Constant 1>
		push_reg:20 == 2684 <add Register a, Register a, Register b>
		push_reg:21 == 2685 <ldc Register b, Constant 0>
		push_reg:22 == 2686 <stb Register b, Register a>
pong.pa2:395 == 2687 <@pop_local Constant 0>
	pop_local:6 == 2687 <.define slot Constant 0>
	pop_local:8 == 2687 <@pop_reg Register a>
		pop_reg:10 == 2687 <.define registerToLoad Register a>
		pop_reg:13 == 2687 <ldc Register a, Constant 0>
		pop_reg:14 == 2688 <ldb Register a, Register a>
		pop_reg:15 == 2689 <ldc Register b, Constant 1>
		pop_reg:16 == 2690 <sub Register a, Register a, Register b>
		pop_reg:17 == 2691 <ldc Register b, Constant 0>
		pop_reg:18 == 2692 <stb Register b, Register a>
		pop_reg:22 == 2693 <ldb Register a, Register a>
	pop_local:13 == 2694 <ldc Register c, Constant 3>
	pop_local:14 == 2695 <ldb Register c, Register c>
	pop_local:17 == 2696 <ldc Register b, Constant 0>
	pop_local:18 == 2697 <add Register b, Register b, Register c>
	pop_local:21 == 2698 <stb Register b, Register a>
pong.pa2:397 == 2699 <@push_local Constant 0>
	push_local:3 == 2699 <.define slot Constant 0>
	push_local:6 == 2699 <ldc Register a, Constant 3>
	push_local:7 == 2700 <ldb Register a, Register a>
	push_local:8 == 2701 <ldc Register b, Constant 0>
	push_local:9 == 2702 <add Register a, Register a, Register b>
	push_local:10 == 2703 <ldb Register a, Register b>
	push_local:12 == 2704 <@push_reg Register b>
		push_reg:10 == 2704 <.define registerToPush Register b>
		push_reg:13 == 2704 <ldc Register a, Constant 0>
		push_reg:14 == 2705 <ldb Register a, Register a>
		push_reg:15 == 2706 <stb Register a, Register b>
		push_reg:19 == 2707 <ldc Register b, Constant 1>
		push_reg:20 == 2708 <add Register a, Register a, Register b>
		push_reg:21 == 2709 <ldc Register b, Constant 0>
		push_reg:22 == 2710 <stb Register b, Register a>
pong.pa2:398 == 2711 <@push_local Constant 1>
	push_local:3 == 2711 <.define slot Constant 1>
	push_local:6 == 2711 <ldc Register a, Constant 3>
	push_local:7 == 2712 <ldb Register a, Register a>
	push_local:8 == 2713 <ldc Register b, Constant 1>
	push_local:9 == 2714 <add Register a, Register a, Register b>
	push_local:10 == 2715 <ldb Register a, Register b>
	push_local:12 == 2716 <@push_reg Register b>
		push_reg:10 == 2716 <.define registerToPush Register b>
		push_reg:13 == 2716 <ldc Register a, Constant 0>
		push_reg:14 == 2717 <ldb Register a, Register a>
		push_reg:15 == 2718 <stb Register a, Register b>
		push_reg:19 == 2719 <ldc Register b, Constant 1>
		push_reg:20 == 2720 <add Register a, Register a, Register b>
		push_reg:21 == 2721 <ldc Register b, Constant 0>
		push_reg:22 == 2722 <stb Register b, Register a>
pong.pa2:400 == 2723 <@pop_reg Register d>
	pop_reg:10 == 2723 <.define registerToLoad Register d>
	pop_reg:13 == 2723 <ldc Register a, Constant 0>
	pop_reg:14 == 2724 <ldb Register a, Register a>
	pop_reg:15 == 2725 <ldc Register b, Constant 1>
	pop_reg:16 == 2726 <sub Register a, Register a, Register b>
	pop_reg:17 == 2727 <ldc Register b, Constant 0>
	pop_reg:18 == 2728 <stb Register b, Register a>
	pop_reg:22 == 2729 <ldb Register a, Register d>
pong.pa2:401 == 2730 <@pop_reg Register c>
	pop_reg:10 == 2730 <.define registerToLoad Register c>
	pop_reg:13 == 2730 <ldc Register a, Constant 0>
	pop_reg:14 == 2731 <ldb Register a, Register a>
	pop_reg:15 == 2732 <ldc Register b, Constant 1>
	pop_reg:16 == 2733 <sub Register a, Register a, Register b>
	pop_reg:17 == 2734 <ldc Register b, Constant 0>
	pop_reg:18 == 2735 <stb Register b, Register a>
	pop_reg:22 == 2736 <ldb Register a, Register c>
pong.pa2:402 == 2737 <ldc Register b, Constant 2602>
pong.pa2:403 == 2738 <jlt Register b, Register c, Register d>
pong.pa2:405 == 2739 <@return >
	return:2 == 2739 <ldc Register b, Constant 3>
	return:3 == 2740 <ldb Register b, Register b>
	return:4 == 2741 <ldc Register a, Constant 0>
	return:5 == 2742 <stb Register a, Register b>
	return:7 == 2743 <@pop_reg Register d>
		pop_reg:10 == 2743 <.define registerToLoad Register d>
		pop_reg:13 == 2743 <ldc Register a, Constant 0>
		pop_reg:14 == 2744 <ldb Register a, Register a>
		pop_reg:15 == 2745 <ldc Register b, Constant 1>
		pop_reg:16 == 2746 <sub Register a, Register a, Register b>
		pop_reg:17 == 2747 <ldc Register b, Constant 0>
		pop_reg:18 == 2748 <stb Register b, Register a>
		pop_reg:22 == 2749 <ldb Register a, Register d>
	return:9 == 2750 <jump Register d>
pong.pa2:412 == 2751 <@function Constant 0>
	function:19 == 2751 <.define loccount Constant 0>
	function:21 == 2751 <.define stackptrptr Register a>
	function:22 == 2751 <.define stackptr Register b>
	function:25 == 2751 <ldc Register a, Constant 0>
	function:26 == 2752 <ldb Register a, Register b>
	function:27 == 2753 <ldc Register c, Constant 3>
	function:28 == 2754 <stb Register c, Register b>
	function:31 == 2755 <ldc Register c, Constant 0>
	function:32 == 2756 <add Register b, Register b, Register c>
	function:33 == 2757 <stb Register a, Register b>
pong.pa2:416 == 2758 <@call_value Constant 3080, Constant 0>
	call_value:1 == 2758 <@call Constant 3080, Constant 0>
		call:11 == 2758 <.define functionLabel Constant 3080>
		call:12 == 2758 <.define argcount Constant 0>
		call:15 == 2758 <@push_mem Constant 2>
			push_mem:6 == 2758 <.define addr Register b>
			push_mem:7 == 2758 <.define value Register b>
			push_mem:9 == 2758 <@ldc Register b, Constant 2>
				ldc:1 == 2758 <.define writeReg Register b>
				ldc:2 == 2758 <.define const Constant 2>
				ldc:4 == 2758 <ldc Register a, Constant 0>
				ldc:5 == 2759 <ldc Register b, Constant 12>
				ldc:6 == 2760 <shl Register a, Register a, Register b>
				ldc:7 == 2761 <ldc Register b, Constant 2>
				ldc:8 == 2762 <or Register b, Register a, Register b>
			push_mem:10 == 2763 <ldb Register b, Register b>
			push_mem:12 == 2764 <@push_reg Register b>
				push_reg:10 == 2764 <.define registerToPush Register b>
				push_reg:13 == 2764 <ldc Register a, Constant 0>
				push_reg:14 == 2765 <ldb Register a, Register a>
				push_reg:15 == 2766 <stb Register a, Register b>
				push_reg:19 == 2767 <ldc Register b, Constant 1>
				push_reg:20 == 2768 <add Register a, Register a, Register b>
				push_reg:21 == 2769 <ldc Register b, Constant 0>
				push_reg:22 == 2770 <stb Register b, Register a>
		call:16 == 2771 <@push_mem Constant 3>
			push_mem:6 == 2771 <.define addr Register b>
			push_mem:7 == 2771 <.define value Register b>
			push_mem:9 == 2771 <@ldc Register b, Constant 3>
				ldc:1 == 2771 <.define writeReg Register b>
				ldc:2 == 2771 <.define const Constant 3>
				ldc:4 == 2771 <ldc Register a, Constant 0>
				ldc:5 == 2772 <ldc Register b, Constant 12>
				ldc:6 == 2773 <shl Register a, Register a, Register b>
				ldc:7 == 2774 <ldc Register b, Constant 3>
				ldc:8 == 2775 <or Register b, Register a, Register b>
			push_mem:10 == 2776 <ldb Register b, Register b>
			push_mem:12 == 2777 <@push_reg Register b>
				push_reg:10 == 2777 <.define registerToPush Register b>
				push_reg:13 == 2777 <ldc Register a, Constant 0>
				push_reg:14 == 2778 <ldb Register a, Register a>
				push_reg:15 == 2779 <stb Register a, Register b>
				push_reg:19 == 2780 <ldc Register b, Constant 1>
				push_reg:20 == 2781 <add Register a, Register a, Register b>
				push_reg:21 == 2782 <ldc Register b, Constant 0>
				push_reg:22 == 2783 <stb Register b, Register a>
		call:19 == 2784 <@push_const Constant 2896>
			push_const:6 == 2784 <.define constantToPush Constant 2896>
			push_const:12 == 2784 <@ldc Register b, Constant 2896>
				ldc:1 == 2784 <.define writeReg Register b>
				ldc:2 == 2784 <.define const Constant 2896>
				ldc:4 == 2784 <ldc Register a, Constant 0>
				ldc:5 == 2785 <ldc Register b, Constant 12>
				ldc:6 == 2786 <shl Register a, Register a, Register b>
				ldc:7 == 2787 <ldc Register b, Constant 2896>
				ldc:8 == 2788 <or Register b, Register a, Register b>
			push_const:14 == 2789 <@push_reg Register b>
				push_reg:10 == 2789 <.define registerToPush Register b>
				push_reg:13 == 2789 <ldc Register a, Constant 0>
				push_reg:14 == 2790 <ldb Register a, Register a>
				push_reg:15 == 2791 <stb Register a, Register b>
				push_reg:19 == 2792 <ldc Register b, Constant 1>
				push_reg:20 == 2793 <add Register a, Register a, Register b>
				push_reg:21 == 2794 <ldc Register b, Constant 0>
				push_reg:22 == 2795 <stb Register b, Register a>
		call:24 == 2796 <@push_mem Constant 0>
			push_mem:6 == 2796 <.define addr Register b>
			push_mem:7 == 2796 <.define value Register b>
			push_mem:9 == 2796 <@ldc Register b, Constant 0>
				ldc:1 == 2796 <.define writeReg Register b>
				ldc:2 == 2796 <.define const Constant 0>
				ldc:4 == 2796 <ldc Register a, Constant 0>
				ldc:5 == 2797 <ldc Register b, Constant 12>
				ldc:6 == 2798 <shl Register a, Register a, Register b>
				ldc:7 == 2799 <ldc Register b, Constant 0>
				ldc:8 == 2800 <or Register b, Register a, Register b>
			push_mem:10 == 2801 <ldb Register b, Register b>
			push_mem:12 == 2802 <@push_reg Register b>
				push_reg:10 == 2802 <.define registerToPush Register b>
				push_reg:13 == 2802 <ldc Register a, Constant 0>
				push_reg:14 == 2803 <ldb Register a, Register a>
				push_reg:15 == 2804 <stb Register a, Register b>
				push_reg:19 == 2805 <ldc Register b, Constant 1>
				push_reg:20 == 2806 <add Register a, Register a, Register b>
				push_reg:21 == 2807 <ldc Register b, Constant 0>
				push_reg:22 == 2808 <stb Register b, Register a>
		call:26 == 2809 <@push_const Constant 3>
			push_const:6 == 2809 <.define constantToPush Constant 3>
			push_const:12 == 2809 <@ldc Register b, Constant 3>
				ldc:1 == 2809 <.define writeReg Register b>
				ldc:2 == 2809 <.define const Constant 3>
				ldc:4 == 2809 <ldc Register a, Constant 0>
				ldc:5 == 2810 <ldc Register b, Constant 12>
				ldc:6 == 2811 <shl Register a, Register a, Register b>
				ldc:7 == 2812 <ldc Register b, Constant 3>
				ldc:8 == 2813 <or Register b, Register a, Register b>
			push_const:14 == 2814 <@push_reg Register b>
				push_reg:10 == 2814 <.define registerToPush Register b>
				push_reg:13 == 2814 <ldc Register a, Constant 0>
				push_reg:14 == 2815 <ldb Register a, Register a>
				push_reg:15 == 2816 <stb Register a, Register b>
				push_reg:19 == 2817 <ldc Register b, Constant 1>
				push_reg:20 == 2818 <add Register a, Register a, Register b>
				push_reg:21 == 2819 <ldc Register b, Constant 0>
				push_reg:22 == 2820 <stb Register b, Register a>
		call:27 == 2821 <@push_const Constant 0>
			push_const:6 == 2821 <.define constantToPush Constant 0>
			push_const:12 == 2821 <@ldc Register b, Constant 0>
				ldc:1 == 2821 <.define writeReg Register b>
				ldc:2 == 2821 <.define const Constant 0>
				ldc:4 == 2821 <ldc Register a, Constant 0>
				ldc:5 == 2822 <ldc Register b, Constant 12>
				ldc:6 == 2823 <shl Register a, Register a, Register b>
				ldc:7 == 2824 <ldc Register b, Constant 0>
				ldc:8 == 2825 <or Register b, Register a, Register b>
			push_const:14 == 2826 <@push_reg Register b>
				push_reg:10 == 2826 <.define registerToPush Register b>
				push_reg:13 == 2826 <ldc Register a, Constant 0>
				push_reg:14 == 2827 <ldb Register a, Register a>
				push_reg:15 == 2828 <stb Register a, Register b>
				push_reg:19 == 2829 <ldc Register b, Constant 1>
				push_reg:20 == 2830 <add Register a, Register a, Register b>
				push_reg:21 == 2831 <ldc Register b, Constant 0>
				push_reg:22 == 2832 <stb Register b, Register a>
		call:28 == 2833 <@add >
			add:3 == 2833 <.define lhs Register c>
			add:4 == 2833 <.define rhs Register d>
			add:5 == 2833 <.define result Register d>
			add:7 == 2833 <@pop_reg Register c>
				pop_reg:10 == 2833 <.define registerToLoad Register c>
				pop_reg:13 == 2833 <ldc Register a, Constant 0>
				pop_reg:14 == 2834 <ldb Register a, Register a>
				pop_reg:15 == 2835 <ldc Register b, Constant 1>
				pop_reg:16 == 2836 <sub Register a, Register a, Register b>
				pop_reg:17 == 2837 <ldc Register b, Constant 0>
				pop_reg:18 == 2838 <stb Register b, Register a>
				pop_reg:22 == 2839 <ldb Register a, Register c>
			add:8 == 2840 <@pop_reg Register d>
				pop_reg:10 == 2840 <.define registerToLoad Register d>
				pop_reg:13 == 2840 <ldc Register a, Constant 0>
				pop_reg:14 == 2841 <ldb Register a, Register a>
				pop_reg:15 == 2842 <ldc Register b, Constant 1>
				pop_reg:16 == 2843 <sub Register a, Register a, Register b>
				pop_reg:17 == 2844 <ldc Register b, Constant 0>
				pop_reg:18 == 2845 <stb Register b, Register a>
				pop_reg:22 == 2846 <ldb Register a, Register d>
			add:9 == 2847 <add Register d, Register c, Register d>
			add:10 == 2848 <@push_reg Register d>
				push_reg:10 == 2848 <.define registerToPush Register d>
				push_reg:13 == 2848 <ldc Register a, Constant 0>
				push_reg:14 == 2849 <ldb Register a, Register a>
				push_reg:15 == 2850 <stb Register a, Register d>
				push_reg:19 == 2851 <ldc Register b, Constant 1>
				push_reg:20 == 2852 <add Register a, Register a, Register b>
				push_reg:21 == 2853 <ldc Register b, Constant 0>
				push_reg:22 == 2854 <stb Register b, Register a>
		call:29 == 2855 <@sub >
			sub:3 == 2855 <.define lhs Register c>
			sub:4 == 2855 <.define rhs Register d>
			sub:5 == 2855 <.define result Register d>
			sub:7 == 2855 <@pop_reg Register d>
				pop_reg:10 == 2855 <.define registerToLoad Register d>
				pop_reg:13 == 2855 <ldc Register a, Constant 0>
				pop_reg:14 == 2856 <ldb Register a, Register a>
				pop_reg:15 == 2857 <ldc Register b, Constant 1>
				pop_reg:16 == 2858 <sub Register a, Register a, Register b>
				pop_reg:17 == 2859 <ldc Register b, Constant 0>
				pop_reg:18 == 2860 <stb Register b, Register a>
				pop_reg:22 == 2861 <ldb Register a, Register d>
			sub:8 == 2862 <@pop_reg Register c>
				pop_reg:10 == 2862 <.define registerToLoad Register c>
				pop_reg:13 == 2862 <ldc Register a, Constant 0>
				pop_reg:14 == 2863 <ldb Register a, Register a>
				pop_reg:15 == 2864 <ldc Register b, Constant 1>
				pop_reg:16 == 2865 <sub Register a, Register a, Register b>
				pop_reg:17 == 2866 <ldc Register b, Constant 0>
				pop_reg:18 == 2867 <stb Register b, Register a>
				pop_reg:22 == 2868 <ldb Register a, Register c>
			sub:9 == 2869 <sub Register d, Register c, Register d>
			sub:10 == 2870 <@push_reg Register d>
				push_reg:10 == 2870 <.define registerToPush Register d>
				push_reg:13 == 2870 <ldc Register a, Constant 0>
				push_reg:14 == 2871 <ldb Register a, Register a>
				push_reg:15 == 2872 <stb Register a, Register d>
				push_reg:19 == 2873 <ldc Register b, Constant 1>
				push_reg:20 == 2874 <add Register a, Register a, Register b>
				push_reg:21 == 2875 <ldc Register b, Constant 0>
				push_reg:22 == 2876 <stb Register b, Register a>
		call:30 == 2877 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 2877 <.define val Register c>
			pop_mem_v:7 == 2877 <.define addr Constant 2>
			pop_mem_v:9 == 2877 <@pop_reg Register c>
				pop_reg:10 == 2877 <.define registerToLoad Register c>
				pop_reg:13 == 2877 <ldc Register a, Constant 0>
				pop_reg:14 == 2878 <ldb Register a, Register a>
				pop_reg:15 == 2879 <ldc Register b, Constant 1>
				pop_reg:16 == 2880 <sub Register a, Register a, Register b>
				pop_reg:17 == 2881 <ldc Register b, Constant 0>
				pop_reg:18 == 2882 <stb Register b, Register a>
				pop_reg:22 == 2883 <ldb Register a, Register c>
			pop_mem_v:11 == 2884 <@ldc Register b, Constant 2>
				ldc:1 == 2884 <.define writeReg Register b>
				ldc:2 == 2884 <.define const Constant 2>
				ldc:4 == 2884 <ldc Register a, Constant 0>
				ldc:5 == 2885 <ldc Register b, Constant 12>
				ldc:6 == 2886 <shl Register a, Register a, Register b>
				ldc:7 == 2887 <ldc Register b, Constant 2>
				ldc:8 == 2888 <or Register b, Register a, Register b>
			pop_mem_v:12 == 2889 <stb Register b, Register c>
		call:32 == 2890 <@ldc Register a, Constant 3080>
			ldc:1 == 2890 <.define writeReg Register a>
			ldc:2 == 2890 <.define const Constant 3080>
			ldc:4 == 2890 <ldc Register a, Constant 0>
			ldc:5 == 2891 <ldc Register b, Constant 12>
			ldc:6 == 2892 <shl Register a, Register a, Register b>
			ldc:7 == 2893 <ldc Register b, Constant 3080>
			ldc:8 == 2894 <or Register a, Register a, Register b>
		call:33 == 2895 <jmp Register a>
		call:38 == 2896 <ldc Register d, Constant 2>
		call:41 == 2897 <ldb Register d, Register d>
		call:43 == 2898 <@pop_mem_v Constant 3>
			pop_mem_v:6 == 2898 <.define val Register c>
			pop_mem_v:7 == 2898 <.define addr Constant 3>
			pop_mem_v:9 == 2898 <@pop_reg Register c>
				pop_reg:10 == 2898 <.define registerToLoad Register c>
				pop_reg:13 == 2898 <ldc Register a, Constant 0>
				pop_reg:14 == 2899 <ldb Register a, Register a>
				pop_reg:15 == 2900 <ldc Register b, Constant 1>
				pop_reg:16 == 2901 <sub Register a, Register a, Register b>
				pop_reg:17 == 2902 <ldc Register b, Constant 0>
				pop_reg:18 == 2903 <stb Register b, Register a>
				pop_reg:22 == 2904 <ldb Register a, Register c>
			pop_mem_v:11 == 2905 <@ldc Register b, Constant 3>
				ldc:1 == 2905 <.define writeReg Register b>
				ldc:2 == 2905 <.define const Constant 3>
				ldc:4 == 2905 <ldc Register a, Constant 0>
				ldc:5 == 2906 <ldc Register b, Constant 12>
				ldc:6 == 2907 <shl Register a, Register a, Register b>
				ldc:7 == 2908 <ldc Register b, Constant 3>
				ldc:8 == 2909 <or Register b, Register a, Register b>
			pop_mem_v:12 == 2910 <stb Register b, Register c>
		call:44 == 2911 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 2911 <.define val Register c>
			pop_mem_v:7 == 2911 <.define addr Constant 2>
			pop_mem_v:9 == 2911 <@pop_reg Register c>
				pop_reg:10 == 2911 <.define registerToLoad Register c>
				pop_reg:13 == 2911 <ldc Register a, Constant 0>
				pop_reg:14 == 2912 <ldb Register a, Register a>
				pop_reg:15 == 2913 <ldc Register b, Constant 1>
				pop_reg:16 == 2914 <sub Register a, Register a, Register b>
				pop_reg:17 == 2915 <ldc Register b, Constant 0>
				pop_reg:18 == 2916 <stb Register b, Register a>
				pop_reg:22 == 2917 <ldb Register a, Register c>
			pop_mem_v:11 == 2918 <@ldc Register b, Constant 2>
				ldc:1 == 2918 <.define writeReg Register b>
				ldc:2 == 2918 <.define const Constant 2>
				ldc:4 == 2918 <ldc Register a, Constant 0>
				ldc:5 == 2919 <ldc Register b, Constant 12>
				ldc:6 == 2920 <shl Register a, Register a, Register b>
				ldc:7 == 2921 <ldc Register b, Constant 2>
				ldc:8 == 2922 <or Register b, Register a, Register b>
			pop_mem_v:12 == 2923 <stb Register b, Register c>
		call:46 == 2924 <ldc Register c, Constant 0>
		call:47 == 2925 <ldb Register c, Register d>
	call_value:3 == 2926 <@push_mem Constant 1>
		push_mem:6 == 2926 <.define addr Register b>
		push_mem:7 == 2926 <.define value Register b>
		push_mem:9 == 2926 <@ldc Register b, Constant 1>
			ldc:1 == 2926 <.define writeReg Register b>
			ldc:2 == 2926 <.define const Constant 1>
			ldc:4 == 2926 <ldc Register a, Constant 0>
			ldc:5 == 2927 <ldc Register b, Constant 12>
			ldc:6 == 2928 <shl Register a, Register a, Register b>
			ldc:7 == 2929 <ldc Register b, Constant 1>
			ldc:8 == 2930 <or Register b, Register a, Register b>
		push_mem:10 == 2931 <ldb Register b, Register b>
		push_mem:12 == 2932 <@push_reg Register b>
			push_reg:10 == 2932 <.define registerToPush Register b>
			push_reg:13 == 2932 <ldc Register a, Constant 0>
			push_reg:14 == 2933 <ldb Register a, Register a>
			push_reg:15 == 2934 <stb Register a, Register b>
			push_reg:19 == 2935 <ldc Register b, Constant 1>
			push_reg:20 == 2936 <add Register a, Register a, Register b>
			push_reg:21 == 2937 <ldc Register b, Constant 0>
			push_reg:22 == 2938 <stb Register b, Register a>
pong.pa2:417 == 2939 <@push_const Constant 64>
	push_const:6 == 2939 <.define constantToPush Constant 64>
	push_const:12 == 2939 <@ldc Register b, Constant 64>
		ldc:1 == 2939 <.define writeReg Register b>
		ldc:2 == 2939 <.define const Constant 64>
		ldc:4 == 2939 <ldc Register a, Constant 0>
		ldc:5 == 2940 <ldc Register b, Constant 12>
		ldc:6 == 2941 <shl Register a, Register a, Register b>
		ldc:7 == 2942 <ldc Register b, Constant 64>
		ldc:8 == 2943 <or Register b, Register a, Register b>
	push_const:14 == 2944 <@push_reg Register b>
		push_reg:10 == 2944 <.define registerToPush Register b>
		push_reg:13 == 2944 <ldc Register a, Constant 0>
		push_reg:14 == 2945 <ldb Register a, Register a>
		push_reg:15 == 2946 <stb Register a, Register b>
		push_reg:19 == 2947 <ldc Register b, Constant 1>
		push_reg:20 == 2948 <add Register a, Register a, Register b>
		push_reg:21 == 2949 <ldc Register b, Constant 0>
		push_reg:22 == 2950 <stb Register b, Register a>
pong.pa2:418 == 2951 <@push_arg Constant 1>
	push_arg:3 == 2951 <.define slot Constant 1>
	push_arg:6 == 2951 <ldc Register a, Constant 2>
	push_arg:7 == 2952 <ldb Register a, Register a>
	push_arg:8 == 2953 <ldc Register b, Constant 1>
	push_arg:9 == 2954 <add Register a, Register a, Register b>
	push_arg:10 == 2955 <ldb Register a, Register b>
	push_arg:12 == 2956 <@push_reg Register b>
		push_reg:10 == 2956 <.define registerToPush Register b>
		push_reg:13 == 2956 <ldc Register a, Constant 0>
		push_reg:14 == 2957 <ldb Register a, Register a>
		push_reg:15 == 2958 <stb Register a, Register b>
		push_reg:19 == 2959 <ldc Register b, Constant 1>
		push_reg:20 == 2960 <add Register a, Register a, Register b>
		push_reg:21 == 2961 <ldc Register b, Constant 0>
		push_reg:22 == 2962 <stb Register b, Register a>
pong.pa2:419 == 2963 <@mul >
	mul:3 == 2963 <.define lhs Register c>
	mul:4 == 2963 <.define rhs Register d>
	mul:5 == 2963 <.define result Register d>
	mul:7 == 2963 <@pop_reg Register c>
		pop_reg:10 == 2963 <.define registerToLoad Register c>
		pop_reg:13 == 2963 <ldc Register a, Constant 0>
		pop_reg:14 == 2964 <ldb Register a, Register a>
		pop_reg:15 == 2965 <ldc Register b, Constant 1>
		pop_reg:16 == 2966 <sub Register a, Register a, Register b>
		pop_reg:17 == 2967 <ldc Register b, Constant 0>
		pop_reg:18 == 2968 <stb Register b, Register a>
		pop_reg:22 == 2969 <ldb Register a, Register c>
	mul:8 == 2970 <@pop_reg Register d>
		pop_reg:10 == 2970 <.define registerToLoad Register d>
		pop_reg:13 == 2970 <ldc Register a, Constant 0>
		pop_reg:14 == 2971 <ldb Register a, Register a>
		pop_reg:15 == 2972 <ldc Register b, Constant 1>
		pop_reg:16 == 2973 <sub Register a, Register a, Register b>
		pop_reg:17 == 2974 <ldc Register b, Constant 0>
		pop_reg:18 == 2975 <stb Register b, Register a>
		pop_reg:22 == 2976 <ldb Register a, Register d>
	mul:9 == 2977 <mul Register d, Register c, Register d>
	mul:10 == 2978 <@push_reg Register d>
		push_reg:10 == 2978 <.define registerToPush Register d>
		push_reg:13 == 2978 <ldc Register a, Constant 0>
		push_reg:14 == 2979 <ldb Register a, Register a>
		push_reg:15 == 2980 <stb Register a, Register d>
		push_reg:19 == 2981 <ldc Register b, Constant 1>
		push_reg:20 == 2982 <add Register a, Register a, Register b>
		push_reg:21 == 2983 <ldc Register b, Constant 0>
		push_reg:22 == 2984 <stb Register b, Register a>
pong.pa2:420 == 2985 <@add >
	add:3 == 2985 <.define lhs Register c>
	add:4 == 2985 <.define rhs Register d>
	add:5 == 2985 <.define result Register d>
	add:7 == 2985 <@pop_reg Register c>
		pop_reg:10 == 2985 <.define registerToLoad Register c>
		pop_reg:13 == 2985 <ldc Register a, Constant 0>
		pop_reg:14 == 2986 <ldb Register a, Register a>
		pop_reg:15 == 2987 <ldc Register b, Constant 1>
		pop_reg:16 == 2988 <sub Register a, Register a, Register b>
		pop_reg:17 == 2989 <ldc Register b, Constant 0>
		pop_reg:18 == 2990 <stb Register b, Register a>
		pop_reg:22 == 2991 <ldb Register a, Register c>
	add:8 == 2992 <@pop_reg Register d>
		pop_reg:10 == 2992 <.define registerToLoad Register d>
		pop_reg:13 == 2992 <ldc Register a, Constant 0>
		pop_reg:14 == 2993 <ldb Register a, Register a>
		pop_reg:15 == 2994 <ldc Register b, Constant 1>
		pop_reg:16 == 2995 <sub Register a, Register a, Register b>
		pop_reg:17 == 2996 <ldc Register b, Constant 0>
		pop_reg:18 == 2997 <stb Register b, Register a>
		pop_reg:22 == 2998 <ldb Register a, Register d>
	add:9 == 2999 <add Register d, Register c, Register d>
	add:10 == 3000 <@push_reg Register d>
		push_reg:10 == 3000 <.define registerToPush Register d>
		push_reg:13 == 3000 <ldc Register a, Constant 0>
		push_reg:14 == 3001 <ldb Register a, Register a>
		push_reg:15 == 3002 <stb Register a, Register d>
		push_reg:19 == 3003 <ldc Register b, Constant 1>
		push_reg:20 == 3004 <add Register a, Register a, Register b>
		push_reg:21 == 3005 <ldc Register b, Constant 0>
		push_reg:22 == 3006 <stb Register b, Register a>
pong.pa2:421 == 3007 <@push_arg Constant 0>
	push_arg:3 == 3007 <.define slot Constant 0>
	push_arg:6 == 3007 <ldc Register a, Constant 2>
	push_arg:7 == 3008 <ldb Register a, Register a>
	push_arg:8 == 3009 <ldc Register b, Constant 0>
	push_arg:9 == 3010 <add Register a, Register a, Register b>
	push_arg:10 == 3011 <ldb Register a, Register b>
	push_arg:12 == 3012 <@push_reg Register b>
		push_reg:10 == 3012 <.define registerToPush Register b>
		push_reg:13 == 3012 <ldc Register a, Constant 0>
		push_reg:14 == 3013 <ldb Register a, Register a>
		push_reg:15 == 3014 <stb Register a, Register b>
		push_reg:19 == 3015 <ldc Register b, Constant 1>
		push_reg:20 == 3016 <add Register a, Register a, Register b>
		push_reg:21 == 3017 <ldc Register b, Constant 0>
		push_reg:22 == 3018 <stb Register b, Register a>
pong.pa2:422 == 3019 <@add >
	add:3 == 3019 <.define lhs Register c>
	add:4 == 3019 <.define rhs Register d>
	add:5 == 3019 <.define result Register d>
	add:7 == 3019 <@pop_reg Register c>
		pop_reg:10 == 3019 <.define registerToLoad Register c>
		pop_reg:13 == 3019 <ldc Register a, Constant 0>
		pop_reg:14 == 3020 <ldb Register a, Register a>
		pop_reg:15 == 3021 <ldc Register b, Constant 1>
		pop_reg:16 == 3022 <sub Register a, Register a, Register b>
		pop_reg:17 == 3023 <ldc Register b, Constant 0>
		pop_reg:18 == 3024 <stb Register b, Register a>
		pop_reg:22 == 3025 <ldb Register a, Register c>
	add:8 == 3026 <@pop_reg Register d>
		pop_reg:10 == 3026 <.define registerToLoad Register d>
		pop_reg:13 == 3026 <ldc Register a, Constant 0>
		pop_reg:14 == 3027 <ldb Register a, Register a>
		pop_reg:15 == 3028 <ldc Register b, Constant 1>
		pop_reg:16 == 3029 <sub Register a, Register a, Register b>
		pop_reg:17 == 3030 <ldc Register b, Constant 0>
		pop_reg:18 == 3031 <stb Register b, Register a>
		pop_reg:22 == 3032 <ldb Register a, Register d>
	add:9 == 3033 <add Register d, Register c, Register d>
	add:10 == 3034 <@push_reg Register d>
		push_reg:10 == 3034 <.define registerToPush Register d>
		push_reg:13 == 3034 <ldc Register a, Constant 0>
		push_reg:14 == 3035 <ldb Register a, Register a>
		push_reg:15 == 3036 <stb Register a, Register d>
		push_reg:19 == 3037 <ldc Register b, Constant 1>
		push_reg:20 == 3038 <add Register a, Register a, Register b>
		push_reg:21 == 3039 <ldc Register b, Constant 0>
		push_reg:22 == 3040 <stb Register b, Register a>
pong.pa2:425 == 3041 <@push_arg Constant 2>
	push_arg:3 == 3041 <.define slot Constant 2>
	push_arg:6 == 3041 <ldc Register a, Constant 2>
	push_arg:7 == 3042 <ldb Register a, Register a>
	push_arg:8 == 3043 <ldc Register b, Constant 2>
	push_arg:9 == 3044 <add Register a, Register a, Register b>
	push_arg:10 == 3045 <ldb Register a, Register b>
	push_arg:12 == 3046 <@push_reg Register b>
		push_reg:10 == 3046 <.define registerToPush Register b>
		push_reg:13 == 3046 <ldc Register a, Constant 0>
		push_reg:14 == 3047 <ldb Register a, Register a>
		push_reg:15 == 3048 <stb Register a, Register b>
		push_reg:19 == 3049 <ldc Register b, Constant 1>
		push_reg:20 == 3050 <add Register a, Register a, Register b>
		push_reg:21 == 3051 <ldc Register b, Constant 0>
		push_reg:22 == 3052 <stb Register b, Register a>
pong.pa2:426 == 3053 <@pop_mem_va >
	pop_mem_va:4 == 3053 <.define val Register c>
	pop_mem_va:5 == 3053 <.define addr Register a>
	pop_mem_va:7 == 3053 <@pop_reg Register c>
		pop_reg:10 == 3053 <.define registerToLoad Register c>
		pop_reg:13 == 3053 <ldc Register a, Constant 0>
		pop_reg:14 == 3054 <ldb Register a, Register a>
		pop_reg:15 == 3055 <ldc Register b, Constant 1>
		pop_reg:16 == 3056 <sub Register a, Register a, Register b>
		pop_reg:17 == 3057 <ldc Register b, Constant 0>
		pop_reg:18 == 3058 <stb Register b, Register a>
		pop_reg:22 == 3059 <ldb Register a, Register c>
	pop_mem_va:8 == 3060 <@pop_reg Register a>
		pop_reg:10 == 3060 <.define registerToLoad Register a>
		pop_reg:13 == 3060 <ldc Register a, Constant 0>
		pop_reg:14 == 3061 <ldb Register a, Register a>
		pop_reg:15 == 3062 <ldc Register b, Constant 1>
		pop_reg:16 == 3063 <sub Register a, Register a, Register b>
		pop_reg:17 == 3064 <ldc Register b, Constant 0>
		pop_reg:18 == 3065 <stb Register b, Register a>
		pop_reg:22 == 3066 <ldb Register a, Register a>
	pop_mem_va:10 == 3067 <stb Register a, Register c>
pong.pa2:428 == 3068 <@return >
	return:2 == 3068 <ldc Register b, Constant 3>
	return:3 == 3069 <ldb Register b, Register b>
	return:4 == 3070 <ldc Register a, Constant 0>
	return:5 == 3071 <stb Register a, Register b>
	return:7 == 3072 <@pop_reg Register d>
		pop_reg:10 == 3072 <.define registerToLoad Register d>
		pop_reg:13 == 3072 <ldc Register a, Constant 0>
		pop_reg:14 == 3073 <ldb Register a, Register a>
		pop_reg:15 == 3074 <ldc Register b, Constant 1>
		pop_reg:16 == 3075 <sub Register a, Register a, Register b>
		pop_reg:17 == 3076 <ldc Register b, Constant 0>
		pop_reg:18 == 3077 <stb Register b, Register a>
		pop_reg:22 == 3078 <ldb Register a, Register d>
	return:9 == 3079 <jump Register d>
pong.pa2:436 == 3080 <@function Constant 0>
	function:19 == 3080 <.define loccount Constant 0>
	function:21 == 3080 <.define stackptrptr Register a>
	function:22 == 3080 <.define stackptr Register b>
	function:25 == 3080 <ldc Register a, Constant 0>
	function:26 == 3081 <ldb Register a, Register b>
	function:27 == 3082 <ldc Register c, Constant 3>
	function:28 == 3083 <stb Register c, Register b>
	function:31 == 3084 <ldc Register c, Constant 0>
	function:32 == 3085 <add Register b, Register b, Register c>
	function:33 == 3086 <stb Register a, Register b>
pong.pa2:439 == 3087 <@push_const Constant 16384>
	push_const:6 == 3087 <.define constantToPush Constant 16384>
	push_const:12 == 3087 <@ldc Register b, Constant 16384>
		ldc:1 == 3087 <.define writeReg Register b>
		ldc:2 == 3087 <.define const Constant 16384>
		ldc:4 == 3087 <ldc Register a, Constant 4>
		ldc:5 == 3088 <ldc Register b, Constant 12>
		ldc:6 == 3089 <shl Register a, Register a, Register b>
		ldc:7 == 3090 <ldc Register b, Constant 0>
		ldc:8 == 3091 <or Register b, Register a, Register b>
	push_const:14 == 3092 <@push_reg Register b>
		push_reg:10 == 3092 <.define registerToPush Register b>
		push_reg:13 == 3092 <ldc Register a, Constant 0>
		push_reg:14 == 3093 <ldb Register a, Register a>
		push_reg:15 == 3094 <stb Register a, Register b>
		push_reg:19 == 3095 <ldc Register b, Constant 1>
		push_reg:20 == 3096 <add Register a, Register a, Register b>
		push_reg:21 == 3097 <ldc Register b, Constant 0>
		push_reg:22 == 3098 <stb Register b, Register a>
pong.pa2:440 == 3099 <@push_const Constant 24577>
	push_const:6 == 3099 <.define constantToPush Constant 24577>
	push_const:12 == 3099 <@ldc Register b, Constant 24577>
		ldc:1 == 3099 <.define writeReg Register b>
		ldc:2 == 3099 <.define const Constant 24577>
		ldc:4 == 3099 <ldc Register a, Constant 6>
		ldc:5 == 3100 <ldc Register b, Constant 12>
		ldc:6 == 3101 <shl Register a, Register a, Register b>
		ldc:7 == 3102 <ldc Register b, Constant 1>
		ldc:8 == 3103 <or Register b, Register a, Register b>
	push_const:14 == 3104 <@push_reg Register b>
		push_reg:10 == 3104 <.define registerToPush Register b>
		push_reg:13 == 3104 <ldc Register a, Constant 0>
		push_reg:14 == 3105 <ldb Register a, Register a>
		push_reg:15 == 3106 <stb Register a, Register b>
		push_reg:19 == 3107 <ldc Register b, Constant 1>
		push_reg:20 == 3108 <add Register a, Register a, Register b>
		push_reg:21 == 3109 <ldc Register b, Constant 0>
		push_reg:22 == 3110 <stb Register b, Register a>
pong.pa2:441 == 3111 <@push_mem_a >
	push_mem_a:4 == 3111 <.define val Register c>
	push_mem_a:5 == 3111 <.define addr Register d>
	push_mem_a:7 == 3111 <@pop_reg Register d>
		pop_reg:10 == 3111 <.define registerToLoad Register d>
		pop_reg:13 == 3111 <ldc Register a, Constant 0>
		pop_reg:14 == 3112 <ldb Register a, Register a>
		pop_reg:15 == 3113 <ldc Register b, Constant 1>
		pop_reg:16 == 3114 <sub Register a, Register a, Register b>
		pop_reg:17 == 3115 <ldc Register b, Constant 0>
		pop_reg:18 == 3116 <stb Register b, Register a>
		pop_reg:22 == 3117 <ldb Register a, Register d>
	push_mem_a:9 == 3118 <ldb Register d, Register c>
	push_mem_a:11 == 3119 <@push_reg Register c>
		push_reg:10 == 3119 <.define registerToPush Register c>
		push_reg:13 == 3119 <ldc Register a, Constant 0>
		push_reg:14 == 3120 <ldb Register a, Register a>
		push_reg:15 == 3121 <stb Register a, Register c>
		push_reg:19 == 3122 <ldc Register b, Constant 1>
		push_reg:20 == 3123 <add Register a, Register a, Register b>
		push_reg:21 == 3124 <ldc Register b, Constant 0>
		push_reg:22 == 3125 <stb Register b, Register a>
pong.pa2:442 == 3126 <@not >
	not:3 == 3126 <.define operand Register c>
	not:4 == 3126 <.define result Register d>
	not:6 == 3126 <@pop_reg Register c>
		pop_reg:10 == 3126 <.define registerToLoad Register c>
		pop_reg:13 == 3126 <ldc Register a, Constant 0>
		pop_reg:14 == 3127 <ldb Register a, Register a>
		pop_reg:15 == 3128 <ldc Register b, Constant 1>
		pop_reg:16 == 3129 <sub Register a, Register a, Register b>
		pop_reg:17 == 3130 <ldc Register b, Constant 0>
		pop_reg:18 == 3131 <stb Register b, Register a>
		pop_reg:22 == 3132 <ldb Register a, Register c>
	not:7 == 3133 <not Register d, Register c>
	not:8 == 3134 <@push_reg Register d>
		push_reg:10 == 3134 <.define registerToPush Register d>
		push_reg:13 == 3134 <ldc Register a, Constant 0>
		push_reg:14 == 3135 <ldb Register a, Register a>
		push_reg:15 == 3136 <stb Register a, Register d>
		push_reg:19 == 3137 <ldc Register b, Constant 1>
		push_reg:20 == 3138 <add Register a, Register a, Register b>
		push_reg:21 == 3139 <ldc Register b, Constant 0>
		push_reg:22 == 3140 <stb Register b, Register a>
pong.pa2:443 == 3141 <@push_const Constant 1>
	push_const:6 == 3141 <.define constantToPush Constant 1>
	push_const:12 == 3141 <@ldc Register b, Constant 1>
		ldc:1 == 3141 <.define writeReg Register b>
		ldc:2 == 3141 <.define const Constant 1>
		ldc:4 == 3141 <ldc Register a, Constant 0>
		ldc:5 == 3142 <ldc Register b, Constant 12>
		ldc:6 == 3143 <shl Register a, Register a, Register b>
		ldc:7 == 3144 <ldc Register b, Constant 1>
		ldc:8 == 3145 <or Register b, Register a, Register b>
	push_const:14 == 3146 <@push_reg Register b>
		push_reg:10 == 3146 <.define registerToPush Register b>
		push_reg:13 == 3146 <ldc Register a, Constant 0>
		push_reg:14 == 3147 <ldb Register a, Register a>
		push_reg:15 == 3148 <stb Register a, Register b>
		push_reg:19 == 3149 <ldc Register b, Constant 1>
		push_reg:20 == 3150 <add Register a, Register a, Register b>
		push_reg:21 == 3151 <ldc Register b, Constant 0>
		push_reg:22 == 3152 <stb Register b, Register a>
pong.pa2:444 == 3153 <@and >
	and:3 == 3153 <.define lhs Register c>
	and:4 == 3153 <.define rhs Register d>
	and:5 == 3153 <.define result Register d>
	and:7 == 3153 <@pop_reg Register c>
		pop_reg:10 == 3153 <.define registerToLoad Register c>
		pop_reg:13 == 3153 <ldc Register a, Constant 0>
		pop_reg:14 == 3154 <ldb Register a, Register a>
		pop_reg:15 == 3155 <ldc Register b, Constant 1>
		pop_reg:16 == 3156 <sub Register a, Register a, Register b>
		pop_reg:17 == 3157 <ldc Register b, Constant 0>
		pop_reg:18 == 3158 <stb Register b, Register a>
		pop_reg:22 == 3159 <ldb Register a, Register c>
	and:8 == 3160 <@pop_reg Register d>
		pop_reg:10 == 3160 <.define registerToLoad Register d>
		pop_reg:13 == 3160 <ldc Register a, Constant 0>
		pop_reg:14 == 3161 <ldb Register a, Register a>
		pop_reg:15 == 3162 <ldc Register b, Constant 1>
		pop_reg:16 == 3163 <sub Register a, Register a, Register b>
		pop_reg:17 == 3164 <ldc Register b, Constant 0>
		pop_reg:18 == 3165 <stb Register b, Register a>
		pop_reg:22 == 3166 <ldb Register a, Register d>
	and:9 == 3167 <and Register d, Register c, Register d>
	and:10 == 3168 <@push_reg Register d>
		push_reg:10 == 3168 <.define registerToPush Register d>
		push_reg:13 == 3168 <ldc Register a, Constant 0>
		push_reg:14 == 3169 <ldb Register a, Register a>
		push_reg:15 == 3170 <stb Register a, Register d>
		push_reg:19 == 3171 <ldc Register b, Constant 1>
		push_reg:20 == 3172 <add Register a, Register a, Register b>
		push_reg:21 == 3173 <ldc Register b, Constant 0>
		push_reg:22 == 3174 <stb Register b, Register a>
pong.pa2:445 == 3175 <@push_const Constant 4096>
	push_const:6 == 3175 <.define constantToPush Constant 4096>
	push_const:12 == 3175 <@ldc Register b, Constant 4096>
		ldc:1 == 3175 <.define writeReg Register b>
		ldc:2 == 3175 <.define const Constant 4096>
		ldc:4 == 3175 <ldc Register a, Constant 1>
		ldc:5 == 3176 <ldc Register b, Constant 12>
		ldc:6 == 3177 <shl Register a, Register a, Register b>
		ldc:7 == 3178 <ldc Register b, Constant 0>
		ldc:8 == 3179 <or Register b, Register a, Register b>
	push_const:14 == 3180 <@push_reg Register b>
		push_reg:10 == 3180 <.define registerToPush Register b>
		push_reg:13 == 3180 <ldc Register a, Constant 0>
		push_reg:14 == 3181 <ldb Register a, Register a>
		push_reg:15 == 3182 <stb Register a, Register b>
		push_reg:19 == 3183 <ldc Register b, Constant 1>
		push_reg:20 == 3184 <add Register a, Register a, Register b>
		push_reg:21 == 3185 <ldc Register b, Constant 0>
		push_reg:22 == 3186 <stb Register b, Register a>
pong.pa2:446 == 3187 <@mul >
	mul:3 == 3187 <.define lhs Register c>
	mul:4 == 3187 <.define rhs Register d>
	mul:5 == 3187 <.define result Register d>
	mul:7 == 3187 <@pop_reg Register c>
		pop_reg:10 == 3187 <.define registerToLoad Register c>
		pop_reg:13 == 3187 <ldc Register a, Constant 0>
		pop_reg:14 == 3188 <ldb Register a, Register a>
		pop_reg:15 == 3189 <ldc Register b, Constant 1>
		pop_reg:16 == 3190 <sub Register a, Register a, Register b>
		pop_reg:17 == 3191 <ldc Register b, Constant 0>
		pop_reg:18 == 3192 <stb Register b, Register a>
		pop_reg:22 == 3193 <ldb Register a, Register c>
	mul:8 == 3194 <@pop_reg Register d>
		pop_reg:10 == 3194 <.define registerToLoad Register d>
		pop_reg:13 == 3194 <ldc Register a, Constant 0>
		pop_reg:14 == 3195 <ldb Register a, Register a>
		pop_reg:15 == 3196 <ldc Register b, Constant 1>
		pop_reg:16 == 3197 <sub Register a, Register a, Register b>
		pop_reg:17 == 3198 <ldc Register b, Constant 0>
		pop_reg:18 == 3199 <stb Register b, Register a>
		pop_reg:22 == 3200 <ldb Register a, Register d>
	mul:9 == 3201 <mul Register d, Register c, Register d>
	mul:10 == 3202 <@push_reg Register d>
		push_reg:10 == 3202 <.define registerToPush Register d>
		push_reg:13 == 3202 <ldc Register a, Constant 0>
		push_reg:14 == 3203 <ldb Register a, Register a>
		push_reg:15 == 3204 <stb Register a, Register d>
		push_reg:19 == 3205 <ldc Register b, Constant 1>
		push_reg:20 == 3206 <add Register a, Register a, Register b>
		push_reg:21 == 3207 <ldc Register b, Constant 0>
		push_reg:22 == 3208 <stb Register b, Register a>
pong.pa2:447 == 3209 <@add >
	add:3 == 3209 <.define lhs Register c>
	add:4 == 3209 <.define rhs Register d>
	add:5 == 3209 <.define result Register d>
	add:7 == 3209 <@pop_reg Register c>
		pop_reg:10 == 3209 <.define registerToLoad Register c>
		pop_reg:13 == 3209 <ldc Register a, Constant 0>
		pop_reg:14 == 3210 <ldb Register a, Register a>
		pop_reg:15 == 3211 <ldc Register b, Constant 1>
		pop_reg:16 == 3212 <sub Register a, Register a, Register b>
		pop_reg:17 == 3213 <ldc Register b, Constant 0>
		pop_reg:18 == 3214 <stb Register b, Register a>
		pop_reg:22 == 3215 <ldb Register a, Register c>
	add:8 == 3216 <@pop_reg Register d>
		pop_reg:10 == 3216 <.define registerToLoad Register d>
		pop_reg:13 == 3216 <ldc Register a, Constant 0>
		pop_reg:14 == 3217 <ldb Register a, Register a>
		pop_reg:15 == 3218 <ldc Register b, Constant 1>
		pop_reg:16 == 3219 <sub Register a, Register a, Register b>
		pop_reg:17 == 3220 <ldc Register b, Constant 0>
		pop_reg:18 == 3221 <stb Register b, Register a>
		pop_reg:22 == 3222 <ldb Register a, Register d>
	add:9 == 3223 <add Register d, Register c, Register d>
	add:10 == 3224 <@push_reg Register d>
		push_reg:10 == 3224 <.define registerToPush Register d>
		push_reg:13 == 3224 <ldc Register a, Constant 0>
		push_reg:14 == 3225 <ldb Register a, Register a>
		push_reg:15 == 3226 <stb Register a, Register d>
		push_reg:19 == 3227 <ldc Register b, Constant 1>
		push_reg:20 == 3228 <add Register a, Register a, Register b>
		push_reg:21 == 3229 <ldc Register b, Constant 0>
		push_reg:22 == 3230 <stb Register b, Register a>
pong.pa2:449 == 3231 <@return_value >
	return_value:4 == 3231 <@pop_mem_v Constant 1>
		pop_mem_v:6 == 3231 <.define val Register c>
		pop_mem_v:7 == 3231 <.define addr Constant 1>
		pop_mem_v:9 == 3231 <@pop_reg Register c>
			pop_reg:10 == 3231 <.define registerToLoad Register c>
			pop_reg:13 == 3231 <ldc Register a, Constant 0>
			pop_reg:14 == 3232 <ldb Register a, Register a>
			pop_reg:15 == 3233 <ldc Register b, Constant 1>
			pop_reg:16 == 3234 <sub Register a, Register a, Register b>
			pop_reg:17 == 3235 <ldc Register b, Constant 0>
			pop_reg:18 == 3236 <stb Register b, Register a>
			pop_reg:22 == 3237 <ldb Register a, Register c>
		pop_mem_v:11 == 3238 <@ldc Register b, Constant 1>
			ldc:1 == 3238 <.define writeReg Register b>
			ldc:2 == 3238 <.define const Constant 1>
			ldc:4 == 3238 <ldc Register a, Constant 0>
			ldc:5 == 3239 <ldc Register b, Constant 12>
			ldc:6 == 3240 <shl Register a, Register a, Register b>
			ldc:7 == 3241 <ldc Register b, Constant 1>
			ldc:8 == 3242 <or Register b, Register a, Register b>
		pop_mem_v:12 == 3243 <stb Register b, Register c>
	return_value:6 == 3244 <@return >
		return:2 == 3244 <ldc Register b, Constant 3>
		return:3 == 3245 <ldb Register b, Register b>
		return:4 == 3246 <ldc Register a, Constant 0>
		return:5 == 3247 <stb Register a, Register b>
		return:7 == 3248 <@pop_reg Register d>
			pop_reg:10 == 3248 <.define registerToLoad Register d>
			pop_reg:13 == 3248 <ldc Register a, Constant 0>
			pop_reg:14 == 3249 <ldb Register a, Register a>
			pop_reg:15 == 3250 <ldc Register b, Constant 1>
			pop_reg:16 == 3251 <sub Register a, Register a, Register b>
			pop_reg:17 == 3252 <ldc Register b, Constant 0>
			pop_reg:18 == 3253 <stb Register b, Register a>
			pop_reg:22 == 3254 <ldb Register a, Register d>
		return:9 == 3255 <jump Register d>
