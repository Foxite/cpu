pong.pa2:2 == 0 <.define screenWidth Constant 64>
pong.pa2:3 == 0 <.define screenHeight Constant 64>
pong.pa2:5 == 0 <.define display Constant 16384>
pong.pa2:6 == 0 <.define displaySize Constant 4096>
pong.pa2:7 == 0 <.define displayEnd Constant 20480>
pong.pa2:8 == 0 <.define _dev Constant 24576>
pong.pa2:9 == 0 <.define devbutton Constant 24576>
pong.pa2:10 == 0 <.define devframe Constant 24577>
pong.pa2:11 == 0 <.define devmidi Constant 24578>
pong.pa2:12 == 0 <.define highZaddress Constant 65535>
pong.pa2:15 == 0 <.define colorBlack Constant 1>
pong.pa2:16 == 0 <.define colorWhite Constant 0>
pong.pa2:17 == 0 <.define colorOrange Constant 8>
pong.pa2:18 == 0 <.define colorPink Constant 9>
pong.pa2:23 == 0 <.define buttonLeftUp Constant 128>
pong.pa2:24 == 0 <.define buttonLeftDown Constant 64>
pong.pa2:25 == 0 <.define buttonRightUp Constant 8>
pong.pa2:26 == 0 <.define buttonRightDown Constant 1>
pong.pa2:30 == 0 <.define paddleHeight Constant 8>
pong.pa2:31 == 0 <.define paddlePadding Constant 8>
pong.pa2:32 == 0 <.define colorBackground Constant 1>
pong.pa2:33 == 0 <.define colorPaddleLeft Constant 8>
pong.pa2:34 == 0 <.define colorPaddleRight Constant 9>
pong.pa2:37 == 0 <.define paddleLeftX Constant 8>
pong.pa2:38 == 0 <.define paddleRightX Constant 56>
pong.pa2:39 == 0 <.define paddleMaxY Constant 56>
pong.pa2:43 == 0 <.define paddleLeftY Constant 16>
pong.pa2:44 == 0 <.define paddleRightY Constant 17>
pong.pa2:45 == 0 <.define ballX Constant 18>
pong.pa2:46 == 0 <.define ballY Constant 19>
pong.pa2:47 == 0 <.define ballSpeedX Constant 20>
pong.pa2:48 == 0 <.define ballSpeedY Constant 21>
pong.pa2:49 == 0 <.define ballColor Constant 22>
pong.pa2:51 == 0 <.define scoreLeft Constant 23>
pong.pa2:52 == 0 <.define scoreRight Constant 24>
pong.pa2:54 == 0 <.define inputLeftDir Constant 25>
pong.pa2:55 == 0 <.define inputRightDir Constant 26>
pong.pa2:61 == 0 <@init_stack >
	init_stack:7 == 0 <ldc Register a, Constant 256>
	init_stack:8 == 1 <ldc Register b, Constant 0>
	init_stack:9 == 2 <stb Register b, Register a>
pong.pa2:63 == 3 <@call Constant 334, Constant 0>
	call:11 == 3 <.define functionLabel Constant 334>
	call:12 == 3 <.define argcount Constant 0>
	call:15 == 3 <@push_mem Constant 2>
		push_mem:6 == 3 <.define addr Register b>
		push_mem:7 == 3 <.define value Register b>
		push_mem:9 == 3 <@ldc Register b, Constant 2>
			ldc:1 == 3 <.define writeReg Register b>
			ldc:2 == 3 <.define const Constant 2>
			ldc:4 == 3 <ldc Register a, Constant 0>
			ldc:5 == 4 <ldc Register b, Constant 12>
			ldc:6 == 5 <shl Register a, Register a, Register b>
			ldc:7 == 6 <ldc Register b, Constant 2>
			ldc:8 == 7 <or Register b, Register a, Register b>
		push_mem:10 == 8 <ldb Register b, Register b>
		push_mem:12 == 9 <@push_reg Register b>
			push_reg:10 == 9 <.define registerToPush Register b>
			push_reg:13 == 9 <ldc Register a, Constant 0>
			push_reg:14 == 10 <ldb Register a, Register a>
			push_reg:15 == 11 <stb Register a, Register b>
			push_reg:19 == 12 <ldc Register b, Constant 1>
			push_reg:20 == 13 <add Register a, Register a, Register b>
			push_reg:21 == 14 <ldc Register b, Constant 0>
			push_reg:22 == 15 <stb Register b, Register a>
	call:16 == 16 <@push_mem Constant 3>
		push_mem:6 == 16 <.define addr Register b>
		push_mem:7 == 16 <.define value Register b>
		push_mem:9 == 16 <@ldc Register b, Constant 3>
			ldc:1 == 16 <.define writeReg Register b>
			ldc:2 == 16 <.define const Constant 3>
			ldc:4 == 16 <ldc Register a, Constant 0>
			ldc:5 == 17 <ldc Register b, Constant 12>
			ldc:6 == 18 <shl Register a, Register a, Register b>
			ldc:7 == 19 <ldc Register b, Constant 3>
			ldc:8 == 20 <or Register b, Register a, Register b>
		push_mem:10 == 21 <ldb Register b, Register b>
		push_mem:12 == 22 <@push_reg Register b>
			push_reg:10 == 22 <.define registerToPush Register b>
			push_reg:13 == 22 <ldc Register a, Constant 0>
			push_reg:14 == 23 <ldb Register a, Register a>
			push_reg:15 == 24 <stb Register a, Register b>
			push_reg:19 == 25 <ldc Register b, Constant 1>
			push_reg:20 == 26 <add Register a, Register a, Register b>
			push_reg:21 == 27 <ldc Register b, Constant 0>
			push_reg:22 == 28 <stb Register b, Register a>
	call:19 == 29 <@push_const Constant 53>
		push_const:6 == 29 <.define constantToPush Constant 53>
		push_const:12 == 29 <@ldc Register b, Constant 53>
			ldc:1 == 29 <.define writeReg Register b>
			ldc:2 == 29 <.define const Constant 53>
			ldc:4 == 29 <ldc Register a, Constant 0>
			ldc:5 == 30 <ldc Register b, Constant 12>
			ldc:6 == 31 <shl Register a, Register a, Register b>
			ldc:7 == 32 <ldc Register b, Constant 53>
			ldc:8 == 33 <or Register b, Register a, Register b>
		push_const:14 == 34 <@push_reg Register b>
			push_reg:10 == 34 <.define registerToPush Register b>
			push_reg:13 == 34 <ldc Register a, Constant 0>
			push_reg:14 == 35 <ldb Register a, Register a>
			push_reg:15 == 36 <stb Register a, Register b>
			push_reg:19 == 37 <ldc Register b, Constant 1>
			push_reg:20 == 38 <add Register a, Register a, Register b>
			push_reg:21 == 39 <ldc Register b, Constant 0>
			push_reg:22 == 40 <stb Register b, Register a>
	call:24 == 41 <ldc Register a, Constant 0>
	call:25 == 42 <ldb Register a, Register c>
	call:26 == 43 <ldc Register b, Constant 3>
	call:27 == 44 <sub Register c, Register c, Register b>
	call:28 == 45 <ldc Register a, Constant 2>
	call:29 == 46 <stb Register a, Register c>
	call:39 == 47 <@ldc Register a, Constant 334>
		ldc:1 == 47 <.define writeReg Register a>
		ldc:2 == 47 <.define const Constant 334>
		ldc:4 == 47 <ldc Register a, Constant 0>
		ldc:5 == 48 <ldc Register b, Constant 12>
		ldc:6 == 49 <shl Register a, Register a, Register b>
		ldc:7 == 50 <ldc Register b, Constant 334>
		ldc:8 == 51 <or Register a, Register a, Register b>
	call:40 == 52 <jmp Register a>
	call:45 == 53 <ldc Register d, Constant 2>
	call:48 == 54 <ldb Register d, Register d>
	call:50 == 55 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 55 <.define val Register c>
		pop_mem_v:7 == 55 <.define addr Constant 3>
		pop_mem_v:9 == 55 <@pop_reg Register c>
			pop_reg:10 == 55 <.define registerToLoad Register c>
			pop_reg:13 == 55 <ldc Register a, Constant 0>
			pop_reg:14 == 56 <ldb Register a, Register a>
			pop_reg:15 == 57 <ldc Register b, Constant 1>
			pop_reg:16 == 58 <sub Register a, Register a, Register b>
			pop_reg:17 == 59 <ldc Register b, Constant 0>
			pop_reg:18 == 60 <stb Register b, Register a>
			pop_reg:22 == 61 <ldb Register a, Register c>
		pop_mem_v:11 == 62 <@ldc Register b, Constant 3>
			ldc:1 == 62 <.define writeReg Register b>
			ldc:2 == 62 <.define const Constant 3>
			ldc:4 == 62 <ldc Register a, Constant 0>
			ldc:5 == 63 <ldc Register b, Constant 12>
			ldc:6 == 64 <shl Register a, Register a, Register b>
			ldc:7 == 65 <ldc Register b, Constant 3>
			ldc:8 == 66 <or Register b, Register a, Register b>
		pop_mem_v:12 == 67 <stb Register b, Register c>
	call:51 == 68 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 68 <.define val Register c>
		pop_mem_v:7 == 68 <.define addr Constant 2>
		pop_mem_v:9 == 68 <@pop_reg Register c>
			pop_reg:10 == 68 <.define registerToLoad Register c>
			pop_reg:13 == 68 <ldc Register a, Constant 0>
			pop_reg:14 == 69 <ldb Register a, Register a>
			pop_reg:15 == 70 <ldc Register b, Constant 1>
			pop_reg:16 == 71 <sub Register a, Register a, Register b>
			pop_reg:17 == 72 <ldc Register b, Constant 0>
			pop_reg:18 == 73 <stb Register b, Register a>
			pop_reg:22 == 74 <ldb Register a, Register c>
		pop_mem_v:11 == 75 <@ldc Register b, Constant 2>
			ldc:1 == 75 <.define writeReg Register b>
			ldc:2 == 75 <.define const Constant 2>
			ldc:4 == 75 <ldc Register a, Constant 0>
			ldc:5 == 76 <ldc Register b, Constant 12>
			ldc:6 == 77 <shl Register a, Register a, Register b>
			ldc:7 == 78 <ldc Register b, Constant 2>
			ldc:8 == 79 <or Register b, Register a, Register b>
		pop_mem_v:12 == 80 <stb Register b, Register c>
	call:53 == 81 <ldc Register c, Constant 0>
	call:54 == 82 <stb Register c, Register d>
pong.pa2:65 == 83 <ldc Register b, Constant 28>
pong.pa2:66 == 84 <ldc Register a, Constant 16>
pong.pa2:67 == 85 <stb Register a, Register b>
pong.pa2:68 == 86 <ldc Register a, Constant 17>
pong.pa2:69 == 87 <stb Register a, Register b>
pong.pa2:74 == 88 <@call Constant 391, Constant 0>
	call:11 == 88 <.define functionLabel Constant 391>
	call:12 == 88 <.define argcount Constant 0>
	call:15 == 88 <@push_mem Constant 2>
		push_mem:6 == 88 <.define addr Register b>
		push_mem:7 == 88 <.define value Register b>
		push_mem:9 == 88 <@ldc Register b, Constant 2>
			ldc:1 == 88 <.define writeReg Register b>
			ldc:2 == 88 <.define const Constant 2>
			ldc:4 == 88 <ldc Register a, Constant 0>
			ldc:5 == 89 <ldc Register b, Constant 12>
			ldc:6 == 90 <shl Register a, Register a, Register b>
			ldc:7 == 91 <ldc Register b, Constant 2>
			ldc:8 == 92 <or Register b, Register a, Register b>
		push_mem:10 == 93 <ldb Register b, Register b>
		push_mem:12 == 94 <@push_reg Register b>
			push_reg:10 == 94 <.define registerToPush Register b>
			push_reg:13 == 94 <ldc Register a, Constant 0>
			push_reg:14 == 95 <ldb Register a, Register a>
			push_reg:15 == 96 <stb Register a, Register b>
			push_reg:19 == 97 <ldc Register b, Constant 1>
			push_reg:20 == 98 <add Register a, Register a, Register b>
			push_reg:21 == 99 <ldc Register b, Constant 0>
			push_reg:22 == 100 <stb Register b, Register a>
	call:16 == 101 <@push_mem Constant 3>
		push_mem:6 == 101 <.define addr Register b>
		push_mem:7 == 101 <.define value Register b>
		push_mem:9 == 101 <@ldc Register b, Constant 3>
			ldc:1 == 101 <.define writeReg Register b>
			ldc:2 == 101 <.define const Constant 3>
			ldc:4 == 101 <ldc Register a, Constant 0>
			ldc:5 == 102 <ldc Register b, Constant 12>
			ldc:6 == 103 <shl Register a, Register a, Register b>
			ldc:7 == 104 <ldc Register b, Constant 3>
			ldc:8 == 105 <or Register b, Register a, Register b>
		push_mem:10 == 106 <ldb Register b, Register b>
		push_mem:12 == 107 <@push_reg Register b>
			push_reg:10 == 107 <.define registerToPush Register b>
			push_reg:13 == 107 <ldc Register a, Constant 0>
			push_reg:14 == 108 <ldb Register a, Register a>
			push_reg:15 == 109 <stb Register a, Register b>
			push_reg:19 == 110 <ldc Register b, Constant 1>
			push_reg:20 == 111 <add Register a, Register a, Register b>
			push_reg:21 == 112 <ldc Register b, Constant 0>
			push_reg:22 == 113 <stb Register b, Register a>
	call:19 == 114 <@push_const Constant 138>
		push_const:6 == 114 <.define constantToPush Constant 138>
		push_const:12 == 114 <@ldc Register b, Constant 138>
			ldc:1 == 114 <.define writeReg Register b>
			ldc:2 == 114 <.define const Constant 138>
			ldc:4 == 114 <ldc Register a, Constant 0>
			ldc:5 == 115 <ldc Register b, Constant 12>
			ldc:6 == 116 <shl Register a, Register a, Register b>
			ldc:7 == 117 <ldc Register b, Constant 138>
			ldc:8 == 118 <or Register b, Register a, Register b>
		push_const:14 == 119 <@push_reg Register b>
			push_reg:10 == 119 <.define registerToPush Register b>
			push_reg:13 == 119 <ldc Register a, Constant 0>
			push_reg:14 == 120 <ldb Register a, Register a>
			push_reg:15 == 121 <stb Register a, Register b>
			push_reg:19 == 122 <ldc Register b, Constant 1>
			push_reg:20 == 123 <add Register a, Register a, Register b>
			push_reg:21 == 124 <ldc Register b, Constant 0>
			push_reg:22 == 125 <stb Register b, Register a>
	call:24 == 126 <ldc Register a, Constant 0>
	call:25 == 127 <ldb Register a, Register c>
	call:26 == 128 <ldc Register b, Constant 3>
	call:27 == 129 <sub Register c, Register c, Register b>
	call:28 == 130 <ldc Register a, Constant 2>
	call:29 == 131 <stb Register a, Register c>
	call:39 == 132 <@ldc Register a, Constant 391>
		ldc:1 == 132 <.define writeReg Register a>
		ldc:2 == 132 <.define const Constant 391>
		ldc:4 == 132 <ldc Register a, Constant 0>
		ldc:5 == 133 <ldc Register b, Constant 12>
		ldc:6 == 134 <shl Register a, Register a, Register b>
		ldc:7 == 135 <ldc Register b, Constant 391>
		ldc:8 == 136 <or Register a, Register a, Register b>
	call:40 == 137 <jmp Register a>
	call:45 == 138 <ldc Register d, Constant 2>
	call:48 == 139 <ldb Register d, Register d>
	call:50 == 140 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 140 <.define val Register c>
		pop_mem_v:7 == 140 <.define addr Constant 3>
		pop_mem_v:9 == 140 <@pop_reg Register c>
			pop_reg:10 == 140 <.define registerToLoad Register c>
			pop_reg:13 == 140 <ldc Register a, Constant 0>
			pop_reg:14 == 141 <ldb Register a, Register a>
			pop_reg:15 == 142 <ldc Register b, Constant 1>
			pop_reg:16 == 143 <sub Register a, Register a, Register b>
			pop_reg:17 == 144 <ldc Register b, Constant 0>
			pop_reg:18 == 145 <stb Register b, Register a>
			pop_reg:22 == 146 <ldb Register a, Register c>
		pop_mem_v:11 == 147 <@ldc Register b, Constant 3>
			ldc:1 == 147 <.define writeReg Register b>
			ldc:2 == 147 <.define const Constant 3>
			ldc:4 == 147 <ldc Register a, Constant 0>
			ldc:5 == 148 <ldc Register b, Constant 12>
			ldc:6 == 149 <shl Register a, Register a, Register b>
			ldc:7 == 150 <ldc Register b, Constant 3>
			ldc:8 == 151 <or Register b, Register a, Register b>
		pop_mem_v:12 == 152 <stb Register b, Register c>
	call:51 == 153 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 153 <.define val Register c>
		pop_mem_v:7 == 153 <.define addr Constant 2>
		pop_mem_v:9 == 153 <@pop_reg Register c>
			pop_reg:10 == 153 <.define registerToLoad Register c>
			pop_reg:13 == 153 <ldc Register a, Constant 0>
			pop_reg:14 == 154 <ldb Register a, Register a>
			pop_reg:15 == 155 <ldc Register b, Constant 1>
			pop_reg:16 == 156 <sub Register a, Register a, Register b>
			pop_reg:17 == 157 <ldc Register b, Constant 0>
			pop_reg:18 == 158 <stb Register b, Register a>
			pop_reg:22 == 159 <ldb Register a, Register c>
		pop_mem_v:11 == 160 <@ldc Register b, Constant 2>
			ldc:1 == 160 <.define writeReg Register b>
			ldc:2 == 160 <.define const Constant 2>
			ldc:4 == 160 <ldc Register a, Constant 0>
			ldc:5 == 161 <ldc Register b, Constant 12>
			ldc:6 == 162 <shl Register a, Register a, Register b>
			ldc:7 == 163 <ldc Register b, Constant 2>
			ldc:8 == 164 <or Register b, Register a, Register b>
		pop_mem_v:12 == 165 <stb Register b, Register c>
	call:53 == 166 <ldc Register c, Constant 0>
	call:54 == 167 <stb Register c, Register d>
pong.pa2:76 == 168 <@call Constant 1051, Constant 0>
	call:11 == 168 <.define functionLabel Constant 1051>
	call:12 == 168 <.define argcount Constant 0>
	call:15 == 168 <@push_mem Constant 2>
		push_mem:6 == 168 <.define addr Register b>
		push_mem:7 == 168 <.define value Register b>
		push_mem:9 == 168 <@ldc Register b, Constant 2>
			ldc:1 == 168 <.define writeReg Register b>
			ldc:2 == 168 <.define const Constant 2>
			ldc:4 == 168 <ldc Register a, Constant 0>
			ldc:5 == 169 <ldc Register b, Constant 12>
			ldc:6 == 170 <shl Register a, Register a, Register b>
			ldc:7 == 171 <ldc Register b, Constant 2>
			ldc:8 == 172 <or Register b, Register a, Register b>
		push_mem:10 == 173 <ldb Register b, Register b>
		push_mem:12 == 174 <@push_reg Register b>
			push_reg:10 == 174 <.define registerToPush Register b>
			push_reg:13 == 174 <ldc Register a, Constant 0>
			push_reg:14 == 175 <ldb Register a, Register a>
			push_reg:15 == 176 <stb Register a, Register b>
			push_reg:19 == 177 <ldc Register b, Constant 1>
			push_reg:20 == 178 <add Register a, Register a, Register b>
			push_reg:21 == 179 <ldc Register b, Constant 0>
			push_reg:22 == 180 <stb Register b, Register a>
	call:16 == 181 <@push_mem Constant 3>
		push_mem:6 == 181 <.define addr Register b>
		push_mem:7 == 181 <.define value Register b>
		push_mem:9 == 181 <@ldc Register b, Constant 3>
			ldc:1 == 181 <.define writeReg Register b>
			ldc:2 == 181 <.define const Constant 3>
			ldc:4 == 181 <ldc Register a, Constant 0>
			ldc:5 == 182 <ldc Register b, Constant 12>
			ldc:6 == 183 <shl Register a, Register a, Register b>
			ldc:7 == 184 <ldc Register b, Constant 3>
			ldc:8 == 185 <or Register b, Register a, Register b>
		push_mem:10 == 186 <ldb Register b, Register b>
		push_mem:12 == 187 <@push_reg Register b>
			push_reg:10 == 187 <.define registerToPush Register b>
			push_reg:13 == 187 <ldc Register a, Constant 0>
			push_reg:14 == 188 <ldb Register a, Register a>
			push_reg:15 == 189 <stb Register a, Register b>
			push_reg:19 == 190 <ldc Register b, Constant 1>
			push_reg:20 == 191 <add Register a, Register a, Register b>
			push_reg:21 == 192 <ldc Register b, Constant 0>
			push_reg:22 == 193 <stb Register b, Register a>
	call:19 == 194 <@push_const Constant 218>
		push_const:6 == 194 <.define constantToPush Constant 218>
		push_const:12 == 194 <@ldc Register b, Constant 218>
			ldc:1 == 194 <.define writeReg Register b>
			ldc:2 == 194 <.define const Constant 218>
			ldc:4 == 194 <ldc Register a, Constant 0>
			ldc:5 == 195 <ldc Register b, Constant 12>
			ldc:6 == 196 <shl Register a, Register a, Register b>
			ldc:7 == 197 <ldc Register b, Constant 218>
			ldc:8 == 198 <or Register b, Register a, Register b>
		push_const:14 == 199 <@push_reg Register b>
			push_reg:10 == 199 <.define registerToPush Register b>
			push_reg:13 == 199 <ldc Register a, Constant 0>
			push_reg:14 == 200 <ldb Register a, Register a>
			push_reg:15 == 201 <stb Register a, Register b>
			push_reg:19 == 202 <ldc Register b, Constant 1>
			push_reg:20 == 203 <add Register a, Register a, Register b>
			push_reg:21 == 204 <ldc Register b, Constant 0>
			push_reg:22 == 205 <stb Register b, Register a>
	call:24 == 206 <ldc Register a, Constant 0>
	call:25 == 207 <ldb Register a, Register c>
	call:26 == 208 <ldc Register b, Constant 3>
	call:27 == 209 <sub Register c, Register c, Register b>
	call:28 == 210 <ldc Register a, Constant 2>
	call:29 == 211 <stb Register a, Register c>
	call:39 == 212 <@ldc Register a, Constant 1051>
		ldc:1 == 212 <.define writeReg Register a>
		ldc:2 == 212 <.define const Constant 1051>
		ldc:4 == 212 <ldc Register a, Constant 0>
		ldc:5 == 213 <ldc Register b, Constant 12>
		ldc:6 == 214 <shl Register a, Register a, Register b>
		ldc:7 == 215 <ldc Register b, Constant 1051>
		ldc:8 == 216 <or Register a, Register a, Register b>
	call:40 == 217 <jmp Register a>
	call:45 == 218 <ldc Register d, Constant 2>
	call:48 == 219 <ldb Register d, Register d>
	call:50 == 220 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 220 <.define val Register c>
		pop_mem_v:7 == 220 <.define addr Constant 3>
		pop_mem_v:9 == 220 <@pop_reg Register c>
			pop_reg:10 == 220 <.define registerToLoad Register c>
			pop_reg:13 == 220 <ldc Register a, Constant 0>
			pop_reg:14 == 221 <ldb Register a, Register a>
			pop_reg:15 == 222 <ldc Register b, Constant 1>
			pop_reg:16 == 223 <sub Register a, Register a, Register b>
			pop_reg:17 == 224 <ldc Register b, Constant 0>
			pop_reg:18 == 225 <stb Register b, Register a>
			pop_reg:22 == 226 <ldb Register a, Register c>
		pop_mem_v:11 == 227 <@ldc Register b, Constant 3>
			ldc:1 == 227 <.define writeReg Register b>
			ldc:2 == 227 <.define const Constant 3>
			ldc:4 == 227 <ldc Register a, Constant 0>
			ldc:5 == 228 <ldc Register b, Constant 12>
			ldc:6 == 229 <shl Register a, Register a, Register b>
			ldc:7 == 230 <ldc Register b, Constant 3>
			ldc:8 == 231 <or Register b, Register a, Register b>
		pop_mem_v:12 == 232 <stb Register b, Register c>
	call:51 == 233 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 233 <.define val Register c>
		pop_mem_v:7 == 233 <.define addr Constant 2>
		pop_mem_v:9 == 233 <@pop_reg Register c>
			pop_reg:10 == 233 <.define registerToLoad Register c>
			pop_reg:13 == 233 <ldc Register a, Constant 0>
			pop_reg:14 == 234 <ldb Register a, Register a>
			pop_reg:15 == 235 <ldc Register b, Constant 1>
			pop_reg:16 == 236 <sub Register a, Register a, Register b>
			pop_reg:17 == 237 <ldc Register b, Constant 0>
			pop_reg:18 == 238 <stb Register b, Register a>
			pop_reg:22 == 239 <ldb Register a, Register c>
		pop_mem_v:11 == 240 <@ldc Register b, Constant 2>
			ldc:1 == 240 <.define writeReg Register b>
			ldc:2 == 240 <.define const Constant 2>
			ldc:4 == 240 <ldc Register a, Constant 0>
			ldc:5 == 241 <ldc Register b, Constant 12>
			ldc:6 == 242 <shl Register a, Register a, Register b>
			ldc:7 == 243 <ldc Register b, Constant 2>
			ldc:8 == 244 <or Register b, Register a, Register b>
		pop_mem_v:12 == 245 <stb Register b, Register c>
	call:53 == 246 <ldc Register c, Constant 0>
	call:54 == 247 <stb Register c, Register d>
pong.pa2:77 == 248 <@call Constant 1608, Constant 0>
	call:11 == 248 <.define functionLabel Constant 1608>
	call:12 == 248 <.define argcount Constant 0>
	call:15 == 248 <@push_mem Constant 2>
		push_mem:6 == 248 <.define addr Register b>
		push_mem:7 == 248 <.define value Register b>
		push_mem:9 == 248 <@ldc Register b, Constant 2>
			ldc:1 == 248 <.define writeReg Register b>
			ldc:2 == 248 <.define const Constant 2>
			ldc:4 == 248 <ldc Register a, Constant 0>
			ldc:5 == 249 <ldc Register b, Constant 12>
			ldc:6 == 250 <shl Register a, Register a, Register b>
			ldc:7 == 251 <ldc Register b, Constant 2>
			ldc:8 == 252 <or Register b, Register a, Register b>
		push_mem:10 == 253 <ldb Register b, Register b>
		push_mem:12 == 254 <@push_reg Register b>
			push_reg:10 == 254 <.define registerToPush Register b>
			push_reg:13 == 254 <ldc Register a, Constant 0>
			push_reg:14 == 255 <ldb Register a, Register a>
			push_reg:15 == 256 <stb Register a, Register b>
			push_reg:19 == 257 <ldc Register b, Constant 1>
			push_reg:20 == 258 <add Register a, Register a, Register b>
			push_reg:21 == 259 <ldc Register b, Constant 0>
			push_reg:22 == 260 <stb Register b, Register a>
	call:16 == 261 <@push_mem Constant 3>
		push_mem:6 == 261 <.define addr Register b>
		push_mem:7 == 261 <.define value Register b>
		push_mem:9 == 261 <@ldc Register b, Constant 3>
			ldc:1 == 261 <.define writeReg Register b>
			ldc:2 == 261 <.define const Constant 3>
			ldc:4 == 261 <ldc Register a, Constant 0>
			ldc:5 == 262 <ldc Register b, Constant 12>
			ldc:6 == 263 <shl Register a, Register a, Register b>
			ldc:7 == 264 <ldc Register b, Constant 3>
			ldc:8 == 265 <or Register b, Register a, Register b>
		push_mem:10 == 266 <ldb Register b, Register b>
		push_mem:12 == 267 <@push_reg Register b>
			push_reg:10 == 267 <.define registerToPush Register b>
			push_reg:13 == 267 <ldc Register a, Constant 0>
			push_reg:14 == 268 <ldb Register a, Register a>
			push_reg:15 == 269 <stb Register a, Register b>
			push_reg:19 == 270 <ldc Register b, Constant 1>
			push_reg:20 == 271 <add Register a, Register a, Register b>
			push_reg:21 == 272 <ldc Register b, Constant 0>
			push_reg:22 == 273 <stb Register b, Register a>
	call:19 == 274 <@push_const Constant 298>
		push_const:6 == 274 <.define constantToPush Constant 298>
		push_const:12 == 274 <@ldc Register b, Constant 298>
			ldc:1 == 274 <.define writeReg Register b>
			ldc:2 == 274 <.define const Constant 298>
			ldc:4 == 274 <ldc Register a, Constant 0>
			ldc:5 == 275 <ldc Register b, Constant 12>
			ldc:6 == 276 <shl Register a, Register a, Register b>
			ldc:7 == 277 <ldc Register b, Constant 298>
			ldc:8 == 278 <or Register b, Register a, Register b>
		push_const:14 == 279 <@push_reg Register b>
			push_reg:10 == 279 <.define registerToPush Register b>
			push_reg:13 == 279 <ldc Register a, Constant 0>
			push_reg:14 == 280 <ldb Register a, Register a>
			push_reg:15 == 281 <stb Register a, Register b>
			push_reg:19 == 282 <ldc Register b, Constant 1>
			push_reg:20 == 283 <add Register a, Register a, Register b>
			push_reg:21 == 284 <ldc Register b, Constant 0>
			push_reg:22 == 285 <stb Register b, Register a>
	call:24 == 286 <ldc Register a, Constant 0>
	call:25 == 287 <ldb Register a, Register c>
	call:26 == 288 <ldc Register b, Constant 3>
	call:27 == 289 <sub Register c, Register c, Register b>
	call:28 == 290 <ldc Register a, Constant 2>
	call:29 == 291 <stb Register a, Register c>
	call:39 == 292 <@ldc Register a, Constant 1608>
		ldc:1 == 292 <.define writeReg Register a>
		ldc:2 == 292 <.define const Constant 1608>
		ldc:4 == 292 <ldc Register a, Constant 0>
		ldc:5 == 293 <ldc Register b, Constant 12>
		ldc:6 == 294 <shl Register a, Register a, Register b>
		ldc:7 == 295 <ldc Register b, Constant 1608>
		ldc:8 == 296 <or Register a, Register a, Register b>
	call:40 == 297 <jmp Register a>
	call:45 == 298 <ldc Register d, Constant 2>
	call:48 == 299 <ldb Register d, Register d>
	call:50 == 300 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 300 <.define val Register c>
		pop_mem_v:7 == 300 <.define addr Constant 3>
		pop_mem_v:9 == 300 <@pop_reg Register c>
			pop_reg:10 == 300 <.define registerToLoad Register c>
			pop_reg:13 == 300 <ldc Register a, Constant 0>
			pop_reg:14 == 301 <ldb Register a, Register a>
			pop_reg:15 == 302 <ldc Register b, Constant 1>
			pop_reg:16 == 303 <sub Register a, Register a, Register b>
			pop_reg:17 == 304 <ldc Register b, Constant 0>
			pop_reg:18 == 305 <stb Register b, Register a>
			pop_reg:22 == 306 <ldb Register a, Register c>
		pop_mem_v:11 == 307 <@ldc Register b, Constant 3>
			ldc:1 == 307 <.define writeReg Register b>
			ldc:2 == 307 <.define const Constant 3>
			ldc:4 == 307 <ldc Register a, Constant 0>
			ldc:5 == 308 <ldc Register b, Constant 12>
			ldc:6 == 309 <shl Register a, Register a, Register b>
			ldc:7 == 310 <ldc Register b, Constant 3>
			ldc:8 == 311 <or Register b, Register a, Register b>
		pop_mem_v:12 == 312 <stb Register b, Register c>
	call:51 == 313 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 313 <.define val Register c>
		pop_mem_v:7 == 313 <.define addr Constant 2>
		pop_mem_v:9 == 313 <@pop_reg Register c>
			pop_reg:10 == 313 <.define registerToLoad Register c>
			pop_reg:13 == 313 <ldc Register a, Constant 0>
			pop_reg:14 == 314 <ldb Register a, Register a>
			pop_reg:15 == 315 <ldc Register b, Constant 1>
			pop_reg:16 == 316 <sub Register a, Register a, Register b>
			pop_reg:17 == 317 <ldc Register b, Constant 0>
			pop_reg:18 == 318 <stb Register b, Register a>
			pop_reg:22 == 319 <ldb Register a, Register c>
		pop_mem_v:11 == 320 <@ldc Register b, Constant 2>
			ldc:1 == 320 <.define writeReg Register b>
			ldc:2 == 320 <.define const Constant 2>
			ldc:4 == 320 <ldc Register a, Constant 0>
			ldc:5 == 321 <ldc Register b, Constant 12>
			ldc:6 == 322 <shl Register a, Register a, Register b>
			ldc:7 == 323 <ldc Register b, Constant 2>
			ldc:8 == 324 <or Register b, Register a, Register b>
		pop_mem_v:12 == 325 <stb Register b, Register c>
	call:53 == 326 <ldc Register c, Constant 0>
	call:54 == 327 <stb Register c, Register d>
pong.pa2:79 == 328 <@ldc Register a, Constant 88>
	ldc:1 == 328 <.define writeReg Register a>
	ldc:2 == 328 <.define const Constant 88>
	ldc:4 == 328 <ldc Register a, Constant 0>
	ldc:5 == 329 <ldc Register b, Constant 12>
	ldc:6 == 330 <shl Register a, Register a, Register b>
	ldc:7 == 331 <ldc Register b, Constant 88>
	ldc:8 == 332 <or Register a, Register a, Register b>
pong.pa2:80 == 333 <jump Register a>
pong.pa2:86 == 334 <@function Constant 0>
	function:19 == 334 <.define loccount Constant 0>
	function:22 == 334 <ldc Register a, Constant 0>
	function:23 == 335 <ldb Register a, Register a>
	function:24 == 336 <ldc Register b, Constant 3>
	function:25 == 337 <stb Register b, Register a>
	function:28 == 338 <ldc Register a, Constant 0>
	function:29 == 339 <ldb Register a, Register b>
	function:30 == 340 <ldc Register c, Constant 0>
	function:31 == 341 <add Register b, Register b, Register c>
	function:32 == 342 <stb Register a, Register b>
pong.pa2:89 == 343 <ldc Register a, Constant 22>
pong.pa2:90 == 344 <ldc Register b, Constant 0>
pong.pa2:91 == 345 <stb Register a, Register b>
pong.pa2:93 == 346 <ldc Register a, Constant 18>
pong.pa2:94 == 347 <ldc Register b, Constant 32>
pong.pa2:95 == 348 <stb Register a, Register b>
pong.pa2:97 == 349 <ldc Register a, Constant 19>
pong.pa2:98 == 350 <ldc Register b, Constant 54>
pong.pa2:99 == 351 <stb Register a, Register b>
pong.pa2:107 == 352 <@ldc Register c, Constant 65535>
	ldc:1 == 352 <.define writeReg Register c>
	ldc:2 == 352 <.define const Constant 65535>
	ldc:4 == 352 <ldc Register a, Constant 15>
	ldc:5 == 353 <ldc Register b, Constant 12>
	ldc:6 == 354 <shl Register a, Register a, Register b>
	ldc:7 == 355 <ldc Register b, Constant 4095>
	ldc:8 == 356 <or Register c, Register a, Register b>
pong.pa2:108 == 357 <ldb Register c, Register c>
pong.pa2:114 == 358 <ldc Register d, Constant 1>
pong.pa2:115 == 359 <ldc Register b, Constant 1>
pong.pa2:116 == 360 <and Register a, Register c, Register b>
pong.pa2:118 == 361 <ldc Register b, Constant 2>
pong.pa2:119 == 362 <mul Register a, Register a, Register b>
pong.pa2:121 == 363 <sub Register a, Register a, Register d>
pong.pa2:123 == 364 <ldc Register b, Constant 20>
pong.pa2:124 == 365 <stb Register b, Register a>
pong.pa2:128 == 366 <ldc Register b, Constant 2>
pong.pa2:129 == 367 <and Register a, Register c, Register b>
pong.pa2:130 == 368 <shr Register a, Register a, Register d>
pong.pa2:132 == 369 <ldc Register b, Constant 2>
pong.pa2:133 == 370 <mul Register a, Register a, Register b>
pong.pa2:135 == 371 <sub Register a, Register a, Register d>
pong.pa2:137 == 372 <@ldc Register a, Constant 1>
	ldc:1 == 372 <.define writeReg Register a>
	ldc:2 == 372 <.define const Constant 1>
	ldc:4 == 372 <ldc Register a, Constant 0>
	ldc:5 == 373 <ldc Register b, Constant 12>
	ldc:6 == 374 <shl Register a, Register a, Register b>
	ldc:7 == 375 <ldc Register b, Constant 1>
	ldc:8 == 376 <or Register a, Register a, Register b>
pong.pa2:138 == 377 <ldc Register b, Constant 21>
pong.pa2:139 == 378 <stb Register b, Register a>
pong.pa2:141 == 379 <@return >
	return:2 == 379 <ldc Register b, Constant 3>
	return:3 == 380 <ldb Register b, Register b>
	return:4 == 381 <ldc Register a, Constant 0>
	return:5 == 382 <stb Register a, Register b>
	return:7 == 383 <@pop_reg Register d>
		pop_reg:10 == 383 <.define registerToLoad Register d>
		pop_reg:13 == 383 <ldc Register a, Constant 0>
		pop_reg:14 == 384 <ldb Register a, Register a>
		pop_reg:15 == 385 <ldc Register b, Constant 1>
		pop_reg:16 == 386 <sub Register a, Register a, Register b>
		pop_reg:17 == 387 <ldc Register b, Constant 0>
		pop_reg:18 == 388 <stb Register b, Register a>
		pop_reg:22 == 389 <ldb Register a, Register d>
	return:9 == 390 <jump Register d>
pong.pa2:152 == 391 <@function Constant 0>
	function:19 == 391 <.define loccount Constant 0>
	function:22 == 391 <ldc Register a, Constant 0>
	function:23 == 392 <ldb Register a, Register a>
	function:24 == 393 <ldc Register b, Constant 3>
	function:25 == 394 <stb Register b, Register a>
	function:28 == 395 <ldc Register a, Constant 0>
	function:29 == 396 <ldb Register a, Register b>
	function:30 == 397 <ldc Register c, Constant 0>
	function:31 == 398 <add Register b, Register b, Register c>
	function:32 == 399 <stb Register a, Register b>
pong.pa2:160 == 400 <@push_const Constant 64>
	push_const:6 == 400 <.define constantToPush Constant 64>
	push_const:12 == 400 <@ldc Register b, Constant 64>
		ldc:1 == 400 <.define writeReg Register b>
		ldc:2 == 400 <.define const Constant 64>
		ldc:4 == 400 <ldc Register a, Constant 0>
		ldc:5 == 401 <ldc Register b, Constant 12>
		ldc:6 == 402 <shl Register a, Register a, Register b>
		ldc:7 == 403 <ldc Register b, Constant 64>
		ldc:8 == 404 <or Register b, Register a, Register b>
	push_const:14 == 405 <@push_reg Register b>
		push_reg:10 == 405 <.define registerToPush Register b>
		push_reg:13 == 405 <ldc Register a, Constant 0>
		push_reg:14 == 406 <ldb Register a, Register a>
		push_reg:15 == 407 <stb Register a, Register b>
		push_reg:19 == 408 <ldc Register b, Constant 1>
		push_reg:20 == 409 <add Register a, Register a, Register b>
		push_reg:21 == 410 <ldc Register b, Constant 0>
		push_reg:22 == 411 <stb Register b, Register a>
pong.pa2:161 == 412 <@call_value Constant 902, Constant 1>
	call_value:1 == 412 <@call Constant 902, Constant 1>
		call:11 == 412 <.define functionLabel Constant 902>
		call:12 == 412 <.define argcount Constant 1>
		call:15 == 412 <@push_mem Constant 2>
			push_mem:6 == 412 <.define addr Register b>
			push_mem:7 == 412 <.define value Register b>
			push_mem:9 == 412 <@ldc Register b, Constant 2>
				ldc:1 == 412 <.define writeReg Register b>
				ldc:2 == 412 <.define const Constant 2>
				ldc:4 == 412 <ldc Register a, Constant 0>
				ldc:5 == 413 <ldc Register b, Constant 12>
				ldc:6 == 414 <shl Register a, Register a, Register b>
				ldc:7 == 415 <ldc Register b, Constant 2>
				ldc:8 == 416 <or Register b, Register a, Register b>
			push_mem:10 == 417 <ldb Register b, Register b>
			push_mem:12 == 418 <@push_reg Register b>
				push_reg:10 == 418 <.define registerToPush Register b>
				push_reg:13 == 418 <ldc Register a, Constant 0>
				push_reg:14 == 419 <ldb Register a, Register a>
				push_reg:15 == 420 <stb Register a, Register b>
				push_reg:19 == 421 <ldc Register b, Constant 1>
				push_reg:20 == 422 <add Register a, Register a, Register b>
				push_reg:21 == 423 <ldc Register b, Constant 0>
				push_reg:22 == 424 <stb Register b, Register a>
		call:16 == 425 <@push_mem Constant 3>
			push_mem:6 == 425 <.define addr Register b>
			push_mem:7 == 425 <.define value Register b>
			push_mem:9 == 425 <@ldc Register b, Constant 3>
				ldc:1 == 425 <.define writeReg Register b>
				ldc:2 == 425 <.define const Constant 3>
				ldc:4 == 425 <ldc Register a, Constant 0>
				ldc:5 == 426 <ldc Register b, Constant 12>
				ldc:6 == 427 <shl Register a, Register a, Register b>
				ldc:7 == 428 <ldc Register b, Constant 3>
				ldc:8 == 429 <or Register b, Register a, Register b>
			push_mem:10 == 430 <ldb Register b, Register b>
			push_mem:12 == 431 <@push_reg Register b>
				push_reg:10 == 431 <.define registerToPush Register b>
				push_reg:13 == 431 <ldc Register a, Constant 0>
				push_reg:14 == 432 <ldb Register a, Register a>
				push_reg:15 == 433 <stb Register a, Register b>
				push_reg:19 == 434 <ldc Register b, Constant 1>
				push_reg:20 == 435 <add Register a, Register a, Register b>
				push_reg:21 == 436 <ldc Register b, Constant 0>
				push_reg:22 == 437 <stb Register b, Register a>
		call:19 == 438 <@push_const Constant 462>
			push_const:6 == 438 <.define constantToPush Constant 462>
			push_const:12 == 438 <@ldc Register b, Constant 462>
				ldc:1 == 438 <.define writeReg Register b>
				ldc:2 == 438 <.define const Constant 462>
				ldc:4 == 438 <ldc Register a, Constant 0>
				ldc:5 == 439 <ldc Register b, Constant 12>
				ldc:6 == 440 <shl Register a, Register a, Register b>
				ldc:7 == 441 <ldc Register b, Constant 462>
				ldc:8 == 442 <or Register b, Register a, Register b>
			push_const:14 == 443 <@push_reg Register b>
				push_reg:10 == 443 <.define registerToPush Register b>
				push_reg:13 == 443 <ldc Register a, Constant 0>
				push_reg:14 == 444 <ldb Register a, Register a>
				push_reg:15 == 445 <stb Register a, Register b>
				push_reg:19 == 446 <ldc Register b, Constant 1>
				push_reg:20 == 447 <add Register a, Register a, Register b>
				push_reg:21 == 448 <ldc Register b, Constant 0>
				push_reg:22 == 449 <stb Register b, Register a>
		call:24 == 450 <ldc Register a, Constant 0>
		call:25 == 451 <ldb Register a, Register c>
		call:26 == 452 <ldc Register b, Constant 4>
		call:27 == 453 <sub Register c, Register c, Register b>
		call:28 == 454 <ldc Register a, Constant 2>
		call:29 == 455 <stb Register a, Register c>
		call:39 == 456 <@ldc Register a, Constant 902>
			ldc:1 == 456 <.define writeReg Register a>
			ldc:2 == 456 <.define const Constant 902>
			ldc:4 == 456 <ldc Register a, Constant 0>
			ldc:5 == 457 <ldc Register b, Constant 12>
			ldc:6 == 458 <shl Register a, Register a, Register b>
			ldc:7 == 459 <ldc Register b, Constant 902>
			ldc:8 == 460 <or Register a, Register a, Register b>
		call:40 == 461 <jmp Register a>
		call:45 == 462 <ldc Register d, Constant 2>
		call:48 == 463 <ldb Register d, Register d>
		call:50 == 464 <@pop_mem_v Constant 3>
			pop_mem_v:6 == 464 <.define val Register c>
			pop_mem_v:7 == 464 <.define addr Constant 3>
			pop_mem_v:9 == 464 <@pop_reg Register c>
				pop_reg:10 == 464 <.define registerToLoad Register c>
				pop_reg:13 == 464 <ldc Register a, Constant 0>
				pop_reg:14 == 465 <ldb Register a, Register a>
				pop_reg:15 == 466 <ldc Register b, Constant 1>
				pop_reg:16 == 467 <sub Register a, Register a, Register b>
				pop_reg:17 == 468 <ldc Register b, Constant 0>
				pop_reg:18 == 469 <stb Register b, Register a>
				pop_reg:22 == 470 <ldb Register a, Register c>
			pop_mem_v:11 == 471 <@ldc Register b, Constant 3>
				ldc:1 == 471 <.define writeReg Register b>
				ldc:2 == 471 <.define const Constant 3>
				ldc:4 == 471 <ldc Register a, Constant 0>
				ldc:5 == 472 <ldc Register b, Constant 12>
				ldc:6 == 473 <shl Register a, Register a, Register b>
				ldc:7 == 474 <ldc Register b, Constant 3>
				ldc:8 == 475 <or Register b, Register a, Register b>
			pop_mem_v:12 == 476 <stb Register b, Register c>
		call:51 == 477 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 477 <.define val Register c>
			pop_mem_v:7 == 477 <.define addr Constant 2>
			pop_mem_v:9 == 477 <@pop_reg Register c>
				pop_reg:10 == 477 <.define registerToLoad Register c>
				pop_reg:13 == 477 <ldc Register a, Constant 0>
				pop_reg:14 == 478 <ldb Register a, Register a>
				pop_reg:15 == 479 <ldc Register b, Constant 1>
				pop_reg:16 == 480 <sub Register a, Register a, Register b>
				pop_reg:17 == 481 <ldc Register b, Constant 0>
				pop_reg:18 == 482 <stb Register b, Register a>
				pop_reg:22 == 483 <ldb Register a, Register c>
			pop_mem_v:11 == 484 <@ldc Register b, Constant 2>
				ldc:1 == 484 <.define writeReg Register b>
				ldc:2 == 484 <.define const Constant 2>
				ldc:4 == 484 <ldc Register a, Constant 0>
				ldc:5 == 485 <ldc Register b, Constant 12>
				ldc:6 == 486 <shl Register a, Register a, Register b>
				ldc:7 == 487 <ldc Register b, Constant 2>
				ldc:8 == 488 <or Register b, Register a, Register b>
			pop_mem_v:12 == 489 <stb Register b, Register c>
		call:53 == 490 <ldc Register c, Constant 0>
		call:54 == 491 <stb Register c, Register d>
	call_value:3 == 492 <@push_mem Constant 1>
		push_mem:6 == 492 <.define addr Register b>
		push_mem:7 == 492 <.define value Register b>
		push_mem:9 == 492 <@ldc Register b, Constant 1>
			ldc:1 == 492 <.define writeReg Register b>
			ldc:2 == 492 <.define const Constant 1>
			ldc:4 == 492 <ldc Register a, Constant 0>
			ldc:5 == 493 <ldc Register b, Constant 12>
			ldc:6 == 494 <shl Register a, Register a, Register b>
			ldc:7 == 495 <ldc Register b, Constant 1>
			ldc:8 == 496 <or Register b, Register a, Register b>
		push_mem:10 == 497 <ldb Register b, Register b>
		push_mem:12 == 498 <@push_reg Register b>
			push_reg:10 == 498 <.define registerToPush Register b>
			push_reg:13 == 498 <ldc Register a, Constant 0>
			push_reg:14 == 499 <ldb Register a, Register a>
			push_reg:15 == 500 <stb Register a, Register b>
			push_reg:19 == 501 <ldc Register b, Constant 1>
			push_reg:20 == 502 <add Register a, Register a, Register b>
			push_reg:21 == 503 <ldc Register b, Constant 0>
			push_reg:22 == 504 <stb Register b, Register a>
pong.pa2:163 == 505 <@push_const Constant 128>
	push_const:6 == 505 <.define constantToPush Constant 128>
	push_const:12 == 505 <@ldc Register b, Constant 128>
		ldc:1 == 505 <.define writeReg Register b>
		ldc:2 == 505 <.define const Constant 128>
		ldc:4 == 505 <ldc Register a, Constant 0>
		ldc:5 == 506 <ldc Register b, Constant 12>
		ldc:6 == 507 <shl Register a, Register a, Register b>
		ldc:7 == 508 <ldc Register b, Constant 128>
		ldc:8 == 509 <or Register b, Register a, Register b>
	push_const:14 == 510 <@push_reg Register b>
		push_reg:10 == 510 <.define registerToPush Register b>
		push_reg:13 == 510 <ldc Register a, Constant 0>
		push_reg:14 == 511 <ldb Register a, Register a>
		push_reg:15 == 512 <stb Register a, Register b>
		push_reg:19 == 513 <ldc Register b, Constant 1>
		push_reg:20 == 514 <add Register a, Register a, Register b>
		push_reg:21 == 515 <ldc Register b, Constant 0>
		push_reg:22 == 516 <stb Register b, Register a>
pong.pa2:164 == 517 <@call_value Constant 902, Constant 1>
	call_value:1 == 517 <@call Constant 902, Constant 1>
		call:11 == 517 <.define functionLabel Constant 902>
		call:12 == 517 <.define argcount Constant 1>
		call:15 == 517 <@push_mem Constant 2>
			push_mem:6 == 517 <.define addr Register b>
			push_mem:7 == 517 <.define value Register b>
			push_mem:9 == 517 <@ldc Register b, Constant 2>
				ldc:1 == 517 <.define writeReg Register b>
				ldc:2 == 517 <.define const Constant 2>
				ldc:4 == 517 <ldc Register a, Constant 0>
				ldc:5 == 518 <ldc Register b, Constant 12>
				ldc:6 == 519 <shl Register a, Register a, Register b>
				ldc:7 == 520 <ldc Register b, Constant 2>
				ldc:8 == 521 <or Register b, Register a, Register b>
			push_mem:10 == 522 <ldb Register b, Register b>
			push_mem:12 == 523 <@push_reg Register b>
				push_reg:10 == 523 <.define registerToPush Register b>
				push_reg:13 == 523 <ldc Register a, Constant 0>
				push_reg:14 == 524 <ldb Register a, Register a>
				push_reg:15 == 525 <stb Register a, Register b>
				push_reg:19 == 526 <ldc Register b, Constant 1>
				push_reg:20 == 527 <add Register a, Register a, Register b>
				push_reg:21 == 528 <ldc Register b, Constant 0>
				push_reg:22 == 529 <stb Register b, Register a>
		call:16 == 530 <@push_mem Constant 3>
			push_mem:6 == 530 <.define addr Register b>
			push_mem:7 == 530 <.define value Register b>
			push_mem:9 == 530 <@ldc Register b, Constant 3>
				ldc:1 == 530 <.define writeReg Register b>
				ldc:2 == 530 <.define const Constant 3>
				ldc:4 == 530 <ldc Register a, Constant 0>
				ldc:5 == 531 <ldc Register b, Constant 12>
				ldc:6 == 532 <shl Register a, Register a, Register b>
				ldc:7 == 533 <ldc Register b, Constant 3>
				ldc:8 == 534 <or Register b, Register a, Register b>
			push_mem:10 == 535 <ldb Register b, Register b>
			push_mem:12 == 536 <@push_reg Register b>
				push_reg:10 == 536 <.define registerToPush Register b>
				push_reg:13 == 536 <ldc Register a, Constant 0>
				push_reg:14 == 537 <ldb Register a, Register a>
				push_reg:15 == 538 <stb Register a, Register b>
				push_reg:19 == 539 <ldc Register b, Constant 1>
				push_reg:20 == 540 <add Register a, Register a, Register b>
				push_reg:21 == 541 <ldc Register b, Constant 0>
				push_reg:22 == 542 <stb Register b, Register a>
		call:19 == 543 <@push_const Constant 567>
			push_const:6 == 543 <.define constantToPush Constant 567>
			push_const:12 == 543 <@ldc Register b, Constant 567>
				ldc:1 == 543 <.define writeReg Register b>
				ldc:2 == 543 <.define const Constant 567>
				ldc:4 == 543 <ldc Register a, Constant 0>
				ldc:5 == 544 <ldc Register b, Constant 12>
				ldc:6 == 545 <shl Register a, Register a, Register b>
				ldc:7 == 546 <ldc Register b, Constant 567>
				ldc:8 == 547 <or Register b, Register a, Register b>
			push_const:14 == 548 <@push_reg Register b>
				push_reg:10 == 548 <.define registerToPush Register b>
				push_reg:13 == 548 <ldc Register a, Constant 0>
				push_reg:14 == 549 <ldb Register a, Register a>
				push_reg:15 == 550 <stb Register a, Register b>
				push_reg:19 == 551 <ldc Register b, Constant 1>
				push_reg:20 == 552 <add Register a, Register a, Register b>
				push_reg:21 == 553 <ldc Register b, Constant 0>
				push_reg:22 == 554 <stb Register b, Register a>
		call:24 == 555 <ldc Register a, Constant 0>
		call:25 == 556 <ldb Register a, Register c>
		call:26 == 557 <ldc Register b, Constant 4>
		call:27 == 558 <sub Register c, Register c, Register b>
		call:28 == 559 <ldc Register a, Constant 2>
		call:29 == 560 <stb Register a, Register c>
		call:39 == 561 <@ldc Register a, Constant 902>
			ldc:1 == 561 <.define writeReg Register a>
			ldc:2 == 561 <.define const Constant 902>
			ldc:4 == 561 <ldc Register a, Constant 0>
			ldc:5 == 562 <ldc Register b, Constant 12>
			ldc:6 == 563 <shl Register a, Register a, Register b>
			ldc:7 == 564 <ldc Register b, Constant 902>
			ldc:8 == 565 <or Register a, Register a, Register b>
		call:40 == 566 <jmp Register a>
		call:45 == 567 <ldc Register d, Constant 2>
		call:48 == 568 <ldb Register d, Register d>
		call:50 == 569 <@pop_mem_v Constant 3>
			pop_mem_v:6 == 569 <.define val Register c>
			pop_mem_v:7 == 569 <.define addr Constant 3>
			pop_mem_v:9 == 569 <@pop_reg Register c>
				pop_reg:10 == 569 <.define registerToLoad Register c>
				pop_reg:13 == 569 <ldc Register a, Constant 0>
				pop_reg:14 == 570 <ldb Register a, Register a>
				pop_reg:15 == 571 <ldc Register b, Constant 1>
				pop_reg:16 == 572 <sub Register a, Register a, Register b>
				pop_reg:17 == 573 <ldc Register b, Constant 0>
				pop_reg:18 == 574 <stb Register b, Register a>
				pop_reg:22 == 575 <ldb Register a, Register c>
			pop_mem_v:11 == 576 <@ldc Register b, Constant 3>
				ldc:1 == 576 <.define writeReg Register b>
				ldc:2 == 576 <.define const Constant 3>
				ldc:4 == 576 <ldc Register a, Constant 0>
				ldc:5 == 577 <ldc Register b, Constant 12>
				ldc:6 == 578 <shl Register a, Register a, Register b>
				ldc:7 == 579 <ldc Register b, Constant 3>
				ldc:8 == 580 <or Register b, Register a, Register b>
			pop_mem_v:12 == 581 <stb Register b, Register c>
		call:51 == 582 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 582 <.define val Register c>
			pop_mem_v:7 == 582 <.define addr Constant 2>
			pop_mem_v:9 == 582 <@pop_reg Register c>
				pop_reg:10 == 582 <.define registerToLoad Register c>
				pop_reg:13 == 582 <ldc Register a, Constant 0>
				pop_reg:14 == 583 <ldb Register a, Register a>
				pop_reg:15 == 584 <ldc Register b, Constant 1>
				pop_reg:16 == 585 <sub Register a, Register a, Register b>
				pop_reg:17 == 586 <ldc Register b, Constant 0>
				pop_reg:18 == 587 <stb Register b, Register a>
				pop_reg:22 == 588 <ldb Register a, Register c>
			pop_mem_v:11 == 589 <@ldc Register b, Constant 2>
				ldc:1 == 589 <.define writeReg Register b>
				ldc:2 == 589 <.define const Constant 2>
				ldc:4 == 589 <ldc Register a, Constant 0>
				ldc:5 == 590 <ldc Register b, Constant 12>
				ldc:6 == 591 <shl Register a, Register a, Register b>
				ldc:7 == 592 <ldc Register b, Constant 2>
				ldc:8 == 593 <or Register b, Register a, Register b>
			pop_mem_v:12 == 594 <stb Register b, Register c>
		call:53 == 595 <ldc Register c, Constant 0>
		call:54 == 596 <stb Register c, Register d>
	call_value:3 == 597 <@push_mem Constant 1>
		push_mem:6 == 597 <.define addr Register b>
		push_mem:7 == 597 <.define value Register b>
		push_mem:9 == 597 <@ldc Register b, Constant 1>
			ldc:1 == 597 <.define writeReg Register b>
			ldc:2 == 597 <.define const Constant 1>
			ldc:4 == 597 <ldc Register a, Constant 0>
			ldc:5 == 598 <ldc Register b, Constant 12>
			ldc:6 == 599 <shl Register a, Register a, Register b>
			ldc:7 == 600 <ldc Register b, Constant 1>
			ldc:8 == 601 <or Register b, Register a, Register b>
		push_mem:10 == 602 <ldb Register b, Register b>
		push_mem:12 == 603 <@push_reg Register b>
			push_reg:10 == 603 <.define registerToPush Register b>
			push_reg:13 == 603 <ldc Register a, Constant 0>
			push_reg:14 == 604 <ldb Register a, Register a>
			push_reg:15 == 605 <stb Register a, Register b>
			push_reg:19 == 606 <ldc Register b, Constant 1>
			push_reg:20 == 607 <add Register a, Register a, Register b>
			push_reg:21 == 608 <ldc Register b, Constant 0>
			push_reg:22 == 609 <stb Register b, Register a>
pong.pa2:166 == 610 <@sub >
	sub:3 == 610 <.define lhs Register c>
	sub:4 == 610 <.define rhs Register d>
	sub:5 == 610 <.define result Register d>
	sub:7 == 610 <@pop_reg Register d>
		pop_reg:10 == 610 <.define registerToLoad Register d>
		pop_reg:13 == 610 <ldc Register a, Constant 0>
		pop_reg:14 == 611 <ldb Register a, Register a>
		pop_reg:15 == 612 <ldc Register b, Constant 1>
		pop_reg:16 == 613 <sub Register a, Register a, Register b>
		pop_reg:17 == 614 <ldc Register b, Constant 0>
		pop_reg:18 == 615 <stb Register b, Register a>
		pop_reg:22 == 616 <ldb Register a, Register d>
	sub:8 == 617 <@pop_reg Register c>
		pop_reg:10 == 617 <.define registerToLoad Register c>
		pop_reg:13 == 617 <ldc Register a, Constant 0>
		pop_reg:14 == 618 <ldb Register a, Register a>
		pop_reg:15 == 619 <ldc Register b, Constant 1>
		pop_reg:16 == 620 <sub Register a, Register a, Register b>
		pop_reg:17 == 621 <ldc Register b, Constant 0>
		pop_reg:18 == 622 <stb Register b, Register a>
		pop_reg:22 == 623 <ldb Register a, Register c>
	sub:9 == 624 <sub Register d, Register c, Register d>
	sub:10 == 625 <@push_reg Register d>
		push_reg:10 == 625 <.define registerToPush Register d>
		push_reg:13 == 625 <ldc Register a, Constant 0>
		push_reg:14 == 626 <ldb Register a, Register a>
		push_reg:15 == 627 <stb Register a, Register d>
		push_reg:19 == 628 <ldc Register b, Constant 1>
		push_reg:20 == 629 <add Register a, Register a, Register b>
		push_reg:21 == 630 <ldc Register b, Constant 0>
		push_reg:22 == 631 <stb Register b, Register a>
pong.pa2:167 == 632 <@pop_mem_v Constant 25>
	pop_mem_v:6 == 632 <.define val Register c>
	pop_mem_v:7 == 632 <.define addr Constant 25>
	pop_mem_v:9 == 632 <@pop_reg Register c>
		pop_reg:10 == 632 <.define registerToLoad Register c>
		pop_reg:13 == 632 <ldc Register a, Constant 0>
		pop_reg:14 == 633 <ldb Register a, Register a>
		pop_reg:15 == 634 <ldc Register b, Constant 1>
		pop_reg:16 == 635 <sub Register a, Register a, Register b>
		pop_reg:17 == 636 <ldc Register b, Constant 0>
		pop_reg:18 == 637 <stb Register b, Register a>
		pop_reg:22 == 638 <ldb Register a, Register c>
	pop_mem_v:11 == 639 <@ldc Register b, Constant 25>
		ldc:1 == 639 <.define writeReg Register b>
		ldc:2 == 639 <.define const Constant 25>
		ldc:4 == 639 <ldc Register a, Constant 0>
		ldc:5 == 640 <ldc Register b, Constant 12>
		ldc:6 == 641 <shl Register a, Register a, Register b>
		ldc:7 == 642 <ldc Register b, Constant 25>
		ldc:8 == 643 <or Register b, Register a, Register b>
	pop_mem_v:12 == 644 <stb Register b, Register c>
pong.pa2:170 == 645 <@push_const Constant 1>
	push_const:6 == 645 <.define constantToPush Constant 1>
	push_const:12 == 645 <@ldc Register b, Constant 1>
		ldc:1 == 645 <.define writeReg Register b>
		ldc:2 == 645 <.define const Constant 1>
		ldc:4 == 645 <ldc Register a, Constant 0>
		ldc:5 == 646 <ldc Register b, Constant 12>
		ldc:6 == 647 <shl Register a, Register a, Register b>
		ldc:7 == 648 <ldc Register b, Constant 1>
		ldc:8 == 649 <or Register b, Register a, Register b>
	push_const:14 == 650 <@push_reg Register b>
		push_reg:10 == 650 <.define registerToPush Register b>
		push_reg:13 == 650 <ldc Register a, Constant 0>
		push_reg:14 == 651 <ldb Register a, Register a>
		push_reg:15 == 652 <stb Register a, Register b>
		push_reg:19 == 653 <ldc Register b, Constant 1>
		push_reg:20 == 654 <add Register a, Register a, Register b>
		push_reg:21 == 655 <ldc Register b, Constant 0>
		push_reg:22 == 656 <stb Register b, Register a>
pong.pa2:171 == 657 <@call_value Constant 902, Constant 1>
	call_value:1 == 657 <@call Constant 902, Constant 1>
		call:11 == 657 <.define functionLabel Constant 902>
		call:12 == 657 <.define argcount Constant 1>
		call:15 == 657 <@push_mem Constant 2>
			push_mem:6 == 657 <.define addr Register b>
			push_mem:7 == 657 <.define value Register b>
			push_mem:9 == 657 <@ldc Register b, Constant 2>
				ldc:1 == 657 <.define writeReg Register b>
				ldc:2 == 657 <.define const Constant 2>
				ldc:4 == 657 <ldc Register a, Constant 0>
				ldc:5 == 658 <ldc Register b, Constant 12>
				ldc:6 == 659 <shl Register a, Register a, Register b>
				ldc:7 == 660 <ldc Register b, Constant 2>
				ldc:8 == 661 <or Register b, Register a, Register b>
			push_mem:10 == 662 <ldb Register b, Register b>
			push_mem:12 == 663 <@push_reg Register b>
				push_reg:10 == 663 <.define registerToPush Register b>
				push_reg:13 == 663 <ldc Register a, Constant 0>
				push_reg:14 == 664 <ldb Register a, Register a>
				push_reg:15 == 665 <stb Register a, Register b>
				push_reg:19 == 666 <ldc Register b, Constant 1>
				push_reg:20 == 667 <add Register a, Register a, Register b>
				push_reg:21 == 668 <ldc Register b, Constant 0>
				push_reg:22 == 669 <stb Register b, Register a>
		call:16 == 670 <@push_mem Constant 3>
			push_mem:6 == 670 <.define addr Register b>
			push_mem:7 == 670 <.define value Register b>
			push_mem:9 == 670 <@ldc Register b, Constant 3>
				ldc:1 == 670 <.define writeReg Register b>
				ldc:2 == 670 <.define const Constant 3>
				ldc:4 == 670 <ldc Register a, Constant 0>
				ldc:5 == 671 <ldc Register b, Constant 12>
				ldc:6 == 672 <shl Register a, Register a, Register b>
				ldc:7 == 673 <ldc Register b, Constant 3>
				ldc:8 == 674 <or Register b, Register a, Register b>
			push_mem:10 == 675 <ldb Register b, Register b>
			push_mem:12 == 676 <@push_reg Register b>
				push_reg:10 == 676 <.define registerToPush Register b>
				push_reg:13 == 676 <ldc Register a, Constant 0>
				push_reg:14 == 677 <ldb Register a, Register a>
				push_reg:15 == 678 <stb Register a, Register b>
				push_reg:19 == 679 <ldc Register b, Constant 1>
				push_reg:20 == 680 <add Register a, Register a, Register b>
				push_reg:21 == 681 <ldc Register b, Constant 0>
				push_reg:22 == 682 <stb Register b, Register a>
		call:19 == 683 <@push_const Constant 707>
			push_const:6 == 683 <.define constantToPush Constant 707>
			push_const:12 == 683 <@ldc Register b, Constant 707>
				ldc:1 == 683 <.define writeReg Register b>
				ldc:2 == 683 <.define const Constant 707>
				ldc:4 == 683 <ldc Register a, Constant 0>
				ldc:5 == 684 <ldc Register b, Constant 12>
				ldc:6 == 685 <shl Register a, Register a, Register b>
				ldc:7 == 686 <ldc Register b, Constant 707>
				ldc:8 == 687 <or Register b, Register a, Register b>
			push_const:14 == 688 <@push_reg Register b>
				push_reg:10 == 688 <.define registerToPush Register b>
				push_reg:13 == 688 <ldc Register a, Constant 0>
				push_reg:14 == 689 <ldb Register a, Register a>
				push_reg:15 == 690 <stb Register a, Register b>
				push_reg:19 == 691 <ldc Register b, Constant 1>
				push_reg:20 == 692 <add Register a, Register a, Register b>
				push_reg:21 == 693 <ldc Register b, Constant 0>
				push_reg:22 == 694 <stb Register b, Register a>
		call:24 == 695 <ldc Register a, Constant 0>
		call:25 == 696 <ldb Register a, Register c>
		call:26 == 697 <ldc Register b, Constant 4>
		call:27 == 698 <sub Register c, Register c, Register b>
		call:28 == 699 <ldc Register a, Constant 2>
		call:29 == 700 <stb Register a, Register c>
		call:39 == 701 <@ldc Register a, Constant 902>
			ldc:1 == 701 <.define writeReg Register a>
			ldc:2 == 701 <.define const Constant 902>
			ldc:4 == 701 <ldc Register a, Constant 0>
			ldc:5 == 702 <ldc Register b, Constant 12>
			ldc:6 == 703 <shl Register a, Register a, Register b>
			ldc:7 == 704 <ldc Register b, Constant 902>
			ldc:8 == 705 <or Register a, Register a, Register b>
		call:40 == 706 <jmp Register a>
		call:45 == 707 <ldc Register d, Constant 2>
		call:48 == 708 <ldb Register d, Register d>
		call:50 == 709 <@pop_mem_v Constant 3>
			pop_mem_v:6 == 709 <.define val Register c>
			pop_mem_v:7 == 709 <.define addr Constant 3>
			pop_mem_v:9 == 709 <@pop_reg Register c>
				pop_reg:10 == 709 <.define registerToLoad Register c>
				pop_reg:13 == 709 <ldc Register a, Constant 0>
				pop_reg:14 == 710 <ldb Register a, Register a>
				pop_reg:15 == 711 <ldc Register b, Constant 1>
				pop_reg:16 == 712 <sub Register a, Register a, Register b>
				pop_reg:17 == 713 <ldc Register b, Constant 0>
				pop_reg:18 == 714 <stb Register b, Register a>
				pop_reg:22 == 715 <ldb Register a, Register c>
			pop_mem_v:11 == 716 <@ldc Register b, Constant 3>
				ldc:1 == 716 <.define writeReg Register b>
				ldc:2 == 716 <.define const Constant 3>
				ldc:4 == 716 <ldc Register a, Constant 0>
				ldc:5 == 717 <ldc Register b, Constant 12>
				ldc:6 == 718 <shl Register a, Register a, Register b>
				ldc:7 == 719 <ldc Register b, Constant 3>
				ldc:8 == 720 <or Register b, Register a, Register b>
			pop_mem_v:12 == 721 <stb Register b, Register c>
		call:51 == 722 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 722 <.define val Register c>
			pop_mem_v:7 == 722 <.define addr Constant 2>
			pop_mem_v:9 == 722 <@pop_reg Register c>
				pop_reg:10 == 722 <.define registerToLoad Register c>
				pop_reg:13 == 722 <ldc Register a, Constant 0>
				pop_reg:14 == 723 <ldb Register a, Register a>
				pop_reg:15 == 724 <ldc Register b, Constant 1>
				pop_reg:16 == 725 <sub Register a, Register a, Register b>
				pop_reg:17 == 726 <ldc Register b, Constant 0>
				pop_reg:18 == 727 <stb Register b, Register a>
				pop_reg:22 == 728 <ldb Register a, Register c>
			pop_mem_v:11 == 729 <@ldc Register b, Constant 2>
				ldc:1 == 729 <.define writeReg Register b>
				ldc:2 == 729 <.define const Constant 2>
				ldc:4 == 729 <ldc Register a, Constant 0>
				ldc:5 == 730 <ldc Register b, Constant 12>
				ldc:6 == 731 <shl Register a, Register a, Register b>
				ldc:7 == 732 <ldc Register b, Constant 2>
				ldc:8 == 733 <or Register b, Register a, Register b>
			pop_mem_v:12 == 734 <stb Register b, Register c>
		call:53 == 735 <ldc Register c, Constant 0>
		call:54 == 736 <stb Register c, Register d>
	call_value:3 == 737 <@push_mem Constant 1>
		push_mem:6 == 737 <.define addr Register b>
		push_mem:7 == 737 <.define value Register b>
		push_mem:9 == 737 <@ldc Register b, Constant 1>
			ldc:1 == 737 <.define writeReg Register b>
			ldc:2 == 737 <.define const Constant 1>
			ldc:4 == 737 <ldc Register a, Constant 0>
			ldc:5 == 738 <ldc Register b, Constant 12>
			ldc:6 == 739 <shl Register a, Register a, Register b>
			ldc:7 == 740 <ldc Register b, Constant 1>
			ldc:8 == 741 <or Register b, Register a, Register b>
		push_mem:10 == 742 <ldb Register b, Register b>
		push_mem:12 == 743 <@push_reg Register b>
			push_reg:10 == 743 <.define registerToPush Register b>
			push_reg:13 == 743 <ldc Register a, Constant 0>
			push_reg:14 == 744 <ldb Register a, Register a>
			push_reg:15 == 745 <stb Register a, Register b>
			push_reg:19 == 746 <ldc Register b, Constant 1>
			push_reg:20 == 747 <add Register a, Register a, Register b>
			push_reg:21 == 748 <ldc Register b, Constant 0>
			push_reg:22 == 749 <stb Register b, Register a>
pong.pa2:173 == 750 <@push_const Constant 8>
	push_const:6 == 750 <.define constantToPush Constant 8>
	push_const:12 == 750 <@ldc Register b, Constant 8>
		ldc:1 == 750 <.define writeReg Register b>
		ldc:2 == 750 <.define const Constant 8>
		ldc:4 == 750 <ldc Register a, Constant 0>
		ldc:5 == 751 <ldc Register b, Constant 12>
		ldc:6 == 752 <shl Register a, Register a, Register b>
		ldc:7 == 753 <ldc Register b, Constant 8>
		ldc:8 == 754 <or Register b, Register a, Register b>
	push_const:14 == 755 <@push_reg Register b>
		push_reg:10 == 755 <.define registerToPush Register b>
		push_reg:13 == 755 <ldc Register a, Constant 0>
		push_reg:14 == 756 <ldb Register a, Register a>
		push_reg:15 == 757 <stb Register a, Register b>
		push_reg:19 == 758 <ldc Register b, Constant 1>
		push_reg:20 == 759 <add Register a, Register a, Register b>
		push_reg:21 == 760 <ldc Register b, Constant 0>
		push_reg:22 == 761 <stb Register b, Register a>
pong.pa2:174 == 762 <@call_value Constant 902, Constant 1>
	call_value:1 == 762 <@call Constant 902, Constant 1>
		call:11 == 762 <.define functionLabel Constant 902>
		call:12 == 762 <.define argcount Constant 1>
		call:15 == 762 <@push_mem Constant 2>
			push_mem:6 == 762 <.define addr Register b>
			push_mem:7 == 762 <.define value Register b>
			push_mem:9 == 762 <@ldc Register b, Constant 2>
				ldc:1 == 762 <.define writeReg Register b>
				ldc:2 == 762 <.define const Constant 2>
				ldc:4 == 762 <ldc Register a, Constant 0>
				ldc:5 == 763 <ldc Register b, Constant 12>
				ldc:6 == 764 <shl Register a, Register a, Register b>
				ldc:7 == 765 <ldc Register b, Constant 2>
				ldc:8 == 766 <or Register b, Register a, Register b>
			push_mem:10 == 767 <ldb Register b, Register b>
			push_mem:12 == 768 <@push_reg Register b>
				push_reg:10 == 768 <.define registerToPush Register b>
				push_reg:13 == 768 <ldc Register a, Constant 0>
				push_reg:14 == 769 <ldb Register a, Register a>
				push_reg:15 == 770 <stb Register a, Register b>
				push_reg:19 == 771 <ldc Register b, Constant 1>
				push_reg:20 == 772 <add Register a, Register a, Register b>
				push_reg:21 == 773 <ldc Register b, Constant 0>
				push_reg:22 == 774 <stb Register b, Register a>
		call:16 == 775 <@push_mem Constant 3>
			push_mem:6 == 775 <.define addr Register b>
			push_mem:7 == 775 <.define value Register b>
			push_mem:9 == 775 <@ldc Register b, Constant 3>
				ldc:1 == 775 <.define writeReg Register b>
				ldc:2 == 775 <.define const Constant 3>
				ldc:4 == 775 <ldc Register a, Constant 0>
				ldc:5 == 776 <ldc Register b, Constant 12>
				ldc:6 == 777 <shl Register a, Register a, Register b>
				ldc:7 == 778 <ldc Register b, Constant 3>
				ldc:8 == 779 <or Register b, Register a, Register b>
			push_mem:10 == 780 <ldb Register b, Register b>
			push_mem:12 == 781 <@push_reg Register b>
				push_reg:10 == 781 <.define registerToPush Register b>
				push_reg:13 == 781 <ldc Register a, Constant 0>
				push_reg:14 == 782 <ldb Register a, Register a>
				push_reg:15 == 783 <stb Register a, Register b>
				push_reg:19 == 784 <ldc Register b, Constant 1>
				push_reg:20 == 785 <add Register a, Register a, Register b>
				push_reg:21 == 786 <ldc Register b, Constant 0>
				push_reg:22 == 787 <stb Register b, Register a>
		call:19 == 788 <@push_const Constant 812>
			push_const:6 == 788 <.define constantToPush Constant 812>
			push_const:12 == 788 <@ldc Register b, Constant 812>
				ldc:1 == 788 <.define writeReg Register b>
				ldc:2 == 788 <.define const Constant 812>
				ldc:4 == 788 <ldc Register a, Constant 0>
				ldc:5 == 789 <ldc Register b, Constant 12>
				ldc:6 == 790 <shl Register a, Register a, Register b>
				ldc:7 == 791 <ldc Register b, Constant 812>
				ldc:8 == 792 <or Register b, Register a, Register b>
			push_const:14 == 793 <@push_reg Register b>
				push_reg:10 == 793 <.define registerToPush Register b>
				push_reg:13 == 793 <ldc Register a, Constant 0>
				push_reg:14 == 794 <ldb Register a, Register a>
				push_reg:15 == 795 <stb Register a, Register b>
				push_reg:19 == 796 <ldc Register b, Constant 1>
				push_reg:20 == 797 <add Register a, Register a, Register b>
				push_reg:21 == 798 <ldc Register b, Constant 0>
				push_reg:22 == 799 <stb Register b, Register a>
		call:24 == 800 <ldc Register a, Constant 0>
		call:25 == 801 <ldb Register a, Register c>
		call:26 == 802 <ldc Register b, Constant 4>
		call:27 == 803 <sub Register c, Register c, Register b>
		call:28 == 804 <ldc Register a, Constant 2>
		call:29 == 805 <stb Register a, Register c>
		call:39 == 806 <@ldc Register a, Constant 902>
			ldc:1 == 806 <.define writeReg Register a>
			ldc:2 == 806 <.define const Constant 902>
			ldc:4 == 806 <ldc Register a, Constant 0>
			ldc:5 == 807 <ldc Register b, Constant 12>
			ldc:6 == 808 <shl Register a, Register a, Register b>
			ldc:7 == 809 <ldc Register b, Constant 902>
			ldc:8 == 810 <or Register a, Register a, Register b>
		call:40 == 811 <jmp Register a>
		call:45 == 812 <ldc Register d, Constant 2>
		call:48 == 813 <ldb Register d, Register d>
		call:50 == 814 <@pop_mem_v Constant 3>
			pop_mem_v:6 == 814 <.define val Register c>
			pop_mem_v:7 == 814 <.define addr Constant 3>
			pop_mem_v:9 == 814 <@pop_reg Register c>
				pop_reg:10 == 814 <.define registerToLoad Register c>
				pop_reg:13 == 814 <ldc Register a, Constant 0>
				pop_reg:14 == 815 <ldb Register a, Register a>
				pop_reg:15 == 816 <ldc Register b, Constant 1>
				pop_reg:16 == 817 <sub Register a, Register a, Register b>
				pop_reg:17 == 818 <ldc Register b, Constant 0>
				pop_reg:18 == 819 <stb Register b, Register a>
				pop_reg:22 == 820 <ldb Register a, Register c>
			pop_mem_v:11 == 821 <@ldc Register b, Constant 3>
				ldc:1 == 821 <.define writeReg Register b>
				ldc:2 == 821 <.define const Constant 3>
				ldc:4 == 821 <ldc Register a, Constant 0>
				ldc:5 == 822 <ldc Register b, Constant 12>
				ldc:6 == 823 <shl Register a, Register a, Register b>
				ldc:7 == 824 <ldc Register b, Constant 3>
				ldc:8 == 825 <or Register b, Register a, Register b>
			pop_mem_v:12 == 826 <stb Register b, Register c>
		call:51 == 827 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 827 <.define val Register c>
			pop_mem_v:7 == 827 <.define addr Constant 2>
			pop_mem_v:9 == 827 <@pop_reg Register c>
				pop_reg:10 == 827 <.define registerToLoad Register c>
				pop_reg:13 == 827 <ldc Register a, Constant 0>
				pop_reg:14 == 828 <ldb Register a, Register a>
				pop_reg:15 == 829 <ldc Register b, Constant 1>
				pop_reg:16 == 830 <sub Register a, Register a, Register b>
				pop_reg:17 == 831 <ldc Register b, Constant 0>
				pop_reg:18 == 832 <stb Register b, Register a>
				pop_reg:22 == 833 <ldb Register a, Register c>
			pop_mem_v:11 == 834 <@ldc Register b, Constant 2>
				ldc:1 == 834 <.define writeReg Register b>
				ldc:2 == 834 <.define const Constant 2>
				ldc:4 == 834 <ldc Register a, Constant 0>
				ldc:5 == 835 <ldc Register b, Constant 12>
				ldc:6 == 836 <shl Register a, Register a, Register b>
				ldc:7 == 837 <ldc Register b, Constant 2>
				ldc:8 == 838 <or Register b, Register a, Register b>
			pop_mem_v:12 == 839 <stb Register b, Register c>
		call:53 == 840 <ldc Register c, Constant 0>
		call:54 == 841 <stb Register c, Register d>
	call_value:3 == 842 <@push_mem Constant 1>
		push_mem:6 == 842 <.define addr Register b>
		push_mem:7 == 842 <.define value Register b>
		push_mem:9 == 842 <@ldc Register b, Constant 1>
			ldc:1 == 842 <.define writeReg Register b>
			ldc:2 == 842 <.define const Constant 1>
			ldc:4 == 842 <ldc Register a, Constant 0>
			ldc:5 == 843 <ldc Register b, Constant 12>
			ldc:6 == 844 <shl Register a, Register a, Register b>
			ldc:7 == 845 <ldc Register b, Constant 1>
			ldc:8 == 846 <or Register b, Register a, Register b>
		push_mem:10 == 847 <ldb Register b, Register b>
		push_mem:12 == 848 <@push_reg Register b>
			push_reg:10 == 848 <.define registerToPush Register b>
			push_reg:13 == 848 <ldc Register a, Constant 0>
			push_reg:14 == 849 <ldb Register a, Register a>
			push_reg:15 == 850 <stb Register a, Register b>
			push_reg:19 == 851 <ldc Register b, Constant 1>
			push_reg:20 == 852 <add Register a, Register a, Register b>
			push_reg:21 == 853 <ldc Register b, Constant 0>
			push_reg:22 == 854 <stb Register b, Register a>
pong.pa2:176 == 855 <@sub >
	sub:3 == 855 <.define lhs Register c>
	sub:4 == 855 <.define rhs Register d>
	sub:5 == 855 <.define result Register d>
	sub:7 == 855 <@pop_reg Register d>
		pop_reg:10 == 855 <.define registerToLoad Register d>
		pop_reg:13 == 855 <ldc Register a, Constant 0>
		pop_reg:14 == 856 <ldb Register a, Register a>
		pop_reg:15 == 857 <ldc Register b, Constant 1>
		pop_reg:16 == 858 <sub Register a, Register a, Register b>
		pop_reg:17 == 859 <ldc Register b, Constant 0>
		pop_reg:18 == 860 <stb Register b, Register a>
		pop_reg:22 == 861 <ldb Register a, Register d>
	sub:8 == 862 <@pop_reg Register c>
		pop_reg:10 == 862 <.define registerToLoad Register c>
		pop_reg:13 == 862 <ldc Register a, Constant 0>
		pop_reg:14 == 863 <ldb Register a, Register a>
		pop_reg:15 == 864 <ldc Register b, Constant 1>
		pop_reg:16 == 865 <sub Register a, Register a, Register b>
		pop_reg:17 == 866 <ldc Register b, Constant 0>
		pop_reg:18 == 867 <stb Register b, Register a>
		pop_reg:22 == 868 <ldb Register a, Register c>
	sub:9 == 869 <sub Register d, Register c, Register d>
	sub:10 == 870 <@push_reg Register d>
		push_reg:10 == 870 <.define registerToPush Register d>
		push_reg:13 == 870 <ldc Register a, Constant 0>
		push_reg:14 == 871 <ldb Register a, Register a>
		push_reg:15 == 872 <stb Register a, Register d>
		push_reg:19 == 873 <ldc Register b, Constant 1>
		push_reg:20 == 874 <add Register a, Register a, Register b>
		push_reg:21 == 875 <ldc Register b, Constant 0>
		push_reg:22 == 876 <stb Register b, Register a>
pong.pa2:177 == 877 <@pop_mem_v Constant 26>
	pop_mem_v:6 == 877 <.define val Register c>
	pop_mem_v:7 == 877 <.define addr Constant 26>
	pop_mem_v:9 == 877 <@pop_reg Register c>
		pop_reg:10 == 877 <.define registerToLoad Register c>
		pop_reg:13 == 877 <ldc Register a, Constant 0>
		pop_reg:14 == 878 <ldb Register a, Register a>
		pop_reg:15 == 879 <ldc Register b, Constant 1>
		pop_reg:16 == 880 <sub Register a, Register a, Register b>
		pop_reg:17 == 881 <ldc Register b, Constant 0>
		pop_reg:18 == 882 <stb Register b, Register a>
		pop_reg:22 == 883 <ldb Register a, Register c>
	pop_mem_v:11 == 884 <@ldc Register b, Constant 26>
		ldc:1 == 884 <.define writeReg Register b>
		ldc:2 == 884 <.define const Constant 26>
		ldc:4 == 884 <ldc Register a, Constant 0>
		ldc:5 == 885 <ldc Register b, Constant 12>
		ldc:6 == 886 <shl Register a, Register a, Register b>
		ldc:7 == 887 <ldc Register b, Constant 26>
		ldc:8 == 888 <or Register b, Register a, Register b>
	pop_mem_v:12 == 889 <stb Register b, Register c>
pong.pa2:180 == 890 <@return >
	return:2 == 890 <ldc Register b, Constant 3>
	return:3 == 891 <ldb Register b, Register b>
	return:4 == 892 <ldc Register a, Constant 0>
	return:5 == 893 <stb Register a, Register b>
	return:7 == 894 <@pop_reg Register d>
		pop_reg:10 == 894 <.define registerToLoad Register d>
		pop_reg:13 == 894 <ldc Register a, Constant 0>
		pop_reg:14 == 895 <ldb Register a, Register a>
		pop_reg:15 == 896 <ldc Register b, Constant 1>
		pop_reg:16 == 897 <sub Register a, Register a, Register b>
		pop_reg:17 == 898 <ldc Register b, Constant 0>
		pop_reg:18 == 899 <stb Register b, Register a>
		pop_reg:22 == 900 <ldb Register a, Register d>
	return:9 == 901 <jump Register d>
pong.pa2:188 == 902 <@function Constant 0>
	function:19 == 902 <.define loccount Constant 0>
	function:22 == 902 <ldc Register a, Constant 0>
	function:23 == 903 <ldb Register a, Register a>
	function:24 == 904 <ldc Register b, Constant 3>
	function:25 == 905 <stb Register b, Register a>
	function:28 == 906 <ldc Register a, Constant 0>
	function:29 == 907 <ldb Register a, Register b>
	function:30 == 908 <ldc Register c, Constant 0>
	function:31 == 909 <add Register b, Register b, Register c>
	function:32 == 910 <stb Register a, Register b>
pong.pa2:194 == 911 <@push_mem Constant 24576>
	push_mem:6 == 911 <.define addr Register b>
	push_mem:7 == 911 <.define value Register b>
	push_mem:9 == 911 <@ldc Register b, Constant 24576>
		ldc:1 == 911 <.define writeReg Register b>
		ldc:2 == 911 <.define const Constant 24576>
		ldc:4 == 911 <ldc Register a, Constant 6>
		ldc:5 == 912 <ldc Register b, Constant 12>
		ldc:6 == 913 <shl Register a, Register a, Register b>
		ldc:7 == 914 <ldc Register b, Constant 0>
		ldc:8 == 915 <or Register b, Register a, Register b>
	push_mem:10 == 916 <ldb Register b, Register b>
	push_mem:12 == 917 <@push_reg Register b>
		push_reg:10 == 917 <.define registerToPush Register b>
		push_reg:13 == 917 <ldc Register a, Constant 0>
		push_reg:14 == 918 <ldb Register a, Register a>
		push_reg:15 == 919 <stb Register a, Register b>
		push_reg:19 == 920 <ldc Register b, Constant 1>
		push_reg:20 == 921 <add Register a, Register a, Register b>
		push_reg:21 == 922 <ldc Register b, Constant 0>
		push_reg:22 == 923 <stb Register b, Register a>
pong.pa2:195 == 924 <@push_arg Constant 0>
	push_arg:3 == 924 <.define slot Constant 0>
	push_arg:6 == 924 <ldc Register a, Constant 2>
	push_arg:7 == 925 <ldb Register a, Register a>
	push_arg:8 == 926 <ldc Register b, Constant 0>
	push_arg:9 == 927 <add Register a, Register a, Register b>
	push_arg:10 == 928 <ldb Register a, Register b>
	push_arg:12 == 929 <@push_reg Register b>
		push_reg:10 == 929 <.define registerToPush Register b>
		push_reg:13 == 929 <ldc Register a, Constant 0>
		push_reg:14 == 930 <ldb Register a, Register a>
		push_reg:15 == 931 <stb Register a, Register b>
		push_reg:19 == 932 <ldc Register b, Constant 1>
		push_reg:20 == 933 <add Register a, Register a, Register b>
		push_reg:21 == 934 <ldc Register b, Constant 0>
		push_reg:22 == 935 <stb Register b, Register a>
pong.pa2:196 == 936 <@and >
	and:3 == 936 <.define lhs Register c>
	and:4 == 936 <.define rhs Register d>
	and:5 == 936 <.define result Register d>
	and:7 == 936 <@pop_reg Register d>
		pop_reg:10 == 936 <.define registerToLoad Register d>
		pop_reg:13 == 936 <ldc Register a, Constant 0>
		pop_reg:14 == 937 <ldb Register a, Register a>
		pop_reg:15 == 938 <ldc Register b, Constant 1>
		pop_reg:16 == 939 <sub Register a, Register a, Register b>
		pop_reg:17 == 940 <ldc Register b, Constant 0>
		pop_reg:18 == 941 <stb Register b, Register a>
		pop_reg:22 == 942 <ldb Register a, Register d>
	and:8 == 943 <@pop_reg Register c>
		pop_reg:10 == 943 <.define registerToLoad Register c>
		pop_reg:13 == 943 <ldc Register a, Constant 0>
		pop_reg:14 == 944 <ldb Register a, Register a>
		pop_reg:15 == 945 <ldc Register b, Constant 1>
		pop_reg:16 == 946 <sub Register a, Register a, Register b>
		pop_reg:17 == 947 <ldc Register b, Constant 0>
		pop_reg:18 == 948 <stb Register b, Register a>
		pop_reg:22 == 949 <ldb Register a, Register c>
	and:9 == 950 <and Register d, Register c, Register d>
	and:10 == 951 <@push_reg Register d>
		push_reg:10 == 951 <.define registerToPush Register d>
		push_reg:13 == 951 <ldc Register a, Constant 0>
		push_reg:14 == 952 <ldb Register a, Register a>
		push_reg:15 == 953 <stb Register a, Register d>
		push_reg:19 == 954 <ldc Register b, Constant 1>
		push_reg:20 == 955 <add Register a, Register a, Register b>
		push_reg:21 == 956 <ldc Register b, Constant 0>
		push_reg:22 == 957 <stb Register b, Register a>
pong.pa2:197 == 958 <@push_const Constant 0>
	push_const:6 == 958 <.define constantToPush Constant 0>
	push_const:12 == 958 <@ldc Register b, Constant 0>
		ldc:1 == 958 <.define writeReg Register b>
		ldc:2 == 958 <.define const Constant 0>
		ldc:4 == 958 <ldc Register a, Constant 0>
		ldc:5 == 959 <ldc Register b, Constant 12>
		ldc:6 == 960 <shl Register a, Register a, Register b>
		ldc:7 == 961 <ldc Register b, Constant 0>
		ldc:8 == 962 <or Register b, Register a, Register b>
	push_const:14 == 963 <@push_reg Register b>
		push_reg:10 == 963 <.define registerToPush Register b>
		push_reg:13 == 963 <ldc Register a, Constant 0>
		push_reg:14 == 964 <ldb Register a, Register a>
		push_reg:15 == 965 <stb Register a, Register b>
		push_reg:19 == 966 <ldc Register b, Constant 1>
		push_reg:20 == 967 <add Register a, Register a, Register b>
		push_reg:21 == 968 <ldc Register b, Constant 0>
		push_reg:22 == 969 <stb Register b, Register a>
pong.pa2:198 == 970 <@gt >
	gt:1 == 970 <@pop_reg Register d>
		pop_reg:10 == 970 <.define registerToLoad Register d>
		pop_reg:13 == 970 <ldc Register a, Constant 0>
		pop_reg:14 == 971 <ldb Register a, Register a>
		pop_reg:15 == 972 <ldc Register b, Constant 1>
		pop_reg:16 == 973 <sub Register a, Register a, Register b>
		pop_reg:17 == 974 <ldc Register b, Constant 0>
		pop_reg:18 == 975 <stb Register b, Register a>
		pop_reg:22 == 976 <ldb Register a, Register d>
	gt:2 == 977 <@pop_reg Register c>
		pop_reg:10 == 977 <.define registerToLoad Register c>
		pop_reg:13 == 977 <ldc Register a, Constant 0>
		pop_reg:14 == 978 <ldb Register a, Register a>
		pop_reg:15 == 979 <ldc Register b, Constant 1>
		pop_reg:16 == 980 <sub Register a, Register a, Register b>
		pop_reg:17 == 981 <ldc Register b, Constant 0>
		pop_reg:18 == 982 <stb Register b, Register a>
		pop_reg:22 == 983 <ldb Register a, Register c>
	gt:3 == 984 <cgt Register b, Register c, Register d>
	gt:4 == 985 <@push_reg Register b>
		push_reg:10 == 985 <.define registerToPush Register b>
		push_reg:13 == 985 <ldc Register a, Constant 0>
		push_reg:14 == 986 <ldb Register a, Register a>
		push_reg:15 == 987 <stb Register a, Register b>
		push_reg:19 == 988 <ldc Register b, Constant 1>
		push_reg:20 == 989 <add Register a, Register a, Register b>
		push_reg:21 == 990 <ldc Register b, Constant 0>
		push_reg:22 == 991 <stb Register b, Register a>
pong.pa2:199 == 992 <@push_const Constant 1>
	push_const:6 == 992 <.define constantToPush Constant 1>
	push_const:12 == 992 <@ldc Register b, Constant 1>
		ldc:1 == 992 <.define writeReg Register b>
		ldc:2 == 992 <.define const Constant 1>
		ldc:4 == 992 <ldc Register a, Constant 0>
		ldc:5 == 993 <ldc Register b, Constant 12>
		ldc:6 == 994 <shl Register a, Register a, Register b>
		ldc:7 == 995 <ldc Register b, Constant 1>
		ldc:8 == 996 <or Register b, Register a, Register b>
	push_const:14 == 997 <@push_reg Register b>
		push_reg:10 == 997 <.define registerToPush Register b>
		push_reg:13 == 997 <ldc Register a, Constant 0>
		push_reg:14 == 998 <ldb Register a, Register a>
		push_reg:15 == 999 <stb Register a, Register b>
		push_reg:19 == 1000 <ldc Register b, Constant 1>
		push_reg:20 == 1001 <add Register a, Register a, Register b>
		push_reg:21 == 1002 <ldc Register b, Constant 0>
		push_reg:22 == 1003 <stb Register b, Register a>
pong.pa2:200 == 1004 <@and >
	and:3 == 1004 <.define lhs Register c>
	and:4 == 1004 <.define rhs Register d>
	and:5 == 1004 <.define result Register d>
	and:7 == 1004 <@pop_reg Register d>
		pop_reg:10 == 1004 <.define registerToLoad Register d>
		pop_reg:13 == 1004 <ldc Register a, Constant 0>
		pop_reg:14 == 1005 <ldb Register a, Register a>
		pop_reg:15 == 1006 <ldc Register b, Constant 1>
		pop_reg:16 == 1007 <sub Register a, Register a, Register b>
		pop_reg:17 == 1008 <ldc Register b, Constant 0>
		pop_reg:18 == 1009 <stb Register b, Register a>
		pop_reg:22 == 1010 <ldb Register a, Register d>
	and:8 == 1011 <@pop_reg Register c>
		pop_reg:10 == 1011 <.define registerToLoad Register c>
		pop_reg:13 == 1011 <ldc Register a, Constant 0>
		pop_reg:14 == 1012 <ldb Register a, Register a>
		pop_reg:15 == 1013 <ldc Register b, Constant 1>
		pop_reg:16 == 1014 <sub Register a, Register a, Register b>
		pop_reg:17 == 1015 <ldc Register b, Constant 0>
		pop_reg:18 == 1016 <stb Register b, Register a>
		pop_reg:22 == 1017 <ldb Register a, Register c>
	and:9 == 1018 <and Register d, Register c, Register d>
	and:10 == 1019 <@push_reg Register d>
		push_reg:10 == 1019 <.define registerToPush Register d>
		push_reg:13 == 1019 <ldc Register a, Constant 0>
		push_reg:14 == 1020 <ldb Register a, Register a>
		push_reg:15 == 1021 <stb Register a, Register d>
		push_reg:19 == 1022 <ldc Register b, Constant 1>
		push_reg:20 == 1023 <add Register a, Register a, Register b>
		push_reg:21 == 1024 <ldc Register b, Constant 0>
		push_reg:22 == 1025 <stb Register b, Register a>
pong.pa2:202 == 1026 <@return_value >
	return_value:4 == 1026 <@pop_mem_v Constant 1>
		pop_mem_v:6 == 1026 <.define val Register c>
		pop_mem_v:7 == 1026 <.define addr Constant 1>
		pop_mem_v:9 == 1026 <@pop_reg Register c>
			pop_reg:10 == 1026 <.define registerToLoad Register c>
			pop_reg:13 == 1026 <ldc Register a, Constant 0>
			pop_reg:14 == 1027 <ldb Register a, Register a>
			pop_reg:15 == 1028 <ldc Register b, Constant 1>
			pop_reg:16 == 1029 <sub Register a, Register a, Register b>
			pop_reg:17 == 1030 <ldc Register b, Constant 0>
			pop_reg:18 == 1031 <stb Register b, Register a>
			pop_reg:22 == 1032 <ldb Register a, Register c>
		pop_mem_v:11 == 1033 <@ldc Register b, Constant 1>
			ldc:1 == 1033 <.define writeReg Register b>
			ldc:2 == 1033 <.define const Constant 1>
			ldc:4 == 1033 <ldc Register a, Constant 0>
			ldc:5 == 1034 <ldc Register b, Constant 12>
			ldc:6 == 1035 <shl Register a, Register a, Register b>
			ldc:7 == 1036 <ldc Register b, Constant 1>
			ldc:8 == 1037 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1038 <stb Register b, Register c>
	return_value:6 == 1039 <@return >
		return:2 == 1039 <ldc Register b, Constant 3>
		return:3 == 1040 <ldb Register b, Register b>
		return:4 == 1041 <ldc Register a, Constant 0>
		return:5 == 1042 <stb Register a, Register b>
		return:7 == 1043 <@pop_reg Register d>
			pop_reg:10 == 1043 <.define registerToLoad Register d>
			pop_reg:13 == 1043 <ldc Register a, Constant 0>
			pop_reg:14 == 1044 <ldb Register a, Register a>
			pop_reg:15 == 1045 <ldc Register b, Constant 1>
			pop_reg:16 == 1046 <sub Register a, Register a, Register b>
			pop_reg:17 == 1047 <ldc Register b, Constant 0>
			pop_reg:18 == 1048 <stb Register b, Register a>
			pop_reg:22 == 1049 <ldb Register a, Register d>
		return:9 == 1050 <jump Register d>
pong.pa2:209 == 1051 <@function Constant 0>
	function:19 == 1051 <.define loccount Constant 0>
	function:22 == 1051 <ldc Register a, Constant 0>
	function:23 == 1052 <ldb Register a, Register a>
	function:24 == 1053 <ldc Register b, Constant 3>
	function:25 == 1054 <stb Register b, Register a>
	function:28 == 1055 <ldc Register a, Constant 0>
	function:29 == 1056 <ldb Register a, Register b>
	function:30 == 1057 <ldc Register c, Constant 0>
	function:31 == 1058 <add Register b, Register b, Register c>
	function:32 == 1059 <stb Register a, Register b>
pong.pa2:213 == 1060 <@push_mem Constant 16>
	push_mem:6 == 1060 <.define addr Register b>
	push_mem:7 == 1060 <.define value Register b>
	push_mem:9 == 1060 <@ldc Register b, Constant 16>
		ldc:1 == 1060 <.define writeReg Register b>
		ldc:2 == 1060 <.define const Constant 16>
		ldc:4 == 1060 <ldc Register a, Constant 0>
		ldc:5 == 1061 <ldc Register b, Constant 12>
		ldc:6 == 1062 <shl Register a, Register a, Register b>
		ldc:7 == 1063 <ldc Register b, Constant 16>
		ldc:8 == 1064 <or Register b, Register a, Register b>
	push_mem:10 == 1065 <ldb Register b, Register b>
	push_mem:12 == 1066 <@push_reg Register b>
		push_reg:10 == 1066 <.define registerToPush Register b>
		push_reg:13 == 1066 <ldc Register a, Constant 0>
		push_reg:14 == 1067 <ldb Register a, Register a>
		push_reg:15 == 1068 <stb Register a, Register b>
		push_reg:19 == 1069 <ldc Register b, Constant 1>
		push_reg:20 == 1070 <add Register a, Register a, Register b>
		push_reg:21 == 1071 <ldc Register b, Constant 0>
		push_reg:22 == 1072 <stb Register b, Register a>
pong.pa2:214 == 1073 <@push_mem Constant 25>
	push_mem:6 == 1073 <.define addr Register b>
	push_mem:7 == 1073 <.define value Register b>
	push_mem:9 == 1073 <@ldc Register b, Constant 25>
		ldc:1 == 1073 <.define writeReg Register b>
		ldc:2 == 1073 <.define const Constant 25>
		ldc:4 == 1073 <ldc Register a, Constant 0>
		ldc:5 == 1074 <ldc Register b, Constant 12>
		ldc:6 == 1075 <shl Register a, Register a, Register b>
		ldc:7 == 1076 <ldc Register b, Constant 25>
		ldc:8 == 1077 <or Register b, Register a, Register b>
	push_mem:10 == 1078 <ldb Register b, Register b>
	push_mem:12 == 1079 <@push_reg Register b>
		push_reg:10 == 1079 <.define registerToPush Register b>
		push_reg:13 == 1079 <ldc Register a, Constant 0>
		push_reg:14 == 1080 <ldb Register a, Register a>
		push_reg:15 == 1081 <stb Register a, Register b>
		push_reg:19 == 1082 <ldc Register b, Constant 1>
		push_reg:20 == 1083 <add Register a, Register a, Register b>
		push_reg:21 == 1084 <ldc Register b, Constant 0>
		push_reg:22 == 1085 <stb Register b, Register a>
pong.pa2:215 == 1086 <@add >
	add:3 == 1086 <.define lhs Register c>
	add:4 == 1086 <.define rhs Register d>
	add:5 == 1086 <.define result Register d>
	add:7 == 1086 <@pop_reg Register d>
		pop_reg:10 == 1086 <.define registerToLoad Register d>
		pop_reg:13 == 1086 <ldc Register a, Constant 0>
		pop_reg:14 == 1087 <ldb Register a, Register a>
		pop_reg:15 == 1088 <ldc Register b, Constant 1>
		pop_reg:16 == 1089 <sub Register a, Register a, Register b>
		pop_reg:17 == 1090 <ldc Register b, Constant 0>
		pop_reg:18 == 1091 <stb Register b, Register a>
		pop_reg:22 == 1092 <ldb Register a, Register d>
	add:8 == 1093 <@pop_reg Register c>
		pop_reg:10 == 1093 <.define registerToLoad Register c>
		pop_reg:13 == 1093 <ldc Register a, Constant 0>
		pop_reg:14 == 1094 <ldb Register a, Register a>
		pop_reg:15 == 1095 <ldc Register b, Constant 1>
		pop_reg:16 == 1096 <sub Register a, Register a, Register b>
		pop_reg:17 == 1097 <ldc Register b, Constant 0>
		pop_reg:18 == 1098 <stb Register b, Register a>
		pop_reg:22 == 1099 <ldb Register a, Register c>
	add:9 == 1100 <add Register d, Register c, Register d>
	add:10 == 1101 <@push_reg Register d>
		push_reg:10 == 1101 <.define registerToPush Register d>
		push_reg:13 == 1101 <ldc Register a, Constant 0>
		push_reg:14 == 1102 <ldb Register a, Register a>
		push_reg:15 == 1103 <stb Register a, Register d>
		push_reg:19 == 1104 <ldc Register b, Constant 1>
		push_reg:20 == 1105 <add Register a, Register a, Register b>
		push_reg:21 == 1106 <ldc Register b, Constant 0>
		push_reg:22 == 1107 <stb Register b, Register a>
pong.pa2:216 == 1108 <@pop_mem_v Constant 16>
	pop_mem_v:6 == 1108 <.define val Register c>
	pop_mem_v:7 == 1108 <.define addr Constant 16>
	pop_mem_v:9 == 1108 <@pop_reg Register c>
		pop_reg:10 == 1108 <.define registerToLoad Register c>
		pop_reg:13 == 1108 <ldc Register a, Constant 0>
		pop_reg:14 == 1109 <ldb Register a, Register a>
		pop_reg:15 == 1110 <ldc Register b, Constant 1>
		pop_reg:16 == 1111 <sub Register a, Register a, Register b>
		pop_reg:17 == 1112 <ldc Register b, Constant 0>
		pop_reg:18 == 1113 <stb Register b, Register a>
		pop_reg:22 == 1114 <ldb Register a, Register c>
	pop_mem_v:11 == 1115 <@ldc Register b, Constant 16>
		ldc:1 == 1115 <.define writeReg Register b>
		ldc:2 == 1115 <.define const Constant 16>
		ldc:4 == 1115 <ldc Register a, Constant 0>
		ldc:5 == 1116 <ldc Register b, Constant 12>
		ldc:6 == 1117 <shl Register a, Register a, Register b>
		ldc:7 == 1118 <ldc Register b, Constant 16>
		ldc:8 == 1119 <or Register b, Register a, Register b>
	pop_mem_v:12 == 1120 <stb Register b, Register c>
pong.pa2:218 == 1121 <@push_mem Constant 17>
	push_mem:6 == 1121 <.define addr Register b>
	push_mem:7 == 1121 <.define value Register b>
	push_mem:9 == 1121 <@ldc Register b, Constant 17>
		ldc:1 == 1121 <.define writeReg Register b>
		ldc:2 == 1121 <.define const Constant 17>
		ldc:4 == 1121 <ldc Register a, Constant 0>
		ldc:5 == 1122 <ldc Register b, Constant 12>
		ldc:6 == 1123 <shl Register a, Register a, Register b>
		ldc:7 == 1124 <ldc Register b, Constant 17>
		ldc:8 == 1125 <or Register b, Register a, Register b>
	push_mem:10 == 1126 <ldb Register b, Register b>
	push_mem:12 == 1127 <@push_reg Register b>
		push_reg:10 == 1127 <.define registerToPush Register b>
		push_reg:13 == 1127 <ldc Register a, Constant 0>
		push_reg:14 == 1128 <ldb Register a, Register a>
		push_reg:15 == 1129 <stb Register a, Register b>
		push_reg:19 == 1130 <ldc Register b, Constant 1>
		push_reg:20 == 1131 <add Register a, Register a, Register b>
		push_reg:21 == 1132 <ldc Register b, Constant 0>
		push_reg:22 == 1133 <stb Register b, Register a>
pong.pa2:219 == 1134 <@push_mem Constant 26>
	push_mem:6 == 1134 <.define addr Register b>
	push_mem:7 == 1134 <.define value Register b>
	push_mem:9 == 1134 <@ldc Register b, Constant 26>
		ldc:1 == 1134 <.define writeReg Register b>
		ldc:2 == 1134 <.define const Constant 26>
		ldc:4 == 1134 <ldc Register a, Constant 0>
		ldc:5 == 1135 <ldc Register b, Constant 12>
		ldc:6 == 1136 <shl Register a, Register a, Register b>
		ldc:7 == 1137 <ldc Register b, Constant 26>
		ldc:8 == 1138 <or Register b, Register a, Register b>
	push_mem:10 == 1139 <ldb Register b, Register b>
	push_mem:12 == 1140 <@push_reg Register b>
		push_reg:10 == 1140 <.define registerToPush Register b>
		push_reg:13 == 1140 <ldc Register a, Constant 0>
		push_reg:14 == 1141 <ldb Register a, Register a>
		push_reg:15 == 1142 <stb Register a, Register b>
		push_reg:19 == 1143 <ldc Register b, Constant 1>
		push_reg:20 == 1144 <add Register a, Register a, Register b>
		push_reg:21 == 1145 <ldc Register b, Constant 0>
		push_reg:22 == 1146 <stb Register b, Register a>
pong.pa2:220 == 1147 <@add >
	add:3 == 1147 <.define lhs Register c>
	add:4 == 1147 <.define rhs Register d>
	add:5 == 1147 <.define result Register d>
	add:7 == 1147 <@pop_reg Register d>
		pop_reg:10 == 1147 <.define registerToLoad Register d>
		pop_reg:13 == 1147 <ldc Register a, Constant 0>
		pop_reg:14 == 1148 <ldb Register a, Register a>
		pop_reg:15 == 1149 <ldc Register b, Constant 1>
		pop_reg:16 == 1150 <sub Register a, Register a, Register b>
		pop_reg:17 == 1151 <ldc Register b, Constant 0>
		pop_reg:18 == 1152 <stb Register b, Register a>
		pop_reg:22 == 1153 <ldb Register a, Register d>
	add:8 == 1154 <@pop_reg Register c>
		pop_reg:10 == 1154 <.define registerToLoad Register c>
		pop_reg:13 == 1154 <ldc Register a, Constant 0>
		pop_reg:14 == 1155 <ldb Register a, Register a>
		pop_reg:15 == 1156 <ldc Register b, Constant 1>
		pop_reg:16 == 1157 <sub Register a, Register a, Register b>
		pop_reg:17 == 1158 <ldc Register b, Constant 0>
		pop_reg:18 == 1159 <stb Register b, Register a>
		pop_reg:22 == 1160 <ldb Register a, Register c>
	add:9 == 1161 <add Register d, Register c, Register d>
	add:10 == 1162 <@push_reg Register d>
		push_reg:10 == 1162 <.define registerToPush Register d>
		push_reg:13 == 1162 <ldc Register a, Constant 0>
		push_reg:14 == 1163 <ldb Register a, Register a>
		push_reg:15 == 1164 <stb Register a, Register d>
		push_reg:19 == 1165 <ldc Register b, Constant 1>
		push_reg:20 == 1166 <add Register a, Register a, Register b>
		push_reg:21 == 1167 <ldc Register b, Constant 0>
		push_reg:22 == 1168 <stb Register b, Register a>
pong.pa2:221 == 1169 <@pop_mem_v Constant 17>
	pop_mem_v:6 == 1169 <.define val Register c>
	pop_mem_v:7 == 1169 <.define addr Constant 17>
	pop_mem_v:9 == 1169 <@pop_reg Register c>
		pop_reg:10 == 1169 <.define registerToLoad Register c>
		pop_reg:13 == 1169 <ldc Register a, Constant 0>
		pop_reg:14 == 1170 <ldb Register a, Register a>
		pop_reg:15 == 1171 <ldc Register b, Constant 1>
		pop_reg:16 == 1172 <sub Register a, Register a, Register b>
		pop_reg:17 == 1173 <ldc Register b, Constant 0>
		pop_reg:18 == 1174 <stb Register b, Register a>
		pop_reg:22 == 1175 <ldb Register a, Register c>
	pop_mem_v:11 == 1176 <@ldc Register b, Constant 17>
		ldc:1 == 1176 <.define writeReg Register b>
		ldc:2 == 1176 <.define const Constant 17>
		ldc:4 == 1176 <ldc Register a, Constant 0>
		ldc:5 == 1177 <ldc Register b, Constant 12>
		ldc:6 == 1178 <shl Register a, Register a, Register b>
		ldc:7 == 1179 <ldc Register b, Constant 17>
		ldc:8 == 1180 <or Register b, Register a, Register b>
	pop_mem_v:12 == 1181 <stb Register b, Register c>
pong.pa2:225 == 1182 <@push_mem Constant 18>
	push_mem:6 == 1182 <.define addr Register b>
	push_mem:7 == 1182 <.define value Register b>
	push_mem:9 == 1182 <@ldc Register b, Constant 18>
		ldc:1 == 1182 <.define writeReg Register b>
		ldc:2 == 1182 <.define const Constant 18>
		ldc:4 == 1182 <ldc Register a, Constant 0>
		ldc:5 == 1183 <ldc Register b, Constant 12>
		ldc:6 == 1184 <shl Register a, Register a, Register b>
		ldc:7 == 1185 <ldc Register b, Constant 18>
		ldc:8 == 1186 <or Register b, Register a, Register b>
	push_mem:10 == 1187 <ldb Register b, Register b>
	push_mem:12 == 1188 <@push_reg Register b>
		push_reg:10 == 1188 <.define registerToPush Register b>
		push_reg:13 == 1188 <ldc Register a, Constant 0>
		push_reg:14 == 1189 <ldb Register a, Register a>
		push_reg:15 == 1190 <stb Register a, Register b>
		push_reg:19 == 1191 <ldc Register b, Constant 1>
		push_reg:20 == 1192 <add Register a, Register a, Register b>
		push_reg:21 == 1193 <ldc Register b, Constant 0>
		push_reg:22 == 1194 <stb Register b, Register a>
pong.pa2:226 == 1195 <@push_mem Constant 20>
	push_mem:6 == 1195 <.define addr Register b>
	push_mem:7 == 1195 <.define value Register b>
	push_mem:9 == 1195 <@ldc Register b, Constant 20>
		ldc:1 == 1195 <.define writeReg Register b>
		ldc:2 == 1195 <.define const Constant 20>
		ldc:4 == 1195 <ldc Register a, Constant 0>
		ldc:5 == 1196 <ldc Register b, Constant 12>
		ldc:6 == 1197 <shl Register a, Register a, Register b>
		ldc:7 == 1198 <ldc Register b, Constant 20>
		ldc:8 == 1199 <or Register b, Register a, Register b>
	push_mem:10 == 1200 <ldb Register b, Register b>
	push_mem:12 == 1201 <@push_reg Register b>
		push_reg:10 == 1201 <.define registerToPush Register b>
		push_reg:13 == 1201 <ldc Register a, Constant 0>
		push_reg:14 == 1202 <ldb Register a, Register a>
		push_reg:15 == 1203 <stb Register a, Register b>
		push_reg:19 == 1204 <ldc Register b, Constant 1>
		push_reg:20 == 1205 <add Register a, Register a, Register b>
		push_reg:21 == 1206 <ldc Register b, Constant 0>
		push_reg:22 == 1207 <stb Register b, Register a>
pong.pa2:227 == 1208 <@add >
	add:3 == 1208 <.define lhs Register c>
	add:4 == 1208 <.define rhs Register d>
	add:5 == 1208 <.define result Register d>
	add:7 == 1208 <@pop_reg Register d>
		pop_reg:10 == 1208 <.define registerToLoad Register d>
		pop_reg:13 == 1208 <ldc Register a, Constant 0>
		pop_reg:14 == 1209 <ldb Register a, Register a>
		pop_reg:15 == 1210 <ldc Register b, Constant 1>
		pop_reg:16 == 1211 <sub Register a, Register a, Register b>
		pop_reg:17 == 1212 <ldc Register b, Constant 0>
		pop_reg:18 == 1213 <stb Register b, Register a>
		pop_reg:22 == 1214 <ldb Register a, Register d>
	add:8 == 1215 <@pop_reg Register c>
		pop_reg:10 == 1215 <.define registerToLoad Register c>
		pop_reg:13 == 1215 <ldc Register a, Constant 0>
		pop_reg:14 == 1216 <ldb Register a, Register a>
		pop_reg:15 == 1217 <ldc Register b, Constant 1>
		pop_reg:16 == 1218 <sub Register a, Register a, Register b>
		pop_reg:17 == 1219 <ldc Register b, Constant 0>
		pop_reg:18 == 1220 <stb Register b, Register a>
		pop_reg:22 == 1221 <ldb Register a, Register c>
	add:9 == 1222 <add Register d, Register c, Register d>
	add:10 == 1223 <@push_reg Register d>
		push_reg:10 == 1223 <.define registerToPush Register d>
		push_reg:13 == 1223 <ldc Register a, Constant 0>
		push_reg:14 == 1224 <ldb Register a, Register a>
		push_reg:15 == 1225 <stb Register a, Register d>
		push_reg:19 == 1226 <ldc Register b, Constant 1>
		push_reg:20 == 1227 <add Register a, Register a, Register b>
		push_reg:21 == 1228 <ldc Register b, Constant 0>
		push_reg:22 == 1229 <stb Register b, Register a>
pong.pa2:228 == 1230 <@pop_mem_v Constant 18>
	pop_mem_v:6 == 1230 <.define val Register c>
	pop_mem_v:7 == 1230 <.define addr Constant 18>
	pop_mem_v:9 == 1230 <@pop_reg Register c>
		pop_reg:10 == 1230 <.define registerToLoad Register c>
		pop_reg:13 == 1230 <ldc Register a, Constant 0>
		pop_reg:14 == 1231 <ldb Register a, Register a>
		pop_reg:15 == 1232 <ldc Register b, Constant 1>
		pop_reg:16 == 1233 <sub Register a, Register a, Register b>
		pop_reg:17 == 1234 <ldc Register b, Constant 0>
		pop_reg:18 == 1235 <stb Register b, Register a>
		pop_reg:22 == 1236 <ldb Register a, Register c>
	pop_mem_v:11 == 1237 <@ldc Register b, Constant 18>
		ldc:1 == 1237 <.define writeReg Register b>
		ldc:2 == 1237 <.define const Constant 18>
		ldc:4 == 1237 <ldc Register a, Constant 0>
		ldc:5 == 1238 <ldc Register b, Constant 12>
		ldc:6 == 1239 <shl Register a, Register a, Register b>
		ldc:7 == 1240 <ldc Register b, Constant 18>
		ldc:8 == 1241 <or Register b, Register a, Register b>
	pop_mem_v:12 == 1242 <stb Register b, Register c>
pong.pa2:230 == 1243 <@push_mem Constant 19>
	push_mem:6 == 1243 <.define addr Register b>
	push_mem:7 == 1243 <.define value Register b>
	push_mem:9 == 1243 <@ldc Register b, Constant 19>
		ldc:1 == 1243 <.define writeReg Register b>
		ldc:2 == 1243 <.define const Constant 19>
		ldc:4 == 1243 <ldc Register a, Constant 0>
		ldc:5 == 1244 <ldc Register b, Constant 12>
		ldc:6 == 1245 <shl Register a, Register a, Register b>
		ldc:7 == 1246 <ldc Register b, Constant 19>
		ldc:8 == 1247 <or Register b, Register a, Register b>
	push_mem:10 == 1248 <ldb Register b, Register b>
	push_mem:12 == 1249 <@push_reg Register b>
		push_reg:10 == 1249 <.define registerToPush Register b>
		push_reg:13 == 1249 <ldc Register a, Constant 0>
		push_reg:14 == 1250 <ldb Register a, Register a>
		push_reg:15 == 1251 <stb Register a, Register b>
		push_reg:19 == 1252 <ldc Register b, Constant 1>
		push_reg:20 == 1253 <add Register a, Register a, Register b>
		push_reg:21 == 1254 <ldc Register b, Constant 0>
		push_reg:22 == 1255 <stb Register b, Register a>
pong.pa2:231 == 1256 <@push_mem Constant 21>
	push_mem:6 == 1256 <.define addr Register b>
	push_mem:7 == 1256 <.define value Register b>
	push_mem:9 == 1256 <@ldc Register b, Constant 21>
		ldc:1 == 1256 <.define writeReg Register b>
		ldc:2 == 1256 <.define const Constant 21>
		ldc:4 == 1256 <ldc Register a, Constant 0>
		ldc:5 == 1257 <ldc Register b, Constant 12>
		ldc:6 == 1258 <shl Register a, Register a, Register b>
		ldc:7 == 1259 <ldc Register b, Constant 21>
		ldc:8 == 1260 <or Register b, Register a, Register b>
	push_mem:10 == 1261 <ldb Register b, Register b>
	push_mem:12 == 1262 <@push_reg Register b>
		push_reg:10 == 1262 <.define registerToPush Register b>
		push_reg:13 == 1262 <ldc Register a, Constant 0>
		push_reg:14 == 1263 <ldb Register a, Register a>
		push_reg:15 == 1264 <stb Register a, Register b>
		push_reg:19 == 1265 <ldc Register b, Constant 1>
		push_reg:20 == 1266 <add Register a, Register a, Register b>
		push_reg:21 == 1267 <ldc Register b, Constant 0>
		push_reg:22 == 1268 <stb Register b, Register a>
pong.pa2:232 == 1269 <@add >
	add:3 == 1269 <.define lhs Register c>
	add:4 == 1269 <.define rhs Register d>
	add:5 == 1269 <.define result Register d>
	add:7 == 1269 <@pop_reg Register d>
		pop_reg:10 == 1269 <.define registerToLoad Register d>
		pop_reg:13 == 1269 <ldc Register a, Constant 0>
		pop_reg:14 == 1270 <ldb Register a, Register a>
		pop_reg:15 == 1271 <ldc Register b, Constant 1>
		pop_reg:16 == 1272 <sub Register a, Register a, Register b>
		pop_reg:17 == 1273 <ldc Register b, Constant 0>
		pop_reg:18 == 1274 <stb Register b, Register a>
		pop_reg:22 == 1275 <ldb Register a, Register d>
	add:8 == 1276 <@pop_reg Register c>
		pop_reg:10 == 1276 <.define registerToLoad Register c>
		pop_reg:13 == 1276 <ldc Register a, Constant 0>
		pop_reg:14 == 1277 <ldb Register a, Register a>
		pop_reg:15 == 1278 <ldc Register b, Constant 1>
		pop_reg:16 == 1279 <sub Register a, Register a, Register b>
		pop_reg:17 == 1280 <ldc Register b, Constant 0>
		pop_reg:18 == 1281 <stb Register b, Register a>
		pop_reg:22 == 1282 <ldb Register a, Register c>
	add:9 == 1283 <add Register d, Register c, Register d>
	add:10 == 1284 <@push_reg Register d>
		push_reg:10 == 1284 <.define registerToPush Register d>
		push_reg:13 == 1284 <ldc Register a, Constant 0>
		push_reg:14 == 1285 <ldb Register a, Register a>
		push_reg:15 == 1286 <stb Register a, Register d>
		push_reg:19 == 1287 <ldc Register b, Constant 1>
		push_reg:20 == 1288 <add Register a, Register a, Register b>
		push_reg:21 == 1289 <ldc Register b, Constant 0>
		push_reg:22 == 1290 <stb Register b, Register a>
pong.pa2:233 == 1291 <@pop_mem_v Constant 19>
	pop_mem_v:6 == 1291 <.define val Register c>
	pop_mem_v:7 == 1291 <.define addr Constant 19>
	pop_mem_v:9 == 1291 <@pop_reg Register c>
		pop_reg:10 == 1291 <.define registerToLoad Register c>
		pop_reg:13 == 1291 <ldc Register a, Constant 0>
		pop_reg:14 == 1292 <ldb Register a, Register a>
		pop_reg:15 == 1293 <ldc Register b, Constant 1>
		pop_reg:16 == 1294 <sub Register a, Register a, Register b>
		pop_reg:17 == 1295 <ldc Register b, Constant 0>
		pop_reg:18 == 1296 <stb Register b, Register a>
		pop_reg:22 == 1297 <ldb Register a, Register c>
	pop_mem_v:11 == 1298 <@ldc Register b, Constant 19>
		ldc:1 == 1298 <.define writeReg Register b>
		ldc:2 == 1298 <.define const Constant 19>
		ldc:4 == 1298 <ldc Register a, Constant 0>
		ldc:5 == 1299 <ldc Register b, Constant 12>
		ldc:6 == 1300 <shl Register a, Register a, Register b>
		ldc:7 == 1301 <ldc Register b, Constant 19>
		ldc:8 == 1302 <or Register b, Register a, Register b>
	pop_mem_v:12 == 1303 <stb Register b, Register c>
pong.pa2:243 == 1304 <@push_mem Constant 19>
	push_mem:6 == 1304 <.define addr Register b>
	push_mem:7 == 1304 <.define value Register b>
	push_mem:9 == 1304 <@ldc Register b, Constant 19>
		ldc:1 == 1304 <.define writeReg Register b>
		ldc:2 == 1304 <.define const Constant 19>
		ldc:4 == 1304 <ldc Register a, Constant 0>
		ldc:5 == 1305 <ldc Register b, Constant 12>
		ldc:6 == 1306 <shl Register a, Register a, Register b>
		ldc:7 == 1307 <ldc Register b, Constant 19>
		ldc:8 == 1308 <or Register b, Register a, Register b>
	push_mem:10 == 1309 <ldb Register b, Register b>
	push_mem:12 == 1310 <@push_reg Register b>
		push_reg:10 == 1310 <.define registerToPush Register b>
		push_reg:13 == 1310 <ldc Register a, Constant 0>
		push_reg:14 == 1311 <ldb Register a, Register a>
		push_reg:15 == 1312 <stb Register a, Register b>
		push_reg:19 == 1313 <ldc Register b, Constant 1>
		push_reg:20 == 1314 <add Register a, Register a, Register b>
		push_reg:21 == 1315 <ldc Register b, Constant 0>
		push_reg:22 == 1316 <stb Register b, Register a>
pong.pa2:244 == 1317 <@push_const Constant 0>
	push_const:6 == 1317 <.define constantToPush Constant 0>
	push_const:12 == 1317 <@ldc Register b, Constant 0>
		ldc:1 == 1317 <.define writeReg Register b>
		ldc:2 == 1317 <.define const Constant 0>
		ldc:4 == 1317 <ldc Register a, Constant 0>
		ldc:5 == 1318 <ldc Register b, Constant 12>
		ldc:6 == 1319 <shl Register a, Register a, Register b>
		ldc:7 == 1320 <ldc Register b, Constant 0>
		ldc:8 == 1321 <or Register b, Register a, Register b>
	push_const:14 == 1322 <@push_reg Register b>
		push_reg:10 == 1322 <.define registerToPush Register b>
		push_reg:13 == 1322 <ldc Register a, Constant 0>
		push_reg:14 == 1323 <ldb Register a, Register a>
		push_reg:15 == 1324 <stb Register a, Register b>
		push_reg:19 == 1325 <ldc Register b, Constant 1>
		push_reg:20 == 1326 <add Register a, Register a, Register b>
		push_reg:21 == 1327 <ldc Register b, Constant 0>
		push_reg:22 == 1328 <stb Register b, Register a>
pong.pa2:245 == 1329 <@lte >
	lte:1 == 1329 <@pop_reg Register d>
		pop_reg:10 == 1329 <.define registerToLoad Register d>
		pop_reg:13 == 1329 <ldc Register a, Constant 0>
		pop_reg:14 == 1330 <ldb Register a, Register a>
		pop_reg:15 == 1331 <ldc Register b, Constant 1>
		pop_reg:16 == 1332 <sub Register a, Register a, Register b>
		pop_reg:17 == 1333 <ldc Register b, Constant 0>
		pop_reg:18 == 1334 <stb Register b, Register a>
		pop_reg:22 == 1335 <ldb Register a, Register d>
	lte:2 == 1336 <@pop_reg Register c>
		pop_reg:10 == 1336 <.define registerToLoad Register c>
		pop_reg:13 == 1336 <ldc Register a, Constant 0>
		pop_reg:14 == 1337 <ldb Register a, Register a>
		pop_reg:15 == 1338 <ldc Register b, Constant 1>
		pop_reg:16 == 1339 <sub Register a, Register a, Register b>
		pop_reg:17 == 1340 <ldc Register b, Constant 0>
		pop_reg:18 == 1341 <stb Register b, Register a>
		pop_reg:22 == 1342 <ldb Register a, Register c>
	lte:3 == 1343 <cle Register b, Register c, Register d>
	lte:4 == 1344 <@push_reg Register b>
		push_reg:10 == 1344 <.define registerToPush Register b>
		push_reg:13 == 1344 <ldc Register a, Constant 0>
		push_reg:14 == 1345 <ldb Register a, Register a>
		push_reg:15 == 1346 <stb Register a, Register b>
		push_reg:19 == 1347 <ldc Register b, Constant 1>
		push_reg:20 == 1348 <add Register a, Register a, Register b>
		push_reg:21 == 1349 <ldc Register b, Constant 0>
		push_reg:22 == 1350 <stb Register b, Register a>
pong.pa2:246 == 1351 <@if Constant 1450>
	if:5 == 1351 <.define jumpLabel Constant 1450>
	if:7 == 1351 <@pop_reg Register c>
		pop_reg:10 == 1351 <.define registerToLoad Register c>
		pop_reg:13 == 1351 <ldc Register a, Constant 0>
		pop_reg:14 == 1352 <ldb Register a, Register a>
		pop_reg:15 == 1353 <ldc Register b, Constant 1>
		pop_reg:16 == 1354 <sub Register a, Register a, Register b>
		pop_reg:17 == 1355 <ldc Register b, Constant 0>
		pop_reg:18 == 1356 <stb Register b, Register a>
		pop_reg:22 == 1357 <ldb Register a, Register c>
	if:8 == 1358 <@ldc Register b, Constant 1450>
		ldc:1 == 1358 <.define writeReg Register b>
		ldc:2 == 1358 <.define const Constant 1450>
		ldc:4 == 1358 <ldc Register a, Constant 0>
		ldc:5 == 1359 <ldc Register b, Constant 12>
		ldc:6 == 1360 <shl Register a, Register a, Register b>
		ldc:7 == 1361 <ldc Register b, Constant 1450>
		ldc:8 == 1362 <or Register b, Register a, Register b>
	if:9 == 1363 <ldc Register a, Constant 0>
	if:10 == 1364 <jeq Register b, Register c, Register a>
pong.pa2:248 == 1365 <@push_const Constant 0>
	push_const:6 == 1365 <.define constantToPush Constant 0>
	push_const:12 == 1365 <@ldc Register b, Constant 0>
		ldc:1 == 1365 <.define writeReg Register b>
		ldc:2 == 1365 <.define const Constant 0>
		ldc:4 == 1365 <ldc Register a, Constant 0>
		ldc:5 == 1366 <ldc Register b, Constant 12>
		ldc:6 == 1367 <shl Register a, Register a, Register b>
		ldc:7 == 1368 <ldc Register b, Constant 0>
		ldc:8 == 1369 <or Register b, Register a, Register b>
	push_const:14 == 1370 <@push_reg Register b>
		push_reg:10 == 1370 <.define registerToPush Register b>
		push_reg:13 == 1370 <ldc Register a, Constant 0>
		push_reg:14 == 1371 <ldb Register a, Register a>
		push_reg:15 == 1372 <stb Register a, Register b>
		push_reg:19 == 1373 <ldc Register b, Constant 1>
		push_reg:20 == 1374 <add Register a, Register a, Register b>
		push_reg:21 == 1375 <ldc Register b, Constant 0>
		push_reg:22 == 1376 <stb Register b, Register a>
pong.pa2:249 == 1377 <@pop_mem_v Constant 19>
	pop_mem_v:6 == 1377 <.define val Register c>
	pop_mem_v:7 == 1377 <.define addr Constant 19>
	pop_mem_v:9 == 1377 <@pop_reg Register c>
		pop_reg:10 == 1377 <.define registerToLoad Register c>
		pop_reg:13 == 1377 <ldc Register a, Constant 0>
		pop_reg:14 == 1378 <ldb Register a, Register a>
		pop_reg:15 == 1379 <ldc Register b, Constant 1>
		pop_reg:16 == 1380 <sub Register a, Register a, Register b>
		pop_reg:17 == 1381 <ldc Register b, Constant 0>
		pop_reg:18 == 1382 <stb Register b, Register a>
		pop_reg:22 == 1383 <ldb Register a, Register c>
	pop_mem_v:11 == 1384 <@ldc Register b, Constant 19>
		ldc:1 == 1384 <.define writeReg Register b>
		ldc:2 == 1384 <.define const Constant 19>
		ldc:4 == 1384 <ldc Register a, Constant 0>
		ldc:5 == 1385 <ldc Register b, Constant 12>
		ldc:6 == 1386 <shl Register a, Register a, Register b>
		ldc:7 == 1387 <ldc Register b, Constant 19>
		ldc:8 == 1388 <or Register b, Register a, Register b>
	pop_mem_v:12 == 1389 <stb Register b, Register c>
pong.pa2:251 == 1390 <@push_const Constant 0>
	push_const:6 == 1390 <.define constantToPush Constant 0>
	push_const:12 == 1390 <@ldc Register b, Constant 0>
		ldc:1 == 1390 <.define writeReg Register b>
		ldc:2 == 1390 <.define const Constant 0>
		ldc:4 == 1390 <ldc Register a, Constant 0>
		ldc:5 == 1391 <ldc Register b, Constant 12>
		ldc:6 == 1392 <shl Register a, Register a, Register b>
		ldc:7 == 1393 <ldc Register b, Constant 0>
		ldc:8 == 1394 <or Register b, Register a, Register b>
	push_const:14 == 1395 <@push_reg Register b>
		push_reg:10 == 1395 <.define registerToPush Register b>
		push_reg:13 == 1395 <ldc Register a, Constant 0>
		push_reg:14 == 1396 <ldb Register a, Register a>
		push_reg:15 == 1397 <stb Register a, Register b>
		push_reg:19 == 1398 <ldc Register b, Constant 1>
		push_reg:20 == 1399 <add Register a, Register a, Register b>
		push_reg:21 == 1400 <ldc Register b, Constant 0>
		push_reg:22 == 1401 <stb Register b, Register a>
pong.pa2:252 == 1402 <@push_mem Constant 21>
	push_mem:6 == 1402 <.define addr Register b>
	push_mem:7 == 1402 <.define value Register b>
	push_mem:9 == 1402 <@ldc Register b, Constant 21>
		ldc:1 == 1402 <.define writeReg Register b>
		ldc:2 == 1402 <.define const Constant 21>
		ldc:4 == 1402 <ldc Register a, Constant 0>
		ldc:5 == 1403 <ldc Register b, Constant 12>
		ldc:6 == 1404 <shl Register a, Register a, Register b>
		ldc:7 == 1405 <ldc Register b, Constant 21>
		ldc:8 == 1406 <or Register b, Register a, Register b>
	push_mem:10 == 1407 <ldb Register b, Register b>
	push_mem:12 == 1408 <@push_reg Register b>
		push_reg:10 == 1408 <.define registerToPush Register b>
		push_reg:13 == 1408 <ldc Register a, Constant 0>
		push_reg:14 == 1409 <ldb Register a, Register a>
		push_reg:15 == 1410 <stb Register a, Register b>
		push_reg:19 == 1411 <ldc Register b, Constant 1>
		push_reg:20 == 1412 <add Register a, Register a, Register b>
		push_reg:21 == 1413 <ldc Register b, Constant 0>
		push_reg:22 == 1414 <stb Register b, Register a>
pong.pa2:253 == 1415 <@sub >
	sub:3 == 1415 <.define lhs Register c>
	sub:4 == 1415 <.define rhs Register d>
	sub:5 == 1415 <.define result Register d>
	sub:7 == 1415 <@pop_reg Register d>
		pop_reg:10 == 1415 <.define registerToLoad Register d>
		pop_reg:13 == 1415 <ldc Register a, Constant 0>
		pop_reg:14 == 1416 <ldb Register a, Register a>
		pop_reg:15 == 1417 <ldc Register b, Constant 1>
		pop_reg:16 == 1418 <sub Register a, Register a, Register b>
		pop_reg:17 == 1419 <ldc Register b, Constant 0>
		pop_reg:18 == 1420 <stb Register b, Register a>
		pop_reg:22 == 1421 <ldb Register a, Register d>
	sub:8 == 1422 <@pop_reg Register c>
		pop_reg:10 == 1422 <.define registerToLoad Register c>
		pop_reg:13 == 1422 <ldc Register a, Constant 0>
		pop_reg:14 == 1423 <ldb Register a, Register a>
		pop_reg:15 == 1424 <ldc Register b, Constant 1>
		pop_reg:16 == 1425 <sub Register a, Register a, Register b>
		pop_reg:17 == 1426 <ldc Register b, Constant 0>
		pop_reg:18 == 1427 <stb Register b, Register a>
		pop_reg:22 == 1428 <ldb Register a, Register c>
	sub:9 == 1429 <sub Register d, Register c, Register d>
	sub:10 == 1430 <@push_reg Register d>
		push_reg:10 == 1430 <.define registerToPush Register d>
		push_reg:13 == 1430 <ldc Register a, Constant 0>
		push_reg:14 == 1431 <ldb Register a, Register a>
		push_reg:15 == 1432 <stb Register a, Register d>
		push_reg:19 == 1433 <ldc Register b, Constant 1>
		push_reg:20 == 1434 <add Register a, Register a, Register b>
		push_reg:21 == 1435 <ldc Register b, Constant 0>
		push_reg:22 == 1436 <stb Register b, Register a>
pong.pa2:254 == 1437 <@pop_mem_v Constant 21>
	pop_mem_v:6 == 1437 <.define val Register c>
	pop_mem_v:7 == 1437 <.define addr Constant 21>
	pop_mem_v:9 == 1437 <@pop_reg Register c>
		pop_reg:10 == 1437 <.define registerToLoad Register c>
		pop_reg:13 == 1437 <ldc Register a, Constant 0>
		pop_reg:14 == 1438 <ldb Register a, Register a>
		pop_reg:15 == 1439 <ldc Register b, Constant 1>
		pop_reg:16 == 1440 <sub Register a, Register a, Register b>
		pop_reg:17 == 1441 <ldc Register b, Constant 0>
		pop_reg:18 == 1442 <stb Register b, Register a>
		pop_reg:22 == 1443 <ldb Register a, Register c>
	pop_mem_v:11 == 1444 <@ldc Register b, Constant 21>
		ldc:1 == 1444 <.define writeReg Register b>
		ldc:2 == 1444 <.define const Constant 21>
		ldc:4 == 1444 <ldc Register a, Constant 0>
		ldc:5 == 1445 <ldc Register b, Constant 12>
		ldc:6 == 1446 <shl Register a, Register a, Register b>
		ldc:7 == 1447 <ldc Register b, Constant 21>
		ldc:8 == 1448 <or Register b, Register a, Register b>
	pop_mem_v:12 == 1449 <stb Register b, Register c>
pong.pa2:256 == 1450 <@push_mem Constant 19>
	push_mem:6 == 1450 <.define addr Register b>
	push_mem:7 == 1450 <.define value Register b>
	push_mem:9 == 1450 <@ldc Register b, Constant 19>
		ldc:1 == 1450 <.define writeReg Register b>
		ldc:2 == 1450 <.define const Constant 19>
		ldc:4 == 1450 <ldc Register a, Constant 0>
		ldc:5 == 1451 <ldc Register b, Constant 12>
		ldc:6 == 1452 <shl Register a, Register a, Register b>
		ldc:7 == 1453 <ldc Register b, Constant 19>
		ldc:8 == 1454 <or Register b, Register a, Register b>
	push_mem:10 == 1455 <ldb Register b, Register b>
	push_mem:12 == 1456 <@push_reg Register b>
		push_reg:10 == 1456 <.define registerToPush Register b>
		push_reg:13 == 1456 <ldc Register a, Constant 0>
		push_reg:14 == 1457 <ldb Register a, Register a>
		push_reg:15 == 1458 <stb Register a, Register b>
		push_reg:19 == 1459 <ldc Register b, Constant 1>
		push_reg:20 == 1460 <add Register a, Register a, Register b>
		push_reg:21 == 1461 <ldc Register b, Constant 0>
		push_reg:22 == 1462 <stb Register b, Register a>
pong.pa2:262 == 1463 <@push_const Constant 64>
	push_const:6 == 1463 <.define constantToPush Constant 64>
	push_const:12 == 1463 <@ldc Register b, Constant 64>
		ldc:1 == 1463 <.define writeReg Register b>
		ldc:2 == 1463 <.define const Constant 64>
		ldc:4 == 1463 <ldc Register a, Constant 0>
		ldc:5 == 1464 <ldc Register b, Constant 12>
		ldc:6 == 1465 <shl Register a, Register a, Register b>
		ldc:7 == 1466 <ldc Register b, Constant 64>
		ldc:8 == 1467 <or Register b, Register a, Register b>
	push_const:14 == 1468 <@push_reg Register b>
		push_reg:10 == 1468 <.define registerToPush Register b>
		push_reg:13 == 1468 <ldc Register a, Constant 0>
		push_reg:14 == 1469 <ldb Register a, Register a>
		push_reg:15 == 1470 <stb Register a, Register b>
		push_reg:19 == 1471 <ldc Register b, Constant 1>
		push_reg:20 == 1472 <add Register a, Register a, Register b>
		push_reg:21 == 1473 <ldc Register b, Constant 0>
		push_reg:22 == 1474 <stb Register b, Register a>
pong.pa2:263 == 1475 <@gte >
	gte:1 == 1475 <@pop_reg Register d>
		pop_reg:10 == 1475 <.define registerToLoad Register d>
		pop_reg:13 == 1475 <ldc Register a, Constant 0>
		pop_reg:14 == 1476 <ldb Register a, Register a>
		pop_reg:15 == 1477 <ldc Register b, Constant 1>
		pop_reg:16 == 1478 <sub Register a, Register a, Register b>
		pop_reg:17 == 1479 <ldc Register b, Constant 0>
		pop_reg:18 == 1480 <stb Register b, Register a>
		pop_reg:22 == 1481 <ldb Register a, Register d>
	gte:2 == 1482 <@pop_reg Register c>
		pop_reg:10 == 1482 <.define registerToLoad Register c>
		pop_reg:13 == 1482 <ldc Register a, Constant 0>
		pop_reg:14 == 1483 <ldb Register a, Register a>
		pop_reg:15 == 1484 <ldc Register b, Constant 1>
		pop_reg:16 == 1485 <sub Register a, Register a, Register b>
		pop_reg:17 == 1486 <ldc Register b, Constant 0>
		pop_reg:18 == 1487 <stb Register b, Register a>
		pop_reg:22 == 1488 <ldb Register a, Register c>
	gte:3 == 1489 <cge Register b, Register c, Register d>
	gte:4 == 1490 <@push_reg Register b>
		push_reg:10 == 1490 <.define registerToPush Register b>
		push_reg:13 == 1490 <ldc Register a, Constant 0>
		push_reg:14 == 1491 <ldb Register a, Register a>
		push_reg:15 == 1492 <stb Register a, Register b>
		push_reg:19 == 1493 <ldc Register b, Constant 1>
		push_reg:20 == 1494 <add Register a, Register a, Register b>
		push_reg:21 == 1495 <ldc Register b, Constant 0>
		push_reg:22 == 1496 <stb Register b, Register a>
pong.pa2:264 == 1497 <@if Constant 1596>
	if:5 == 1497 <.define jumpLabel Constant 1596>
	if:7 == 1497 <@pop_reg Register c>
		pop_reg:10 == 1497 <.define registerToLoad Register c>
		pop_reg:13 == 1497 <ldc Register a, Constant 0>
		pop_reg:14 == 1498 <ldb Register a, Register a>
		pop_reg:15 == 1499 <ldc Register b, Constant 1>
		pop_reg:16 == 1500 <sub Register a, Register a, Register b>
		pop_reg:17 == 1501 <ldc Register b, Constant 0>
		pop_reg:18 == 1502 <stb Register b, Register a>
		pop_reg:22 == 1503 <ldb Register a, Register c>
	if:8 == 1504 <@ldc Register b, Constant 1596>
		ldc:1 == 1504 <.define writeReg Register b>
		ldc:2 == 1504 <.define const Constant 1596>
		ldc:4 == 1504 <ldc Register a, Constant 0>
		ldc:5 == 1505 <ldc Register b, Constant 12>
		ldc:6 == 1506 <shl Register a, Register a, Register b>
		ldc:7 == 1507 <ldc Register b, Constant 1596>
		ldc:8 == 1508 <or Register b, Register a, Register b>
	if:9 == 1509 <ldc Register a, Constant 0>
	if:10 == 1510 <jeq Register b, Register c, Register a>
pong.pa2:266 == 1511 <@push_const Constant 62>
	push_const:6 == 1511 <.define constantToPush Constant 62>
	push_const:12 == 1511 <@ldc Register b, Constant 62>
		ldc:1 == 1511 <.define writeReg Register b>
		ldc:2 == 1511 <.define const Constant 62>
		ldc:4 == 1511 <ldc Register a, Constant 0>
		ldc:5 == 1512 <ldc Register b, Constant 12>
		ldc:6 == 1513 <shl Register a, Register a, Register b>
		ldc:7 == 1514 <ldc Register b, Constant 62>
		ldc:8 == 1515 <or Register b, Register a, Register b>
	push_const:14 == 1516 <@push_reg Register b>
		push_reg:10 == 1516 <.define registerToPush Register b>
		push_reg:13 == 1516 <ldc Register a, Constant 0>
		push_reg:14 == 1517 <ldb Register a, Register a>
		push_reg:15 == 1518 <stb Register a, Register b>
		push_reg:19 == 1519 <ldc Register b, Constant 1>
		push_reg:20 == 1520 <add Register a, Register a, Register b>
		push_reg:21 == 1521 <ldc Register b, Constant 0>
		push_reg:22 == 1522 <stb Register b, Register a>
pong.pa2:267 == 1523 <@pop_mem_v Constant 19>
	pop_mem_v:6 == 1523 <.define val Register c>
	pop_mem_v:7 == 1523 <.define addr Constant 19>
	pop_mem_v:9 == 1523 <@pop_reg Register c>
		pop_reg:10 == 1523 <.define registerToLoad Register c>
		pop_reg:13 == 1523 <ldc Register a, Constant 0>
		pop_reg:14 == 1524 <ldb Register a, Register a>
		pop_reg:15 == 1525 <ldc Register b, Constant 1>
		pop_reg:16 == 1526 <sub Register a, Register a, Register b>
		pop_reg:17 == 1527 <ldc Register b, Constant 0>
		pop_reg:18 == 1528 <stb Register b, Register a>
		pop_reg:22 == 1529 <ldb Register a, Register c>
	pop_mem_v:11 == 1530 <@ldc Register b, Constant 19>
		ldc:1 == 1530 <.define writeReg Register b>
		ldc:2 == 1530 <.define const Constant 19>
		ldc:4 == 1530 <ldc Register a, Constant 0>
		ldc:5 == 1531 <ldc Register b, Constant 12>
		ldc:6 == 1532 <shl Register a, Register a, Register b>
		ldc:7 == 1533 <ldc Register b, Constant 19>
		ldc:8 == 1534 <or Register b, Register a, Register b>
	pop_mem_v:12 == 1535 <stb Register b, Register c>
pong.pa2:269 == 1536 <@push_const Constant 0>
	push_const:6 == 1536 <.define constantToPush Constant 0>
	push_const:12 == 1536 <@ldc Register b, Constant 0>
		ldc:1 == 1536 <.define writeReg Register b>
		ldc:2 == 1536 <.define const Constant 0>
		ldc:4 == 1536 <ldc Register a, Constant 0>
		ldc:5 == 1537 <ldc Register b, Constant 12>
		ldc:6 == 1538 <shl Register a, Register a, Register b>
		ldc:7 == 1539 <ldc Register b, Constant 0>
		ldc:8 == 1540 <or Register b, Register a, Register b>
	push_const:14 == 1541 <@push_reg Register b>
		push_reg:10 == 1541 <.define registerToPush Register b>
		push_reg:13 == 1541 <ldc Register a, Constant 0>
		push_reg:14 == 1542 <ldb Register a, Register a>
		push_reg:15 == 1543 <stb Register a, Register b>
		push_reg:19 == 1544 <ldc Register b, Constant 1>
		push_reg:20 == 1545 <add Register a, Register a, Register b>
		push_reg:21 == 1546 <ldc Register b, Constant 0>
		push_reg:22 == 1547 <stb Register b, Register a>
pong.pa2:270 == 1548 <@push_mem Constant 21>
	push_mem:6 == 1548 <.define addr Register b>
	push_mem:7 == 1548 <.define value Register b>
	push_mem:9 == 1548 <@ldc Register b, Constant 21>
		ldc:1 == 1548 <.define writeReg Register b>
		ldc:2 == 1548 <.define const Constant 21>
		ldc:4 == 1548 <ldc Register a, Constant 0>
		ldc:5 == 1549 <ldc Register b, Constant 12>
		ldc:6 == 1550 <shl Register a, Register a, Register b>
		ldc:7 == 1551 <ldc Register b, Constant 21>
		ldc:8 == 1552 <or Register b, Register a, Register b>
	push_mem:10 == 1553 <ldb Register b, Register b>
	push_mem:12 == 1554 <@push_reg Register b>
		push_reg:10 == 1554 <.define registerToPush Register b>
		push_reg:13 == 1554 <ldc Register a, Constant 0>
		push_reg:14 == 1555 <ldb Register a, Register a>
		push_reg:15 == 1556 <stb Register a, Register b>
		push_reg:19 == 1557 <ldc Register b, Constant 1>
		push_reg:20 == 1558 <add Register a, Register a, Register b>
		push_reg:21 == 1559 <ldc Register b, Constant 0>
		push_reg:22 == 1560 <stb Register b, Register a>
pong.pa2:271 == 1561 <@sub >
	sub:3 == 1561 <.define lhs Register c>
	sub:4 == 1561 <.define rhs Register d>
	sub:5 == 1561 <.define result Register d>
	sub:7 == 1561 <@pop_reg Register d>
		pop_reg:10 == 1561 <.define registerToLoad Register d>
		pop_reg:13 == 1561 <ldc Register a, Constant 0>
		pop_reg:14 == 1562 <ldb Register a, Register a>
		pop_reg:15 == 1563 <ldc Register b, Constant 1>
		pop_reg:16 == 1564 <sub Register a, Register a, Register b>
		pop_reg:17 == 1565 <ldc Register b, Constant 0>
		pop_reg:18 == 1566 <stb Register b, Register a>
		pop_reg:22 == 1567 <ldb Register a, Register d>
	sub:8 == 1568 <@pop_reg Register c>
		pop_reg:10 == 1568 <.define registerToLoad Register c>
		pop_reg:13 == 1568 <ldc Register a, Constant 0>
		pop_reg:14 == 1569 <ldb Register a, Register a>
		pop_reg:15 == 1570 <ldc Register b, Constant 1>
		pop_reg:16 == 1571 <sub Register a, Register a, Register b>
		pop_reg:17 == 1572 <ldc Register b, Constant 0>
		pop_reg:18 == 1573 <stb Register b, Register a>
		pop_reg:22 == 1574 <ldb Register a, Register c>
	sub:9 == 1575 <sub Register d, Register c, Register d>
	sub:10 == 1576 <@push_reg Register d>
		push_reg:10 == 1576 <.define registerToPush Register d>
		push_reg:13 == 1576 <ldc Register a, Constant 0>
		push_reg:14 == 1577 <ldb Register a, Register a>
		push_reg:15 == 1578 <stb Register a, Register d>
		push_reg:19 == 1579 <ldc Register b, Constant 1>
		push_reg:20 == 1580 <add Register a, Register a, Register b>
		push_reg:21 == 1581 <ldc Register b, Constant 0>
		push_reg:22 == 1582 <stb Register b, Register a>
pong.pa2:272 == 1583 <@pop_mem_v Constant 21>
	pop_mem_v:6 == 1583 <.define val Register c>
	pop_mem_v:7 == 1583 <.define addr Constant 21>
	pop_mem_v:9 == 1583 <@pop_reg Register c>
		pop_reg:10 == 1583 <.define registerToLoad Register c>
		pop_reg:13 == 1583 <ldc Register a, Constant 0>
		pop_reg:14 == 1584 <ldb Register a, Register a>
		pop_reg:15 == 1585 <ldc Register b, Constant 1>
		pop_reg:16 == 1586 <sub Register a, Register a, Register b>
		pop_reg:17 == 1587 <ldc Register b, Constant 0>
		pop_reg:18 == 1588 <stb Register b, Register a>
		pop_reg:22 == 1589 <ldb Register a, Register c>
	pop_mem_v:11 == 1590 <@ldc Register b, Constant 21>
		ldc:1 == 1590 <.define writeReg Register b>
		ldc:2 == 1590 <.define const Constant 21>
		ldc:4 == 1590 <ldc Register a, Constant 0>
		ldc:5 == 1591 <ldc Register b, Constant 12>
		ldc:6 == 1592 <shl Register a, Register a, Register b>
		ldc:7 == 1593 <ldc Register b, Constant 21>
		ldc:8 == 1594 <or Register b, Register a, Register b>
	pop_mem_v:12 == 1595 <stb Register b, Register c>
pong.pa2:274 == 1596 <@return >
	return:2 == 1596 <ldc Register b, Constant 3>
	return:3 == 1597 <ldb Register b, Register b>
	return:4 == 1598 <ldc Register a, Constant 0>
	return:5 == 1599 <stb Register a, Register b>
	return:7 == 1600 <@pop_reg Register d>
		pop_reg:10 == 1600 <.define registerToLoad Register d>
		pop_reg:13 == 1600 <ldc Register a, Constant 0>
		pop_reg:14 == 1601 <ldb Register a, Register a>
		pop_reg:15 == 1602 <ldc Register b, Constant 1>
		pop_reg:16 == 1603 <sub Register a, Register a, Register b>
		pop_reg:17 == 1604 <ldc Register b, Constant 0>
		pop_reg:18 == 1605 <stb Register b, Register a>
		pop_reg:22 == 1606 <ldb Register a, Register d>
	return:9 == 1607 <jump Register d>
pong.pa2:291 == 1608 <@function Constant 0>
	function:19 == 1608 <.define loccount Constant 0>
	function:22 == 1608 <ldc Register a, Constant 0>
	function:23 == 1609 <ldb Register a, Register a>
	function:24 == 1610 <ldc Register b, Constant 3>
	function:25 == 1611 <stb Register b, Register a>
	function:28 == 1612 <ldc Register a, Constant 0>
	function:29 == 1613 <ldb Register a, Register b>
	function:30 == 1614 <ldc Register c, Constant 0>
	function:31 == 1615 <add Register b, Register b, Register c>
	function:32 == 1616 <stb Register a, Register b>
pong.pa2:294 == 1617 <@call Constant 2071, Constant 0>
	call:11 == 1617 <.define functionLabel Constant 2071>
	call:12 == 1617 <.define argcount Constant 0>
	call:15 == 1617 <@push_mem Constant 2>
		push_mem:6 == 1617 <.define addr Register b>
		push_mem:7 == 1617 <.define value Register b>
		push_mem:9 == 1617 <@ldc Register b, Constant 2>
			ldc:1 == 1617 <.define writeReg Register b>
			ldc:2 == 1617 <.define const Constant 2>
			ldc:4 == 1617 <ldc Register a, Constant 0>
			ldc:5 == 1618 <ldc Register b, Constant 12>
			ldc:6 == 1619 <shl Register a, Register a, Register b>
			ldc:7 == 1620 <ldc Register b, Constant 2>
			ldc:8 == 1621 <or Register b, Register a, Register b>
		push_mem:10 == 1622 <ldb Register b, Register b>
		push_mem:12 == 1623 <@push_reg Register b>
			push_reg:10 == 1623 <.define registerToPush Register b>
			push_reg:13 == 1623 <ldc Register a, Constant 0>
			push_reg:14 == 1624 <ldb Register a, Register a>
			push_reg:15 == 1625 <stb Register a, Register b>
			push_reg:19 == 1626 <ldc Register b, Constant 1>
			push_reg:20 == 1627 <add Register a, Register a, Register b>
			push_reg:21 == 1628 <ldc Register b, Constant 0>
			push_reg:22 == 1629 <stb Register b, Register a>
	call:16 == 1630 <@push_mem Constant 3>
		push_mem:6 == 1630 <.define addr Register b>
		push_mem:7 == 1630 <.define value Register b>
		push_mem:9 == 1630 <@ldc Register b, Constant 3>
			ldc:1 == 1630 <.define writeReg Register b>
			ldc:2 == 1630 <.define const Constant 3>
			ldc:4 == 1630 <ldc Register a, Constant 0>
			ldc:5 == 1631 <ldc Register b, Constant 12>
			ldc:6 == 1632 <shl Register a, Register a, Register b>
			ldc:7 == 1633 <ldc Register b, Constant 3>
			ldc:8 == 1634 <or Register b, Register a, Register b>
		push_mem:10 == 1635 <ldb Register b, Register b>
		push_mem:12 == 1636 <@push_reg Register b>
			push_reg:10 == 1636 <.define registerToPush Register b>
			push_reg:13 == 1636 <ldc Register a, Constant 0>
			push_reg:14 == 1637 <ldb Register a, Register a>
			push_reg:15 == 1638 <stb Register a, Register b>
			push_reg:19 == 1639 <ldc Register b, Constant 1>
			push_reg:20 == 1640 <add Register a, Register a, Register b>
			push_reg:21 == 1641 <ldc Register b, Constant 0>
			push_reg:22 == 1642 <stb Register b, Register a>
	call:19 == 1643 <@push_const Constant 1667>
		push_const:6 == 1643 <.define constantToPush Constant 1667>
		push_const:12 == 1643 <@ldc Register b, Constant 1667>
			ldc:1 == 1643 <.define writeReg Register b>
			ldc:2 == 1643 <.define const Constant 1667>
			ldc:4 == 1643 <ldc Register a, Constant 0>
			ldc:5 == 1644 <ldc Register b, Constant 12>
			ldc:6 == 1645 <shl Register a, Register a, Register b>
			ldc:7 == 1646 <ldc Register b, Constant 1667>
			ldc:8 == 1647 <or Register b, Register a, Register b>
		push_const:14 == 1648 <@push_reg Register b>
			push_reg:10 == 1648 <.define registerToPush Register b>
			push_reg:13 == 1648 <ldc Register a, Constant 0>
			push_reg:14 == 1649 <ldb Register a, Register a>
			push_reg:15 == 1650 <stb Register a, Register b>
			push_reg:19 == 1651 <ldc Register b, Constant 1>
			push_reg:20 == 1652 <add Register a, Register a, Register b>
			push_reg:21 == 1653 <ldc Register b, Constant 0>
			push_reg:22 == 1654 <stb Register b, Register a>
	call:24 == 1655 <ldc Register a, Constant 0>
	call:25 == 1656 <ldb Register a, Register c>
	call:26 == 1657 <ldc Register b, Constant 3>
	call:27 == 1658 <sub Register c, Register c, Register b>
	call:28 == 1659 <ldc Register a, Constant 2>
	call:29 == 1660 <stb Register a, Register c>
	call:39 == 1661 <@ldc Register a, Constant 2071>
		ldc:1 == 1661 <.define writeReg Register a>
		ldc:2 == 1661 <.define const Constant 2071>
		ldc:4 == 1661 <ldc Register a, Constant 0>
		ldc:5 == 1662 <ldc Register b, Constant 12>
		ldc:6 == 1663 <shl Register a, Register a, Register b>
		ldc:7 == 1664 <ldc Register b, Constant 2071>
		ldc:8 == 1665 <or Register a, Register a, Register b>
	call:40 == 1666 <jmp Register a>
	call:45 == 1667 <ldc Register d, Constant 2>
	call:48 == 1668 <ldb Register d, Register d>
	call:50 == 1669 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 1669 <.define val Register c>
		pop_mem_v:7 == 1669 <.define addr Constant 3>
		pop_mem_v:9 == 1669 <@pop_reg Register c>
			pop_reg:10 == 1669 <.define registerToLoad Register c>
			pop_reg:13 == 1669 <ldc Register a, Constant 0>
			pop_reg:14 == 1670 <ldb Register a, Register a>
			pop_reg:15 == 1671 <ldc Register b, Constant 1>
			pop_reg:16 == 1672 <sub Register a, Register a, Register b>
			pop_reg:17 == 1673 <ldc Register b, Constant 0>
			pop_reg:18 == 1674 <stb Register b, Register a>
			pop_reg:22 == 1675 <ldb Register a, Register c>
		pop_mem_v:11 == 1676 <@ldc Register b, Constant 3>
			ldc:1 == 1676 <.define writeReg Register b>
			ldc:2 == 1676 <.define const Constant 3>
			ldc:4 == 1676 <ldc Register a, Constant 0>
			ldc:5 == 1677 <ldc Register b, Constant 12>
			ldc:6 == 1678 <shl Register a, Register a, Register b>
			ldc:7 == 1679 <ldc Register b, Constant 3>
			ldc:8 == 1680 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1681 <stb Register b, Register c>
	call:51 == 1682 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 1682 <.define val Register c>
		pop_mem_v:7 == 1682 <.define addr Constant 2>
		pop_mem_v:9 == 1682 <@pop_reg Register c>
			pop_reg:10 == 1682 <.define registerToLoad Register c>
			pop_reg:13 == 1682 <ldc Register a, Constant 0>
			pop_reg:14 == 1683 <ldb Register a, Register a>
			pop_reg:15 == 1684 <ldc Register b, Constant 1>
			pop_reg:16 == 1685 <sub Register a, Register a, Register b>
			pop_reg:17 == 1686 <ldc Register b, Constant 0>
			pop_reg:18 == 1687 <stb Register b, Register a>
			pop_reg:22 == 1688 <ldb Register a, Register c>
		pop_mem_v:11 == 1689 <@ldc Register b, Constant 2>
			ldc:1 == 1689 <.define writeReg Register b>
			ldc:2 == 1689 <.define const Constant 2>
			ldc:4 == 1689 <ldc Register a, Constant 0>
			ldc:5 == 1690 <ldc Register b, Constant 12>
			ldc:6 == 1691 <shl Register a, Register a, Register b>
			ldc:7 == 1692 <ldc Register b, Constant 2>
			ldc:8 == 1693 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1694 <stb Register b, Register c>
	call:53 == 1695 <ldc Register c, Constant 0>
	call:54 == 1696 <stb Register c, Register d>
pong.pa2:296 == 1697 <@push_mem Constant 18>
	push_mem:6 == 1697 <.define addr Register b>
	push_mem:7 == 1697 <.define value Register b>
	push_mem:9 == 1697 <@ldc Register b, Constant 18>
		ldc:1 == 1697 <.define writeReg Register b>
		ldc:2 == 1697 <.define const Constant 18>
		ldc:4 == 1697 <ldc Register a, Constant 0>
		ldc:5 == 1698 <ldc Register b, Constant 12>
		ldc:6 == 1699 <shl Register a, Register a, Register b>
		ldc:7 == 1700 <ldc Register b, Constant 18>
		ldc:8 == 1701 <or Register b, Register a, Register b>
	push_mem:10 == 1702 <ldb Register b, Register b>
	push_mem:12 == 1703 <@push_reg Register b>
		push_reg:10 == 1703 <.define registerToPush Register b>
		push_reg:13 == 1703 <ldc Register a, Constant 0>
		push_reg:14 == 1704 <ldb Register a, Register a>
		push_reg:15 == 1705 <stb Register a, Register b>
		push_reg:19 == 1706 <ldc Register b, Constant 1>
		push_reg:20 == 1707 <add Register a, Register a, Register b>
		push_reg:21 == 1708 <ldc Register b, Constant 0>
		push_reg:22 == 1709 <stb Register b, Register a>
pong.pa2:297 == 1710 <@push_mem Constant 19>
	push_mem:6 == 1710 <.define addr Register b>
	push_mem:7 == 1710 <.define value Register b>
	push_mem:9 == 1710 <@ldc Register b, Constant 19>
		ldc:1 == 1710 <.define writeReg Register b>
		ldc:2 == 1710 <.define const Constant 19>
		ldc:4 == 1710 <ldc Register a, Constant 0>
		ldc:5 == 1711 <ldc Register b, Constant 12>
		ldc:6 == 1712 <shl Register a, Register a, Register b>
		ldc:7 == 1713 <ldc Register b, Constant 19>
		ldc:8 == 1714 <or Register b, Register a, Register b>
	push_mem:10 == 1715 <ldb Register b, Register b>
	push_mem:12 == 1716 <@push_reg Register b>
		push_reg:10 == 1716 <.define registerToPush Register b>
		push_reg:13 == 1716 <ldc Register a, Constant 0>
		push_reg:14 == 1717 <ldb Register a, Register a>
		push_reg:15 == 1718 <stb Register a, Register b>
		push_reg:19 == 1719 <ldc Register b, Constant 1>
		push_reg:20 == 1720 <add Register a, Register a, Register b>
		push_reg:21 == 1721 <ldc Register b, Constant 0>
		push_reg:22 == 1722 <stb Register b, Register a>
pong.pa2:299 == 1723 <@push_const Constant 0>
	push_const:6 == 1723 <.define constantToPush Constant 0>
	push_const:12 == 1723 <@ldc Register b, Constant 0>
		ldc:1 == 1723 <.define writeReg Register b>
		ldc:2 == 1723 <.define const Constant 0>
		ldc:4 == 1723 <ldc Register a, Constant 0>
		ldc:5 == 1724 <ldc Register b, Constant 12>
		ldc:6 == 1725 <shl Register a, Register a, Register b>
		ldc:7 == 1726 <ldc Register b, Constant 0>
		ldc:8 == 1727 <or Register b, Register a, Register b>
	push_const:14 == 1728 <@push_reg Register b>
		push_reg:10 == 1728 <.define registerToPush Register b>
		push_reg:13 == 1728 <ldc Register a, Constant 0>
		push_reg:14 == 1729 <ldb Register a, Register a>
		push_reg:15 == 1730 <stb Register a, Register b>
		push_reg:19 == 1731 <ldc Register b, Constant 1>
		push_reg:20 == 1732 <add Register a, Register a, Register b>
		push_reg:21 == 1733 <ldc Register b, Constant 0>
		push_reg:22 == 1734 <stb Register b, Register a>
pong.pa2:300 == 1735 <@call Constant 2814, Constant 3>
	call:11 == 1735 <.define functionLabel Constant 2814>
	call:12 == 1735 <.define argcount Constant 3>
	call:15 == 1735 <@push_mem Constant 2>
		push_mem:6 == 1735 <.define addr Register b>
		push_mem:7 == 1735 <.define value Register b>
		push_mem:9 == 1735 <@ldc Register b, Constant 2>
			ldc:1 == 1735 <.define writeReg Register b>
			ldc:2 == 1735 <.define const Constant 2>
			ldc:4 == 1735 <ldc Register a, Constant 0>
			ldc:5 == 1736 <ldc Register b, Constant 12>
			ldc:6 == 1737 <shl Register a, Register a, Register b>
			ldc:7 == 1738 <ldc Register b, Constant 2>
			ldc:8 == 1739 <or Register b, Register a, Register b>
		push_mem:10 == 1740 <ldb Register b, Register b>
		push_mem:12 == 1741 <@push_reg Register b>
			push_reg:10 == 1741 <.define registerToPush Register b>
			push_reg:13 == 1741 <ldc Register a, Constant 0>
			push_reg:14 == 1742 <ldb Register a, Register a>
			push_reg:15 == 1743 <stb Register a, Register b>
			push_reg:19 == 1744 <ldc Register b, Constant 1>
			push_reg:20 == 1745 <add Register a, Register a, Register b>
			push_reg:21 == 1746 <ldc Register b, Constant 0>
			push_reg:22 == 1747 <stb Register b, Register a>
	call:16 == 1748 <@push_mem Constant 3>
		push_mem:6 == 1748 <.define addr Register b>
		push_mem:7 == 1748 <.define value Register b>
		push_mem:9 == 1748 <@ldc Register b, Constant 3>
			ldc:1 == 1748 <.define writeReg Register b>
			ldc:2 == 1748 <.define const Constant 3>
			ldc:4 == 1748 <ldc Register a, Constant 0>
			ldc:5 == 1749 <ldc Register b, Constant 12>
			ldc:6 == 1750 <shl Register a, Register a, Register b>
			ldc:7 == 1751 <ldc Register b, Constant 3>
			ldc:8 == 1752 <or Register b, Register a, Register b>
		push_mem:10 == 1753 <ldb Register b, Register b>
		push_mem:12 == 1754 <@push_reg Register b>
			push_reg:10 == 1754 <.define registerToPush Register b>
			push_reg:13 == 1754 <ldc Register a, Constant 0>
			push_reg:14 == 1755 <ldb Register a, Register a>
			push_reg:15 == 1756 <stb Register a, Register b>
			push_reg:19 == 1757 <ldc Register b, Constant 1>
			push_reg:20 == 1758 <add Register a, Register a, Register b>
			push_reg:21 == 1759 <ldc Register b, Constant 0>
			push_reg:22 == 1760 <stb Register b, Register a>
	call:19 == 1761 <@push_const Constant 1785>
		push_const:6 == 1761 <.define constantToPush Constant 1785>
		push_const:12 == 1761 <@ldc Register b, Constant 1785>
			ldc:1 == 1761 <.define writeReg Register b>
			ldc:2 == 1761 <.define const Constant 1785>
			ldc:4 == 1761 <ldc Register a, Constant 0>
			ldc:5 == 1762 <ldc Register b, Constant 12>
			ldc:6 == 1763 <shl Register a, Register a, Register b>
			ldc:7 == 1764 <ldc Register b, Constant 1785>
			ldc:8 == 1765 <or Register b, Register a, Register b>
		push_const:14 == 1766 <@push_reg Register b>
			push_reg:10 == 1766 <.define registerToPush Register b>
			push_reg:13 == 1766 <ldc Register a, Constant 0>
			push_reg:14 == 1767 <ldb Register a, Register a>
			push_reg:15 == 1768 <stb Register a, Register b>
			push_reg:19 == 1769 <ldc Register b, Constant 1>
			push_reg:20 == 1770 <add Register a, Register a, Register b>
			push_reg:21 == 1771 <ldc Register b, Constant 0>
			push_reg:22 == 1772 <stb Register b, Register a>
	call:24 == 1773 <ldc Register a, Constant 0>
	call:25 == 1774 <ldb Register a, Register c>
	call:26 == 1775 <ldc Register b, Constant 6>
	call:27 == 1776 <sub Register c, Register c, Register b>
	call:28 == 1777 <ldc Register a, Constant 2>
	call:29 == 1778 <stb Register a, Register c>
	call:39 == 1779 <@ldc Register a, Constant 2814>
		ldc:1 == 1779 <.define writeReg Register a>
		ldc:2 == 1779 <.define const Constant 2814>
		ldc:4 == 1779 <ldc Register a, Constant 0>
		ldc:5 == 1780 <ldc Register b, Constant 12>
		ldc:6 == 1781 <shl Register a, Register a, Register b>
		ldc:7 == 1782 <ldc Register b, Constant 2814>
		ldc:8 == 1783 <or Register a, Register a, Register b>
	call:40 == 1784 <jmp Register a>
	call:45 == 1785 <ldc Register d, Constant 2>
	call:48 == 1786 <ldb Register d, Register d>
	call:50 == 1787 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 1787 <.define val Register c>
		pop_mem_v:7 == 1787 <.define addr Constant 3>
		pop_mem_v:9 == 1787 <@pop_reg Register c>
			pop_reg:10 == 1787 <.define registerToLoad Register c>
			pop_reg:13 == 1787 <ldc Register a, Constant 0>
			pop_reg:14 == 1788 <ldb Register a, Register a>
			pop_reg:15 == 1789 <ldc Register b, Constant 1>
			pop_reg:16 == 1790 <sub Register a, Register a, Register b>
			pop_reg:17 == 1791 <ldc Register b, Constant 0>
			pop_reg:18 == 1792 <stb Register b, Register a>
			pop_reg:22 == 1793 <ldb Register a, Register c>
		pop_mem_v:11 == 1794 <@ldc Register b, Constant 3>
			ldc:1 == 1794 <.define writeReg Register b>
			ldc:2 == 1794 <.define const Constant 3>
			ldc:4 == 1794 <ldc Register a, Constant 0>
			ldc:5 == 1795 <ldc Register b, Constant 12>
			ldc:6 == 1796 <shl Register a, Register a, Register b>
			ldc:7 == 1797 <ldc Register b, Constant 3>
			ldc:8 == 1798 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1799 <stb Register b, Register c>
	call:51 == 1800 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 1800 <.define val Register c>
		pop_mem_v:7 == 1800 <.define addr Constant 2>
		pop_mem_v:9 == 1800 <@pop_reg Register c>
			pop_reg:10 == 1800 <.define registerToLoad Register c>
			pop_reg:13 == 1800 <ldc Register a, Constant 0>
			pop_reg:14 == 1801 <ldb Register a, Register a>
			pop_reg:15 == 1802 <ldc Register b, Constant 1>
			pop_reg:16 == 1803 <sub Register a, Register a, Register b>
			pop_reg:17 == 1804 <ldc Register b, Constant 0>
			pop_reg:18 == 1805 <stb Register b, Register a>
			pop_reg:22 == 1806 <ldb Register a, Register c>
		pop_mem_v:11 == 1807 <@ldc Register b, Constant 2>
			ldc:1 == 1807 <.define writeReg Register b>
			ldc:2 == 1807 <.define const Constant 2>
			ldc:4 == 1807 <ldc Register a, Constant 0>
			ldc:5 == 1808 <ldc Register b, Constant 12>
			ldc:6 == 1809 <shl Register a, Register a, Register b>
			ldc:7 == 1810 <ldc Register b, Constant 2>
			ldc:8 == 1811 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1812 <stb Register b, Register c>
	call:53 == 1813 <ldc Register c, Constant 0>
	call:54 == 1814 <stb Register c, Register d>
pong.pa2:302 == 1815 <@push_const Constant 56>
	push_const:6 == 1815 <.define constantToPush Constant 56>
	push_const:12 == 1815 <@ldc Register b, Constant 56>
		ldc:1 == 1815 <.define writeReg Register b>
		ldc:2 == 1815 <.define const Constant 56>
		ldc:4 == 1815 <ldc Register a, Constant 0>
		ldc:5 == 1816 <ldc Register b, Constant 12>
		ldc:6 == 1817 <shl Register a, Register a, Register b>
		ldc:7 == 1818 <ldc Register b, Constant 56>
		ldc:8 == 1819 <or Register b, Register a, Register b>
	push_const:14 == 1820 <@push_reg Register b>
		push_reg:10 == 1820 <.define registerToPush Register b>
		push_reg:13 == 1820 <ldc Register a, Constant 0>
		push_reg:14 == 1821 <ldb Register a, Register a>
		push_reg:15 == 1822 <stb Register a, Register b>
		push_reg:19 == 1823 <ldc Register b, Constant 1>
		push_reg:20 == 1824 <add Register a, Register a, Register b>
		push_reg:21 == 1825 <ldc Register b, Constant 0>
		push_reg:22 == 1826 <stb Register b, Register a>
pong.pa2:303 == 1827 <@push_mem Constant 17>
	push_mem:6 == 1827 <.define addr Register b>
	push_mem:7 == 1827 <.define value Register b>
	push_mem:9 == 1827 <@ldc Register b, Constant 17>
		ldc:1 == 1827 <.define writeReg Register b>
		ldc:2 == 1827 <.define const Constant 17>
		ldc:4 == 1827 <ldc Register a, Constant 0>
		ldc:5 == 1828 <ldc Register b, Constant 12>
		ldc:6 == 1829 <shl Register a, Register a, Register b>
		ldc:7 == 1830 <ldc Register b, Constant 17>
		ldc:8 == 1831 <or Register b, Register a, Register b>
	push_mem:10 == 1832 <ldb Register b, Register b>
	push_mem:12 == 1833 <@push_reg Register b>
		push_reg:10 == 1833 <.define registerToPush Register b>
		push_reg:13 == 1833 <ldc Register a, Constant 0>
		push_reg:14 == 1834 <ldb Register a, Register a>
		push_reg:15 == 1835 <stb Register a, Register b>
		push_reg:19 == 1836 <ldc Register b, Constant 1>
		push_reg:20 == 1837 <add Register a, Register a, Register b>
		push_reg:21 == 1838 <ldc Register b, Constant 0>
		push_reg:22 == 1839 <stb Register b, Register a>
pong.pa2:304 == 1840 <@push_const Constant 9>
	push_const:6 == 1840 <.define constantToPush Constant 9>
	push_const:12 == 1840 <@ldc Register b, Constant 9>
		ldc:1 == 1840 <.define writeReg Register b>
		ldc:2 == 1840 <.define const Constant 9>
		ldc:4 == 1840 <ldc Register a, Constant 0>
		ldc:5 == 1841 <ldc Register b, Constant 12>
		ldc:6 == 1842 <shl Register a, Register a, Register b>
		ldc:7 == 1843 <ldc Register b, Constant 9>
		ldc:8 == 1844 <or Register b, Register a, Register b>
	push_const:14 == 1845 <@push_reg Register b>
		push_reg:10 == 1845 <.define registerToPush Register b>
		push_reg:13 == 1845 <ldc Register a, Constant 0>
		push_reg:14 == 1846 <ldb Register a, Register a>
		push_reg:15 == 1847 <stb Register a, Register b>
		push_reg:19 == 1848 <ldc Register b, Constant 1>
		push_reg:20 == 1849 <add Register a, Register a, Register b>
		push_reg:21 == 1850 <ldc Register b, Constant 0>
		push_reg:22 == 1851 <stb Register b, Register a>
pong.pa2:305 == 1852 <@call Constant 2204, Constant 3>
	call:11 == 1852 <.define functionLabel Constant 2204>
	call:12 == 1852 <.define argcount Constant 3>
	call:15 == 1852 <@push_mem Constant 2>
		push_mem:6 == 1852 <.define addr Register b>
		push_mem:7 == 1852 <.define value Register b>
		push_mem:9 == 1852 <@ldc Register b, Constant 2>
			ldc:1 == 1852 <.define writeReg Register b>
			ldc:2 == 1852 <.define const Constant 2>
			ldc:4 == 1852 <ldc Register a, Constant 0>
			ldc:5 == 1853 <ldc Register b, Constant 12>
			ldc:6 == 1854 <shl Register a, Register a, Register b>
			ldc:7 == 1855 <ldc Register b, Constant 2>
			ldc:8 == 1856 <or Register b, Register a, Register b>
		push_mem:10 == 1857 <ldb Register b, Register b>
		push_mem:12 == 1858 <@push_reg Register b>
			push_reg:10 == 1858 <.define registerToPush Register b>
			push_reg:13 == 1858 <ldc Register a, Constant 0>
			push_reg:14 == 1859 <ldb Register a, Register a>
			push_reg:15 == 1860 <stb Register a, Register b>
			push_reg:19 == 1861 <ldc Register b, Constant 1>
			push_reg:20 == 1862 <add Register a, Register a, Register b>
			push_reg:21 == 1863 <ldc Register b, Constant 0>
			push_reg:22 == 1864 <stb Register b, Register a>
	call:16 == 1865 <@push_mem Constant 3>
		push_mem:6 == 1865 <.define addr Register b>
		push_mem:7 == 1865 <.define value Register b>
		push_mem:9 == 1865 <@ldc Register b, Constant 3>
			ldc:1 == 1865 <.define writeReg Register b>
			ldc:2 == 1865 <.define const Constant 3>
			ldc:4 == 1865 <ldc Register a, Constant 0>
			ldc:5 == 1866 <ldc Register b, Constant 12>
			ldc:6 == 1867 <shl Register a, Register a, Register b>
			ldc:7 == 1868 <ldc Register b, Constant 3>
			ldc:8 == 1869 <or Register b, Register a, Register b>
		push_mem:10 == 1870 <ldb Register b, Register b>
		push_mem:12 == 1871 <@push_reg Register b>
			push_reg:10 == 1871 <.define registerToPush Register b>
			push_reg:13 == 1871 <ldc Register a, Constant 0>
			push_reg:14 == 1872 <ldb Register a, Register a>
			push_reg:15 == 1873 <stb Register a, Register b>
			push_reg:19 == 1874 <ldc Register b, Constant 1>
			push_reg:20 == 1875 <add Register a, Register a, Register b>
			push_reg:21 == 1876 <ldc Register b, Constant 0>
			push_reg:22 == 1877 <stb Register b, Register a>
	call:19 == 1878 <@push_const Constant 1902>
		push_const:6 == 1878 <.define constantToPush Constant 1902>
		push_const:12 == 1878 <@ldc Register b, Constant 1902>
			ldc:1 == 1878 <.define writeReg Register b>
			ldc:2 == 1878 <.define const Constant 1902>
			ldc:4 == 1878 <ldc Register a, Constant 0>
			ldc:5 == 1879 <ldc Register b, Constant 12>
			ldc:6 == 1880 <shl Register a, Register a, Register b>
			ldc:7 == 1881 <ldc Register b, Constant 1902>
			ldc:8 == 1882 <or Register b, Register a, Register b>
		push_const:14 == 1883 <@push_reg Register b>
			push_reg:10 == 1883 <.define registerToPush Register b>
			push_reg:13 == 1883 <ldc Register a, Constant 0>
			push_reg:14 == 1884 <ldb Register a, Register a>
			push_reg:15 == 1885 <stb Register a, Register b>
			push_reg:19 == 1886 <ldc Register b, Constant 1>
			push_reg:20 == 1887 <add Register a, Register a, Register b>
			push_reg:21 == 1888 <ldc Register b, Constant 0>
			push_reg:22 == 1889 <stb Register b, Register a>
	call:24 == 1890 <ldc Register a, Constant 0>
	call:25 == 1891 <ldb Register a, Register c>
	call:26 == 1892 <ldc Register b, Constant 6>
	call:27 == 1893 <sub Register c, Register c, Register b>
	call:28 == 1894 <ldc Register a, Constant 2>
	call:29 == 1895 <stb Register a, Register c>
	call:39 == 1896 <@ldc Register a, Constant 2204>
		ldc:1 == 1896 <.define writeReg Register a>
		ldc:2 == 1896 <.define const Constant 2204>
		ldc:4 == 1896 <ldc Register a, Constant 0>
		ldc:5 == 1897 <ldc Register b, Constant 12>
		ldc:6 == 1898 <shl Register a, Register a, Register b>
		ldc:7 == 1899 <ldc Register b, Constant 2204>
		ldc:8 == 1900 <or Register a, Register a, Register b>
	call:40 == 1901 <jmp Register a>
	call:45 == 1902 <ldc Register d, Constant 2>
	call:48 == 1903 <ldb Register d, Register d>
	call:50 == 1904 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 1904 <.define val Register c>
		pop_mem_v:7 == 1904 <.define addr Constant 3>
		pop_mem_v:9 == 1904 <@pop_reg Register c>
			pop_reg:10 == 1904 <.define registerToLoad Register c>
			pop_reg:13 == 1904 <ldc Register a, Constant 0>
			pop_reg:14 == 1905 <ldb Register a, Register a>
			pop_reg:15 == 1906 <ldc Register b, Constant 1>
			pop_reg:16 == 1907 <sub Register a, Register a, Register b>
			pop_reg:17 == 1908 <ldc Register b, Constant 0>
			pop_reg:18 == 1909 <stb Register b, Register a>
			pop_reg:22 == 1910 <ldb Register a, Register c>
		pop_mem_v:11 == 1911 <@ldc Register b, Constant 3>
			ldc:1 == 1911 <.define writeReg Register b>
			ldc:2 == 1911 <.define const Constant 3>
			ldc:4 == 1911 <ldc Register a, Constant 0>
			ldc:5 == 1912 <ldc Register b, Constant 12>
			ldc:6 == 1913 <shl Register a, Register a, Register b>
			ldc:7 == 1914 <ldc Register b, Constant 3>
			ldc:8 == 1915 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1916 <stb Register b, Register c>
	call:51 == 1917 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 1917 <.define val Register c>
		pop_mem_v:7 == 1917 <.define addr Constant 2>
		pop_mem_v:9 == 1917 <@pop_reg Register c>
			pop_reg:10 == 1917 <.define registerToLoad Register c>
			pop_reg:13 == 1917 <ldc Register a, Constant 0>
			pop_reg:14 == 1918 <ldb Register a, Register a>
			pop_reg:15 == 1919 <ldc Register b, Constant 1>
			pop_reg:16 == 1920 <sub Register a, Register a, Register b>
			pop_reg:17 == 1921 <ldc Register b, Constant 0>
			pop_reg:18 == 1922 <stb Register b, Register a>
			pop_reg:22 == 1923 <ldb Register a, Register c>
		pop_mem_v:11 == 1924 <@ldc Register b, Constant 2>
			ldc:1 == 1924 <.define writeReg Register b>
			ldc:2 == 1924 <.define const Constant 2>
			ldc:4 == 1924 <ldc Register a, Constant 0>
			ldc:5 == 1925 <ldc Register b, Constant 12>
			ldc:6 == 1926 <shl Register a, Register a, Register b>
			ldc:7 == 1927 <ldc Register b, Constant 2>
			ldc:8 == 1928 <or Register b, Register a, Register b>
		pop_mem_v:12 == 1929 <stb Register b, Register c>
	call:53 == 1930 <ldc Register c, Constant 0>
	call:54 == 1931 <stb Register c, Register d>
pong.pa2:307 == 1932 <@push_const Constant 8>
	push_const:6 == 1932 <.define constantToPush Constant 8>
	push_const:12 == 1932 <@ldc Register b, Constant 8>
		ldc:1 == 1932 <.define writeReg Register b>
		ldc:2 == 1932 <.define const Constant 8>
		ldc:4 == 1932 <ldc Register a, Constant 0>
		ldc:5 == 1933 <ldc Register b, Constant 12>
		ldc:6 == 1934 <shl Register a, Register a, Register b>
		ldc:7 == 1935 <ldc Register b, Constant 8>
		ldc:8 == 1936 <or Register b, Register a, Register b>
	push_const:14 == 1937 <@push_reg Register b>
		push_reg:10 == 1937 <.define registerToPush Register b>
		push_reg:13 == 1937 <ldc Register a, Constant 0>
		push_reg:14 == 1938 <ldb Register a, Register a>
		push_reg:15 == 1939 <stb Register a, Register b>
		push_reg:19 == 1940 <ldc Register b, Constant 1>
		push_reg:20 == 1941 <add Register a, Register a, Register b>
		push_reg:21 == 1942 <ldc Register b, Constant 0>
		push_reg:22 == 1943 <stb Register b, Register a>
pong.pa2:308 == 1944 <@push_mem Constant 16>
	push_mem:6 == 1944 <.define addr Register b>
	push_mem:7 == 1944 <.define value Register b>
	push_mem:9 == 1944 <@ldc Register b, Constant 16>
		ldc:1 == 1944 <.define writeReg Register b>
		ldc:2 == 1944 <.define const Constant 16>
		ldc:4 == 1944 <ldc Register a, Constant 0>
		ldc:5 == 1945 <ldc Register b, Constant 12>
		ldc:6 == 1946 <shl Register a, Register a, Register b>
		ldc:7 == 1947 <ldc Register b, Constant 16>
		ldc:8 == 1948 <or Register b, Register a, Register b>
	push_mem:10 == 1949 <ldb Register b, Register b>
	push_mem:12 == 1950 <@push_reg Register b>
		push_reg:10 == 1950 <.define registerToPush Register b>
		push_reg:13 == 1950 <ldc Register a, Constant 0>
		push_reg:14 == 1951 <ldb Register a, Register a>
		push_reg:15 == 1952 <stb Register a, Register b>
		push_reg:19 == 1953 <ldc Register b, Constant 1>
		push_reg:20 == 1954 <add Register a, Register a, Register b>
		push_reg:21 == 1955 <ldc Register b, Constant 0>
		push_reg:22 == 1956 <stb Register b, Register a>
pong.pa2:309 == 1957 <@push_const Constant 8>
	push_const:6 == 1957 <.define constantToPush Constant 8>
	push_const:12 == 1957 <@ldc Register b, Constant 8>
		ldc:1 == 1957 <.define writeReg Register b>
		ldc:2 == 1957 <.define const Constant 8>
		ldc:4 == 1957 <ldc Register a, Constant 0>
		ldc:5 == 1958 <ldc Register b, Constant 12>
		ldc:6 == 1959 <shl Register a, Register a, Register b>
		ldc:7 == 1960 <ldc Register b, Constant 8>
		ldc:8 == 1961 <or Register b, Register a, Register b>
	push_const:14 == 1962 <@push_reg Register b>
		push_reg:10 == 1962 <.define registerToPush Register b>
		push_reg:13 == 1962 <ldc Register a, Constant 0>
		push_reg:14 == 1963 <ldb Register a, Register a>
		push_reg:15 == 1964 <stb Register a, Register b>
		push_reg:19 == 1965 <ldc Register b, Constant 1>
		push_reg:20 == 1966 <add Register a, Register a, Register b>
		push_reg:21 == 1967 <ldc Register b, Constant 0>
		push_reg:22 == 1968 <stb Register b, Register a>
pong.pa2:310 == 1969 <@call Constant 2204, Constant 3>
	call:11 == 1969 <.define functionLabel Constant 2204>
	call:12 == 1969 <.define argcount Constant 3>
	call:15 == 1969 <@push_mem Constant 2>
		push_mem:6 == 1969 <.define addr Register b>
		push_mem:7 == 1969 <.define value Register b>
		push_mem:9 == 1969 <@ldc Register b, Constant 2>
			ldc:1 == 1969 <.define writeReg Register b>
			ldc:2 == 1969 <.define const Constant 2>
			ldc:4 == 1969 <ldc Register a, Constant 0>
			ldc:5 == 1970 <ldc Register b, Constant 12>
			ldc:6 == 1971 <shl Register a, Register a, Register b>
			ldc:7 == 1972 <ldc Register b, Constant 2>
			ldc:8 == 1973 <or Register b, Register a, Register b>
		push_mem:10 == 1974 <ldb Register b, Register b>
		push_mem:12 == 1975 <@push_reg Register b>
			push_reg:10 == 1975 <.define registerToPush Register b>
			push_reg:13 == 1975 <ldc Register a, Constant 0>
			push_reg:14 == 1976 <ldb Register a, Register a>
			push_reg:15 == 1977 <stb Register a, Register b>
			push_reg:19 == 1978 <ldc Register b, Constant 1>
			push_reg:20 == 1979 <add Register a, Register a, Register b>
			push_reg:21 == 1980 <ldc Register b, Constant 0>
			push_reg:22 == 1981 <stb Register b, Register a>
	call:16 == 1982 <@push_mem Constant 3>
		push_mem:6 == 1982 <.define addr Register b>
		push_mem:7 == 1982 <.define value Register b>
		push_mem:9 == 1982 <@ldc Register b, Constant 3>
			ldc:1 == 1982 <.define writeReg Register b>
			ldc:2 == 1982 <.define const Constant 3>
			ldc:4 == 1982 <ldc Register a, Constant 0>
			ldc:5 == 1983 <ldc Register b, Constant 12>
			ldc:6 == 1984 <shl Register a, Register a, Register b>
			ldc:7 == 1985 <ldc Register b, Constant 3>
			ldc:8 == 1986 <or Register b, Register a, Register b>
		push_mem:10 == 1987 <ldb Register b, Register b>
		push_mem:12 == 1988 <@push_reg Register b>
			push_reg:10 == 1988 <.define registerToPush Register b>
			push_reg:13 == 1988 <ldc Register a, Constant 0>
			push_reg:14 == 1989 <ldb Register a, Register a>
			push_reg:15 == 1990 <stb Register a, Register b>
			push_reg:19 == 1991 <ldc Register b, Constant 1>
			push_reg:20 == 1992 <add Register a, Register a, Register b>
			push_reg:21 == 1993 <ldc Register b, Constant 0>
			push_reg:22 == 1994 <stb Register b, Register a>
	call:19 == 1995 <@push_const Constant 2019>
		push_const:6 == 1995 <.define constantToPush Constant 2019>
		push_const:12 == 1995 <@ldc Register b, Constant 2019>
			ldc:1 == 1995 <.define writeReg Register b>
			ldc:2 == 1995 <.define const Constant 2019>
			ldc:4 == 1995 <ldc Register a, Constant 0>
			ldc:5 == 1996 <ldc Register b, Constant 12>
			ldc:6 == 1997 <shl Register a, Register a, Register b>
			ldc:7 == 1998 <ldc Register b, Constant 2019>
			ldc:8 == 1999 <or Register b, Register a, Register b>
		push_const:14 == 2000 <@push_reg Register b>
			push_reg:10 == 2000 <.define registerToPush Register b>
			push_reg:13 == 2000 <ldc Register a, Constant 0>
			push_reg:14 == 2001 <ldb Register a, Register a>
			push_reg:15 == 2002 <stb Register a, Register b>
			push_reg:19 == 2003 <ldc Register b, Constant 1>
			push_reg:20 == 2004 <add Register a, Register a, Register b>
			push_reg:21 == 2005 <ldc Register b, Constant 0>
			push_reg:22 == 2006 <stb Register b, Register a>
	call:24 == 2007 <ldc Register a, Constant 0>
	call:25 == 2008 <ldb Register a, Register c>
	call:26 == 2009 <ldc Register b, Constant 6>
	call:27 == 2010 <sub Register c, Register c, Register b>
	call:28 == 2011 <ldc Register a, Constant 2>
	call:29 == 2012 <stb Register a, Register c>
	call:39 == 2013 <@ldc Register a, Constant 2204>
		ldc:1 == 2013 <.define writeReg Register a>
		ldc:2 == 2013 <.define const Constant 2204>
		ldc:4 == 2013 <ldc Register a, Constant 0>
		ldc:5 == 2014 <ldc Register b, Constant 12>
		ldc:6 == 2015 <shl Register a, Register a, Register b>
		ldc:7 == 2016 <ldc Register b, Constant 2204>
		ldc:8 == 2017 <or Register a, Register a, Register b>
	call:40 == 2018 <jmp Register a>
	call:45 == 2019 <ldc Register d, Constant 2>
	call:48 == 2020 <ldb Register d, Register d>
	call:50 == 2021 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 2021 <.define val Register c>
		pop_mem_v:7 == 2021 <.define addr Constant 3>
		pop_mem_v:9 == 2021 <@pop_reg Register c>
			pop_reg:10 == 2021 <.define registerToLoad Register c>
			pop_reg:13 == 2021 <ldc Register a, Constant 0>
			pop_reg:14 == 2022 <ldb Register a, Register a>
			pop_reg:15 == 2023 <ldc Register b, Constant 1>
			pop_reg:16 == 2024 <sub Register a, Register a, Register b>
			pop_reg:17 == 2025 <ldc Register b, Constant 0>
			pop_reg:18 == 2026 <stb Register b, Register a>
			pop_reg:22 == 2027 <ldb Register a, Register c>
		pop_mem_v:11 == 2028 <@ldc Register b, Constant 3>
			ldc:1 == 2028 <.define writeReg Register b>
			ldc:2 == 2028 <.define const Constant 3>
			ldc:4 == 2028 <ldc Register a, Constant 0>
			ldc:5 == 2029 <ldc Register b, Constant 12>
			ldc:6 == 2030 <shl Register a, Register a, Register b>
			ldc:7 == 2031 <ldc Register b, Constant 3>
			ldc:8 == 2032 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2033 <stb Register b, Register c>
	call:51 == 2034 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 2034 <.define val Register c>
		pop_mem_v:7 == 2034 <.define addr Constant 2>
		pop_mem_v:9 == 2034 <@pop_reg Register c>
			pop_reg:10 == 2034 <.define registerToLoad Register c>
			pop_reg:13 == 2034 <ldc Register a, Constant 0>
			pop_reg:14 == 2035 <ldb Register a, Register a>
			pop_reg:15 == 2036 <ldc Register b, Constant 1>
			pop_reg:16 == 2037 <sub Register a, Register a, Register b>
			pop_reg:17 == 2038 <ldc Register b, Constant 0>
			pop_reg:18 == 2039 <stb Register b, Register a>
			pop_reg:22 == 2040 <ldb Register a, Register c>
		pop_mem_v:11 == 2041 <@ldc Register b, Constant 2>
			ldc:1 == 2041 <.define writeReg Register b>
			ldc:2 == 2041 <.define const Constant 2>
			ldc:4 == 2041 <ldc Register a, Constant 0>
			ldc:5 == 2042 <ldc Register b, Constant 12>
			ldc:6 == 2043 <shl Register a, Register a, Register b>
			ldc:7 == 2044 <ldc Register b, Constant 2>
			ldc:8 == 2045 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2046 <stb Register b, Register c>
	call:53 == 2047 <ldc Register c, Constant 0>
	call:54 == 2048 <stb Register c, Register d>
pong.pa2:318 == 2049 <@ldc Register a, Constant 24577>
	ldc:1 == 2049 <.define writeReg Register a>
	ldc:2 == 2049 <.define const Constant 24577>
	ldc:4 == 2049 <ldc Register a, Constant 6>
	ldc:5 == 2050 <ldc Register b, Constant 12>
	ldc:6 == 2051 <shl Register a, Register a, Register b>
	ldc:7 == 2052 <ldc Register b, Constant 1>
	ldc:8 == 2053 <or Register a, Register a, Register b>
pong.pa2:319 == 2054 <ldb Register a, Register b>
pong.pa2:320 == 2055 <not Register b, Register b>
pong.pa2:322 == 2056 <ldc Register c, Constant 1>
pong.pa2:323 == 2057 <and Register b, Register b, Register c>
pong.pa2:324 == 2058 <stb Register a, Register b>
pong.pa2:327 == 2059 <@return >
	return:2 == 2059 <ldc Register b, Constant 3>
	return:3 == 2060 <ldb Register b, Register b>
	return:4 == 2061 <ldc Register a, Constant 0>
	return:5 == 2062 <stb Register a, Register b>
	return:7 == 2063 <@pop_reg Register d>
		pop_reg:10 == 2063 <.define registerToLoad Register d>
		pop_reg:13 == 2063 <ldc Register a, Constant 0>
		pop_reg:14 == 2064 <ldb Register a, Register a>
		pop_reg:15 == 2065 <ldc Register b, Constant 1>
		pop_reg:16 == 2066 <sub Register a, Register a, Register b>
		pop_reg:17 == 2067 <ldc Register b, Constant 0>
		pop_reg:18 == 2068 <stb Register b, Register a>
		pop_reg:22 == 2069 <ldb Register a, Register d>
	return:9 == 2070 <jump Register d>
pong.pa2:333 == 2071 <@function Constant 0>
	function:19 == 2071 <.define loccount Constant 0>
	function:22 == 2071 <ldc Register a, Constant 0>
	function:23 == 2072 <ldb Register a, Register a>
	function:24 == 2073 <ldc Register b, Constant 3>
	function:25 == 2074 <stb Register b, Register a>
	function:28 == 2075 <ldc Register a, Constant 0>
	function:29 == 2076 <ldb Register a, Register b>
	function:30 == 2077 <ldc Register c, Constant 0>
	function:31 == 2078 <add Register b, Register b, Register c>
	function:32 == 2079 <stb Register a, Register b>
pong.pa2:343 == 2080 <@call_value Constant 3057, Constant 0>
	call_value:1 == 2080 <@call Constant 3057, Constant 0>
		call:11 == 2080 <.define functionLabel Constant 3057>
		call:12 == 2080 <.define argcount Constant 0>
		call:15 == 2080 <@push_mem Constant 2>
			push_mem:6 == 2080 <.define addr Register b>
			push_mem:7 == 2080 <.define value Register b>
			push_mem:9 == 2080 <@ldc Register b, Constant 2>
				ldc:1 == 2080 <.define writeReg Register b>
				ldc:2 == 2080 <.define const Constant 2>
				ldc:4 == 2080 <ldc Register a, Constant 0>
				ldc:5 == 2081 <ldc Register b, Constant 12>
				ldc:6 == 2082 <shl Register a, Register a, Register b>
				ldc:7 == 2083 <ldc Register b, Constant 2>
				ldc:8 == 2084 <or Register b, Register a, Register b>
			push_mem:10 == 2085 <ldb Register b, Register b>
			push_mem:12 == 2086 <@push_reg Register b>
				push_reg:10 == 2086 <.define registerToPush Register b>
				push_reg:13 == 2086 <ldc Register a, Constant 0>
				push_reg:14 == 2087 <ldb Register a, Register a>
				push_reg:15 == 2088 <stb Register a, Register b>
				push_reg:19 == 2089 <ldc Register b, Constant 1>
				push_reg:20 == 2090 <add Register a, Register a, Register b>
				push_reg:21 == 2091 <ldc Register b, Constant 0>
				push_reg:22 == 2092 <stb Register b, Register a>
		call:16 == 2093 <@push_mem Constant 3>
			push_mem:6 == 2093 <.define addr Register b>
			push_mem:7 == 2093 <.define value Register b>
			push_mem:9 == 2093 <@ldc Register b, Constant 3>
				ldc:1 == 2093 <.define writeReg Register b>
				ldc:2 == 2093 <.define const Constant 3>
				ldc:4 == 2093 <ldc Register a, Constant 0>
				ldc:5 == 2094 <ldc Register b, Constant 12>
				ldc:6 == 2095 <shl Register a, Register a, Register b>
				ldc:7 == 2096 <ldc Register b, Constant 3>
				ldc:8 == 2097 <or Register b, Register a, Register b>
			push_mem:10 == 2098 <ldb Register b, Register b>
			push_mem:12 == 2099 <@push_reg Register b>
				push_reg:10 == 2099 <.define registerToPush Register b>
				push_reg:13 == 2099 <ldc Register a, Constant 0>
				push_reg:14 == 2100 <ldb Register a, Register a>
				push_reg:15 == 2101 <stb Register a, Register b>
				push_reg:19 == 2102 <ldc Register b, Constant 1>
				push_reg:20 == 2103 <add Register a, Register a, Register b>
				push_reg:21 == 2104 <ldc Register b, Constant 0>
				push_reg:22 == 2105 <stb Register b, Register a>
		call:19 == 2106 <@push_const Constant 2130>
			push_const:6 == 2106 <.define constantToPush Constant 2130>
			push_const:12 == 2106 <@ldc Register b, Constant 2130>
				ldc:1 == 2106 <.define writeReg Register b>
				ldc:2 == 2106 <.define const Constant 2130>
				ldc:4 == 2106 <ldc Register a, Constant 0>
				ldc:5 == 2107 <ldc Register b, Constant 12>
				ldc:6 == 2108 <shl Register a, Register a, Register b>
				ldc:7 == 2109 <ldc Register b, Constant 2130>
				ldc:8 == 2110 <or Register b, Register a, Register b>
			push_const:14 == 2111 <@push_reg Register b>
				push_reg:10 == 2111 <.define registerToPush Register b>
				push_reg:13 == 2111 <ldc Register a, Constant 0>
				push_reg:14 == 2112 <ldb Register a, Register a>
				push_reg:15 == 2113 <stb Register a, Register b>
				push_reg:19 == 2114 <ldc Register b, Constant 1>
				push_reg:20 == 2115 <add Register a, Register a, Register b>
				push_reg:21 == 2116 <ldc Register b, Constant 0>
				push_reg:22 == 2117 <stb Register b, Register a>
		call:24 == 2118 <ldc Register a, Constant 0>
		call:25 == 2119 <ldb Register a, Register c>
		call:26 == 2120 <ldc Register b, Constant 3>
		call:27 == 2121 <sub Register c, Register c, Register b>
		call:28 == 2122 <ldc Register a, Constant 2>
		call:29 == 2123 <stb Register a, Register c>
		call:39 == 2124 <@ldc Register a, Constant 3057>
			ldc:1 == 2124 <.define writeReg Register a>
			ldc:2 == 2124 <.define const Constant 3057>
			ldc:4 == 2124 <ldc Register a, Constant 0>
			ldc:5 == 2125 <ldc Register b, Constant 12>
			ldc:6 == 2126 <shl Register a, Register a, Register b>
			ldc:7 == 2127 <ldc Register b, Constant 3057>
			ldc:8 == 2128 <or Register a, Register a, Register b>
		call:40 == 2129 <jmp Register a>
		call:45 == 2130 <ldc Register d, Constant 2>
		call:48 == 2131 <ldb Register d, Register d>
		call:50 == 2132 <@pop_mem_v Constant 3>
			pop_mem_v:6 == 2132 <.define val Register c>
			pop_mem_v:7 == 2132 <.define addr Constant 3>
			pop_mem_v:9 == 2132 <@pop_reg Register c>
				pop_reg:10 == 2132 <.define registerToLoad Register c>
				pop_reg:13 == 2132 <ldc Register a, Constant 0>
				pop_reg:14 == 2133 <ldb Register a, Register a>
				pop_reg:15 == 2134 <ldc Register b, Constant 1>
				pop_reg:16 == 2135 <sub Register a, Register a, Register b>
				pop_reg:17 == 2136 <ldc Register b, Constant 0>
				pop_reg:18 == 2137 <stb Register b, Register a>
				pop_reg:22 == 2138 <ldb Register a, Register c>
			pop_mem_v:11 == 2139 <@ldc Register b, Constant 3>
				ldc:1 == 2139 <.define writeReg Register b>
				ldc:2 == 2139 <.define const Constant 3>
				ldc:4 == 2139 <ldc Register a, Constant 0>
				ldc:5 == 2140 <ldc Register b, Constant 12>
				ldc:6 == 2141 <shl Register a, Register a, Register b>
				ldc:7 == 2142 <ldc Register b, Constant 3>
				ldc:8 == 2143 <or Register b, Register a, Register b>
			pop_mem_v:12 == 2144 <stb Register b, Register c>
		call:51 == 2145 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 2145 <.define val Register c>
			pop_mem_v:7 == 2145 <.define addr Constant 2>
			pop_mem_v:9 == 2145 <@pop_reg Register c>
				pop_reg:10 == 2145 <.define registerToLoad Register c>
				pop_reg:13 == 2145 <ldc Register a, Constant 0>
				pop_reg:14 == 2146 <ldb Register a, Register a>
				pop_reg:15 == 2147 <ldc Register b, Constant 1>
				pop_reg:16 == 2148 <sub Register a, Register a, Register b>
				pop_reg:17 == 2149 <ldc Register b, Constant 0>
				pop_reg:18 == 2150 <stb Register b, Register a>
				pop_reg:22 == 2151 <ldb Register a, Register c>
			pop_mem_v:11 == 2152 <@ldc Register b, Constant 2>
				ldc:1 == 2152 <.define writeReg Register b>
				ldc:2 == 2152 <.define const Constant 2>
				ldc:4 == 2152 <ldc Register a, Constant 0>
				ldc:5 == 2153 <ldc Register b, Constant 12>
				ldc:6 == 2154 <shl Register a, Register a, Register b>
				ldc:7 == 2155 <ldc Register b, Constant 2>
				ldc:8 == 2156 <or Register b, Register a, Register b>
			pop_mem_v:12 == 2157 <stb Register b, Register c>
		call:53 == 2158 <ldc Register c, Constant 0>
		call:54 == 2159 <stb Register c, Register d>
	call_value:3 == 2160 <@push_mem Constant 1>
		push_mem:6 == 2160 <.define addr Register b>
		push_mem:7 == 2160 <.define value Register b>
		push_mem:9 == 2160 <@ldc Register b, Constant 1>
			ldc:1 == 2160 <.define writeReg Register b>
			ldc:2 == 2160 <.define const Constant 1>
			ldc:4 == 2160 <ldc Register a, Constant 0>
			ldc:5 == 2161 <ldc Register b, Constant 12>
			ldc:6 == 2162 <shl Register a, Register a, Register b>
			ldc:7 == 2163 <ldc Register b, Constant 1>
			ldc:8 == 2164 <or Register b, Register a, Register b>
		push_mem:10 == 2165 <ldb Register b, Register b>
		push_mem:12 == 2166 <@push_reg Register b>
			push_reg:10 == 2166 <.define registerToPush Register b>
			push_reg:13 == 2166 <ldc Register a, Constant 0>
			push_reg:14 == 2167 <ldb Register a, Register a>
			push_reg:15 == 2168 <stb Register a, Register b>
			push_reg:19 == 2169 <ldc Register b, Constant 1>
			push_reg:20 == 2170 <add Register a, Register a, Register b>
			push_reg:21 == 2171 <ldc Register b, Constant 0>
			push_reg:22 == 2172 <stb Register b, Register a>
pong.pa2:344 == 2173 <@pop_reg Register c>
	pop_reg:10 == 2173 <.define registerToLoad Register c>
	pop_reg:13 == 2173 <ldc Register a, Constant 0>
	pop_reg:14 == 2174 <ldb Register a, Register a>
	pop_reg:15 == 2175 <ldc Register b, Constant 1>
	pop_reg:16 == 2176 <sub Register a, Register a, Register b>
	pop_reg:17 == 2177 <ldc Register b, Constant 0>
	pop_reg:18 == 2178 <stb Register b, Register a>
	pop_reg:22 == 2179 <ldb Register a, Register c>
pong.pa2:347 == 2180 <@ldc Register b, Constant 4096>
	ldc:1 == 2180 <.define writeReg Register b>
	ldc:2 == 2180 <.define const Constant 4096>
	ldc:4 == 2180 <ldc Register a, Constant 1>
	ldc:5 == 2181 <ldc Register b, Constant 12>
	ldc:6 == 2182 <shl Register a, Register a, Register b>
	ldc:7 == 2183 <ldc Register b, Constant 0>
	ldc:8 == 2184 <or Register b, Register a, Register b>
pong.pa2:348 == 2185 <add Register d, Register c, Register b>
pong.pa2:351 == 2186 <ldc Register a, Constant 1>
pong.pa2:354 == 2187 <stb Register c, Register a>
pong.pa2:358 == 2188 <ldc Register b, Constant 1>
pong.pa2:359 == 2189 <add Register c, Register c, Register b>
pong.pa2:361 == 2190 <ldc Register b, Constant 2187>
pong.pa2:362 == 2191 <jle Register b, Register c, Register d>
pong.pa2:364 == 2192 <@return >
	return:2 == 2192 <ldc Register b, Constant 3>
	return:3 == 2193 <ldb Register b, Register b>
	return:4 == 2194 <ldc Register a, Constant 0>
	return:5 == 2195 <stb Register a, Register b>
	return:7 == 2196 <@pop_reg Register d>
		pop_reg:10 == 2196 <.define registerToLoad Register d>
		pop_reg:13 == 2196 <ldc Register a, Constant 0>
		pop_reg:14 == 2197 <ldb Register a, Register a>
		pop_reg:15 == 2198 <ldc Register b, Constant 1>
		pop_reg:16 == 2199 <sub Register a, Register a, Register b>
		pop_reg:17 == 2200 <ldc Register b, Constant 0>
		pop_reg:18 == 2201 <stb Register b, Register a>
		pop_reg:22 == 2202 <ldb Register a, Register d>
	return:9 == 2203 <jump Register d>
pong.pa2:371 == 2204 <@function Constant 0>
	function:19 == 2204 <.define loccount Constant 0>
	function:22 == 2204 <ldc Register a, Constant 0>
	function:23 == 2205 <ldb Register a, Register a>
	function:24 == 2206 <ldc Register b, Constant 3>
	function:25 == 2207 <stb Register b, Register a>
	function:28 == 2208 <ldc Register a, Constant 0>
	function:29 == 2209 <ldb Register a, Register b>
	function:30 == 2210 <ldc Register c, Constant 0>
	function:31 == 2211 <add Register b, Register b, Register c>
	function:32 == 2212 <stb Register a, Register b>
pong.pa2:374 == 2213 <@push_arg Constant 0>
	push_arg:3 == 2213 <.define slot Constant 0>
	push_arg:6 == 2213 <ldc Register a, Constant 2>
	push_arg:7 == 2214 <ldb Register a, Register a>
	push_arg:8 == 2215 <ldc Register b, Constant 0>
	push_arg:9 == 2216 <add Register a, Register a, Register b>
	push_arg:10 == 2217 <ldb Register a, Register b>
	push_arg:12 == 2218 <@push_reg Register b>
		push_reg:10 == 2218 <.define registerToPush Register b>
		push_reg:13 == 2218 <ldc Register a, Constant 0>
		push_reg:14 == 2219 <ldb Register a, Register a>
		push_reg:15 == 2220 <stb Register a, Register b>
		push_reg:19 == 2221 <ldc Register b, Constant 1>
		push_reg:20 == 2222 <add Register a, Register a, Register b>
		push_reg:21 == 2223 <ldc Register b, Constant 0>
		push_reg:22 == 2224 <stb Register b, Register a>
pong.pa2:375 == 2225 <@push_arg Constant 1>
	push_arg:3 == 2225 <.define slot Constant 1>
	push_arg:6 == 2225 <ldc Register a, Constant 2>
	push_arg:7 == 2226 <ldb Register a, Register a>
	push_arg:8 == 2227 <ldc Register b, Constant 1>
	push_arg:9 == 2228 <add Register a, Register a, Register b>
	push_arg:10 == 2229 <ldb Register a, Register b>
	push_arg:12 == 2230 <@push_reg Register b>
		push_reg:10 == 2230 <.define registerToPush Register b>
		push_reg:13 == 2230 <ldc Register a, Constant 0>
		push_reg:14 == 2231 <ldb Register a, Register a>
		push_reg:15 == 2232 <stb Register a, Register b>
		push_reg:19 == 2233 <ldc Register b, Constant 1>
		push_reg:20 == 2234 <add Register a, Register a, Register b>
		push_reg:21 == 2235 <ldc Register b, Constant 0>
		push_reg:22 == 2236 <stb Register b, Register a>
pong.pa2:376 == 2237 <@push_const Constant 8>
	push_const:6 == 2237 <.define constantToPush Constant 8>
	push_const:12 == 2237 <@ldc Register b, Constant 8>
		ldc:1 == 2237 <.define writeReg Register b>
		ldc:2 == 2237 <.define const Constant 8>
		ldc:4 == 2237 <ldc Register a, Constant 0>
		ldc:5 == 2238 <ldc Register b, Constant 12>
		ldc:6 == 2239 <shl Register a, Register a, Register b>
		ldc:7 == 2240 <ldc Register b, Constant 8>
		ldc:8 == 2241 <or Register b, Register a, Register b>
	push_const:14 == 2242 <@push_reg Register b>
		push_reg:10 == 2242 <.define registerToPush Register b>
		push_reg:13 == 2242 <ldc Register a, Constant 0>
		push_reg:14 == 2243 <ldb Register a, Register a>
		push_reg:15 == 2244 <stb Register a, Register b>
		push_reg:19 == 2245 <ldc Register b, Constant 1>
		push_reg:20 == 2246 <add Register a, Register a, Register b>
		push_reg:21 == 2247 <ldc Register b, Constant 0>
		push_reg:22 == 2248 <stb Register b, Register a>
pong.pa2:377 == 2249 <@push_arg Constant 2>
	push_arg:3 == 2249 <.define slot Constant 2>
	push_arg:6 == 2249 <ldc Register a, Constant 2>
	push_arg:7 == 2250 <ldb Register a, Register a>
	push_arg:8 == 2251 <ldc Register b, Constant 2>
	push_arg:9 == 2252 <add Register a, Register a, Register b>
	push_arg:10 == 2253 <ldb Register a, Register b>
	push_arg:12 == 2254 <@push_reg Register b>
		push_reg:10 == 2254 <.define registerToPush Register b>
		push_reg:13 == 2254 <ldc Register a, Constant 0>
		push_reg:14 == 2255 <ldb Register a, Register a>
		push_reg:15 == 2256 <stb Register a, Register b>
		push_reg:19 == 2257 <ldc Register b, Constant 1>
		push_reg:20 == 2258 <add Register a, Register a, Register b>
		push_reg:21 == 2259 <ldc Register b, Constant 0>
		push_reg:22 == 2260 <stb Register b, Register a>
pong.pa2:378 == 2261 <@call Constant 2353, Constant 4>
	call:11 == 2261 <.define functionLabel Constant 2353>
	call:12 == 2261 <.define argcount Constant 4>
	call:15 == 2261 <@push_mem Constant 2>
		push_mem:6 == 2261 <.define addr Register b>
		push_mem:7 == 2261 <.define value Register b>
		push_mem:9 == 2261 <@ldc Register b, Constant 2>
			ldc:1 == 2261 <.define writeReg Register b>
			ldc:2 == 2261 <.define const Constant 2>
			ldc:4 == 2261 <ldc Register a, Constant 0>
			ldc:5 == 2262 <ldc Register b, Constant 12>
			ldc:6 == 2263 <shl Register a, Register a, Register b>
			ldc:7 == 2264 <ldc Register b, Constant 2>
			ldc:8 == 2265 <or Register b, Register a, Register b>
		push_mem:10 == 2266 <ldb Register b, Register b>
		push_mem:12 == 2267 <@push_reg Register b>
			push_reg:10 == 2267 <.define registerToPush Register b>
			push_reg:13 == 2267 <ldc Register a, Constant 0>
			push_reg:14 == 2268 <ldb Register a, Register a>
			push_reg:15 == 2269 <stb Register a, Register b>
			push_reg:19 == 2270 <ldc Register b, Constant 1>
			push_reg:20 == 2271 <add Register a, Register a, Register b>
			push_reg:21 == 2272 <ldc Register b, Constant 0>
			push_reg:22 == 2273 <stb Register b, Register a>
	call:16 == 2274 <@push_mem Constant 3>
		push_mem:6 == 2274 <.define addr Register b>
		push_mem:7 == 2274 <.define value Register b>
		push_mem:9 == 2274 <@ldc Register b, Constant 3>
			ldc:1 == 2274 <.define writeReg Register b>
			ldc:2 == 2274 <.define const Constant 3>
			ldc:4 == 2274 <ldc Register a, Constant 0>
			ldc:5 == 2275 <ldc Register b, Constant 12>
			ldc:6 == 2276 <shl Register a, Register a, Register b>
			ldc:7 == 2277 <ldc Register b, Constant 3>
			ldc:8 == 2278 <or Register b, Register a, Register b>
		push_mem:10 == 2279 <ldb Register b, Register b>
		push_mem:12 == 2280 <@push_reg Register b>
			push_reg:10 == 2280 <.define registerToPush Register b>
			push_reg:13 == 2280 <ldc Register a, Constant 0>
			push_reg:14 == 2281 <ldb Register a, Register a>
			push_reg:15 == 2282 <stb Register a, Register b>
			push_reg:19 == 2283 <ldc Register b, Constant 1>
			push_reg:20 == 2284 <add Register a, Register a, Register b>
			push_reg:21 == 2285 <ldc Register b, Constant 0>
			push_reg:22 == 2286 <stb Register b, Register a>
	call:19 == 2287 <@push_const Constant 2311>
		push_const:6 == 2287 <.define constantToPush Constant 2311>
		push_const:12 == 2287 <@ldc Register b, Constant 2311>
			ldc:1 == 2287 <.define writeReg Register b>
			ldc:2 == 2287 <.define const Constant 2311>
			ldc:4 == 2287 <ldc Register a, Constant 0>
			ldc:5 == 2288 <ldc Register b, Constant 12>
			ldc:6 == 2289 <shl Register a, Register a, Register b>
			ldc:7 == 2290 <ldc Register b, Constant 2311>
			ldc:8 == 2291 <or Register b, Register a, Register b>
		push_const:14 == 2292 <@push_reg Register b>
			push_reg:10 == 2292 <.define registerToPush Register b>
			push_reg:13 == 2292 <ldc Register a, Constant 0>
			push_reg:14 == 2293 <ldb Register a, Register a>
			push_reg:15 == 2294 <stb Register a, Register b>
			push_reg:19 == 2295 <ldc Register b, Constant 1>
			push_reg:20 == 2296 <add Register a, Register a, Register b>
			push_reg:21 == 2297 <ldc Register b, Constant 0>
			push_reg:22 == 2298 <stb Register b, Register a>
	call:24 == 2299 <ldc Register a, Constant 0>
	call:25 == 2300 <ldb Register a, Register c>
	call:26 == 2301 <ldc Register b, Constant 7>
	call:27 == 2302 <sub Register c, Register c, Register b>
	call:28 == 2303 <ldc Register a, Constant 2>
	call:29 == 2304 <stb Register a, Register c>
	call:39 == 2305 <@ldc Register a, Constant 2353>
		ldc:1 == 2305 <.define writeReg Register a>
		ldc:2 == 2305 <.define const Constant 2353>
		ldc:4 == 2305 <ldc Register a, Constant 0>
		ldc:5 == 2306 <ldc Register b, Constant 12>
		ldc:6 == 2307 <shl Register a, Register a, Register b>
		ldc:7 == 2308 <ldc Register b, Constant 2353>
		ldc:8 == 2309 <or Register a, Register a, Register b>
	call:40 == 2310 <jmp Register a>
	call:45 == 2311 <ldc Register d, Constant 2>
	call:48 == 2312 <ldb Register d, Register d>
	call:50 == 2313 <@pop_mem_v Constant 3>
		pop_mem_v:6 == 2313 <.define val Register c>
		pop_mem_v:7 == 2313 <.define addr Constant 3>
		pop_mem_v:9 == 2313 <@pop_reg Register c>
			pop_reg:10 == 2313 <.define registerToLoad Register c>
			pop_reg:13 == 2313 <ldc Register a, Constant 0>
			pop_reg:14 == 2314 <ldb Register a, Register a>
			pop_reg:15 == 2315 <ldc Register b, Constant 1>
			pop_reg:16 == 2316 <sub Register a, Register a, Register b>
			pop_reg:17 == 2317 <ldc Register b, Constant 0>
			pop_reg:18 == 2318 <stb Register b, Register a>
			pop_reg:22 == 2319 <ldb Register a, Register c>
		pop_mem_v:11 == 2320 <@ldc Register b, Constant 3>
			ldc:1 == 2320 <.define writeReg Register b>
			ldc:2 == 2320 <.define const Constant 3>
			ldc:4 == 2320 <ldc Register a, Constant 0>
			ldc:5 == 2321 <ldc Register b, Constant 12>
			ldc:6 == 2322 <shl Register a, Register a, Register b>
			ldc:7 == 2323 <ldc Register b, Constant 3>
			ldc:8 == 2324 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2325 <stb Register b, Register c>
	call:51 == 2326 <@pop_mem_v Constant 2>
		pop_mem_v:6 == 2326 <.define val Register c>
		pop_mem_v:7 == 2326 <.define addr Constant 2>
		pop_mem_v:9 == 2326 <@pop_reg Register c>
			pop_reg:10 == 2326 <.define registerToLoad Register c>
			pop_reg:13 == 2326 <ldc Register a, Constant 0>
			pop_reg:14 == 2327 <ldb Register a, Register a>
			pop_reg:15 == 2328 <ldc Register b, Constant 1>
			pop_reg:16 == 2329 <sub Register a, Register a, Register b>
			pop_reg:17 == 2330 <ldc Register b, Constant 0>
			pop_reg:18 == 2331 <stb Register b, Register a>
			pop_reg:22 == 2332 <ldb Register a, Register c>
		pop_mem_v:11 == 2333 <@ldc Register b, Constant 2>
			ldc:1 == 2333 <.define writeReg Register b>
			ldc:2 == 2333 <.define const Constant 2>
			ldc:4 == 2333 <ldc Register a, Constant 0>
			ldc:5 == 2334 <ldc Register b, Constant 12>
			ldc:6 == 2335 <shl Register a, Register a, Register b>
			ldc:7 == 2336 <ldc Register b, Constant 2>
			ldc:8 == 2337 <or Register b, Register a, Register b>
		pop_mem_v:12 == 2338 <stb Register b, Register c>
	call:53 == 2339 <ldc Register c, Constant 0>
	call:54 == 2340 <stb Register c, Register d>
pong.pa2:380 == 2341 <@return >
	return:2 == 2341 <ldc Register b, Constant 3>
	return:3 == 2342 <ldb Register b, Register b>
	return:4 == 2343 <ldc Register a, Constant 0>
	return:5 == 2344 <stb Register a, Register b>
	return:7 == 2345 <@pop_reg Register d>
		pop_reg:10 == 2345 <.define registerToLoad Register d>
		pop_reg:13 == 2345 <ldc Register a, Constant 0>
		pop_reg:14 == 2346 <ldb Register a, Register a>
		pop_reg:15 == 2347 <ldc Register b, Constant 1>
		pop_reg:16 == 2348 <sub Register a, Register a, Register b>
		pop_reg:17 == 2349 <ldc Register b, Constant 0>
		pop_reg:18 == 2350 <stb Register b, Register a>
		pop_reg:22 == 2351 <ldb Register a, Register d>
	return:9 == 2352 <jump Register d>
pong.pa2:387 == 2353 <@function Constant 2>
	function:19 == 2353 <.define loccount Constant 2>
	function:22 == 2353 <ldc Register a, Constant 0>
	function:23 == 2354 <ldb Register a, Register a>
	function:24 == 2355 <ldc Register b, Constant 3>
	function:25 == 2356 <stb Register b, Register a>
	function:28 == 2357 <ldc Register a, Constant 0>
	function:29 == 2358 <ldb Register a, Register b>
	function:30 == 2359 <ldc Register c, Constant 2>
	function:31 == 2360 <add Register b, Register b, Register c>
	function:32 == 2361 <stb Register a, Register b>
pong.pa2:391 == 2362 <@call_value Constant 3057, Constant 0>
	call_value:1 == 2362 <@call Constant 3057, Constant 0>
		call:11 == 2362 <.define functionLabel Constant 3057>
		call:12 == 2362 <.define argcount Constant 0>
		call:15 == 2362 <@push_mem Constant 2>
			push_mem:6 == 2362 <.define addr Register b>
			push_mem:7 == 2362 <.define value Register b>
			push_mem:9 == 2362 <@ldc Register b, Constant 2>
				ldc:1 == 2362 <.define writeReg Register b>
				ldc:2 == 2362 <.define const Constant 2>
				ldc:4 == 2362 <ldc Register a, Constant 0>
				ldc:5 == 2363 <ldc Register b, Constant 12>
				ldc:6 == 2364 <shl Register a, Register a, Register b>
				ldc:7 == 2365 <ldc Register b, Constant 2>
				ldc:8 == 2366 <or Register b, Register a, Register b>
			push_mem:10 == 2367 <ldb Register b, Register b>
			push_mem:12 == 2368 <@push_reg Register b>
				push_reg:10 == 2368 <.define registerToPush Register b>
				push_reg:13 == 2368 <ldc Register a, Constant 0>
				push_reg:14 == 2369 <ldb Register a, Register a>
				push_reg:15 == 2370 <stb Register a, Register b>
				push_reg:19 == 2371 <ldc Register b, Constant 1>
				push_reg:20 == 2372 <add Register a, Register a, Register b>
				push_reg:21 == 2373 <ldc Register b, Constant 0>
				push_reg:22 == 2374 <stb Register b, Register a>
		call:16 == 2375 <@push_mem Constant 3>
			push_mem:6 == 2375 <.define addr Register b>
			push_mem:7 == 2375 <.define value Register b>
			push_mem:9 == 2375 <@ldc Register b, Constant 3>
				ldc:1 == 2375 <.define writeReg Register b>
				ldc:2 == 2375 <.define const Constant 3>
				ldc:4 == 2375 <ldc Register a, Constant 0>
				ldc:5 == 2376 <ldc Register b, Constant 12>
				ldc:6 == 2377 <shl Register a, Register a, Register b>
				ldc:7 == 2378 <ldc Register b, Constant 3>
				ldc:8 == 2379 <or Register b, Register a, Register b>
			push_mem:10 == 2380 <ldb Register b, Register b>
			push_mem:12 == 2381 <@push_reg Register b>
				push_reg:10 == 2381 <.define registerToPush Register b>
				push_reg:13 == 2381 <ldc Register a, Constant 0>
				push_reg:14 == 2382 <ldb Register a, Register a>
				push_reg:15 == 2383 <stb Register a, Register b>
				push_reg:19 == 2384 <ldc Register b, Constant 1>
				push_reg:20 == 2385 <add Register a, Register a, Register b>
				push_reg:21 == 2386 <ldc Register b, Constant 0>
				push_reg:22 == 2387 <stb Register b, Register a>
		call:19 == 2388 <@push_const Constant 2412>
			push_const:6 == 2388 <.define constantToPush Constant 2412>
			push_const:12 == 2388 <@ldc Register b, Constant 2412>
				ldc:1 == 2388 <.define writeReg Register b>
				ldc:2 == 2388 <.define const Constant 2412>
				ldc:4 == 2388 <ldc Register a, Constant 0>
				ldc:5 == 2389 <ldc Register b, Constant 12>
				ldc:6 == 2390 <shl Register a, Register a, Register b>
				ldc:7 == 2391 <ldc Register b, Constant 2412>
				ldc:8 == 2392 <or Register b, Register a, Register b>
			push_const:14 == 2393 <@push_reg Register b>
				push_reg:10 == 2393 <.define registerToPush Register b>
				push_reg:13 == 2393 <ldc Register a, Constant 0>
				push_reg:14 == 2394 <ldb Register a, Register a>
				push_reg:15 == 2395 <stb Register a, Register b>
				push_reg:19 == 2396 <ldc Register b, Constant 1>
				push_reg:20 == 2397 <add Register a, Register a, Register b>
				push_reg:21 == 2398 <ldc Register b, Constant 0>
				push_reg:22 == 2399 <stb Register b, Register a>
		call:24 == 2400 <ldc Register a, Constant 0>
		call:25 == 2401 <ldb Register a, Register c>
		call:26 == 2402 <ldc Register b, Constant 3>
		call:27 == 2403 <sub Register c, Register c, Register b>
		call:28 == 2404 <ldc Register a, Constant 2>
		call:29 == 2405 <stb Register a, Register c>
		call:39 == 2406 <@ldc Register a, Constant 3057>
			ldc:1 == 2406 <.define writeReg Register a>
			ldc:2 == 2406 <.define const Constant 3057>
			ldc:4 == 2406 <ldc Register a, Constant 0>
			ldc:5 == 2407 <ldc Register b, Constant 12>
			ldc:6 == 2408 <shl Register a, Register a, Register b>
			ldc:7 == 2409 <ldc Register b, Constant 3057>
			ldc:8 == 2410 <or Register a, Register a, Register b>
		call:40 == 2411 <jmp Register a>
		call:45 == 2412 <ldc Register d, Constant 2>
		call:48 == 2413 <ldb Register d, Register d>
		call:50 == 2414 <@pop_mem_v Constant 3>
			pop_mem_v:6 == 2414 <.define val Register c>
			pop_mem_v:7 == 2414 <.define addr Constant 3>
			pop_mem_v:9 == 2414 <@pop_reg Register c>
				pop_reg:10 == 2414 <.define registerToLoad Register c>
				pop_reg:13 == 2414 <ldc Register a, Constant 0>
				pop_reg:14 == 2415 <ldb Register a, Register a>
				pop_reg:15 == 2416 <ldc Register b, Constant 1>
				pop_reg:16 == 2417 <sub Register a, Register a, Register b>
				pop_reg:17 == 2418 <ldc Register b, Constant 0>
				pop_reg:18 == 2419 <stb Register b, Register a>
				pop_reg:22 == 2420 <ldb Register a, Register c>
			pop_mem_v:11 == 2421 <@ldc Register b, Constant 3>
				ldc:1 == 2421 <.define writeReg Register b>
				ldc:2 == 2421 <.define const Constant 3>
				ldc:4 == 2421 <ldc Register a, Constant 0>
				ldc:5 == 2422 <ldc Register b, Constant 12>
				ldc:6 == 2423 <shl Register a, Register a, Register b>
				ldc:7 == 2424 <ldc Register b, Constant 3>
				ldc:8 == 2425 <or Register b, Register a, Register b>
			pop_mem_v:12 == 2426 <stb Register b, Register c>
		call:51 == 2427 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 2427 <.define val Register c>
			pop_mem_v:7 == 2427 <.define addr Constant 2>
			pop_mem_v:9 == 2427 <@pop_reg Register c>
				pop_reg:10 == 2427 <.define registerToLoad Register c>
				pop_reg:13 == 2427 <ldc Register a, Constant 0>
				pop_reg:14 == 2428 <ldb Register a, Register a>
				pop_reg:15 == 2429 <ldc Register b, Constant 1>
				pop_reg:16 == 2430 <sub Register a, Register a, Register b>
				pop_reg:17 == 2431 <ldc Register b, Constant 0>
				pop_reg:18 == 2432 <stb Register b, Register a>
				pop_reg:22 == 2433 <ldb Register a, Register c>
			pop_mem_v:11 == 2434 <@ldc Register b, Constant 2>
				ldc:1 == 2434 <.define writeReg Register b>
				ldc:2 == 2434 <.define const Constant 2>
				ldc:4 == 2434 <ldc Register a, Constant 0>
				ldc:5 == 2435 <ldc Register b, Constant 12>
				ldc:6 == 2436 <shl Register a, Register a, Register b>
				ldc:7 == 2437 <ldc Register b, Constant 2>
				ldc:8 == 2438 <or Register b, Register a, Register b>
			pop_mem_v:12 == 2439 <stb Register b, Register c>
		call:53 == 2440 <ldc Register c, Constant 0>
		call:54 == 2441 <stb Register c, Register d>
	call_value:3 == 2442 <@push_mem Constant 1>
		push_mem:6 == 2442 <.define addr Register b>
		push_mem:7 == 2442 <.define value Register b>
		push_mem:9 == 2442 <@ldc Register b, Constant 1>
			ldc:1 == 2442 <.define writeReg Register b>
			ldc:2 == 2442 <.define const Constant 1>
			ldc:4 == 2442 <ldc Register a, Constant 0>
			ldc:5 == 2443 <ldc Register b, Constant 12>
			ldc:6 == 2444 <shl Register a, Register a, Register b>
			ldc:7 == 2445 <ldc Register b, Constant 1>
			ldc:8 == 2446 <or Register b, Register a, Register b>
		push_mem:10 == 2447 <ldb Register b, Register b>
		push_mem:12 == 2448 <@push_reg Register b>
			push_reg:10 == 2448 <.define registerToPush Register b>
			push_reg:13 == 2448 <ldc Register a, Constant 0>
			push_reg:14 == 2449 <ldb Register a, Register a>
			push_reg:15 == 2450 <stb Register a, Register b>
			push_reg:19 == 2451 <ldc Register b, Constant 1>
			push_reg:20 == 2452 <add Register a, Register a, Register b>
			push_reg:21 == 2453 <ldc Register b, Constant 0>
			push_reg:22 == 2454 <stb Register b, Register a>
pong.pa2:393 == 2455 <@push_arg Constant 1>
	push_arg:3 == 2455 <.define slot Constant 1>
	push_arg:6 == 2455 <ldc Register a, Constant 2>
	push_arg:7 == 2456 <ldb Register a, Register a>
	push_arg:8 == 2457 <ldc Register b, Constant 1>
	push_arg:9 == 2458 <add Register a, Register a, Register b>
	push_arg:10 == 2459 <ldb Register a, Register b>
	push_arg:12 == 2460 <@push_reg Register b>
		push_reg:10 == 2460 <.define registerToPush Register b>
		push_reg:13 == 2460 <ldc Register a, Constant 0>
		push_reg:14 == 2461 <ldb Register a, Register a>
		push_reg:15 == 2462 <stb Register a, Register b>
		push_reg:19 == 2463 <ldc Register b, Constant 1>
		push_reg:20 == 2464 <add Register a, Register a, Register b>
		push_reg:21 == 2465 <ldc Register b, Constant 0>
		push_reg:22 == 2466 <stb Register b, Register a>
pong.pa2:394 == 2467 <@push_const Constant 64>
	push_const:6 == 2467 <.define constantToPush Constant 64>
	push_const:12 == 2467 <@ldc Register b, Constant 64>
		ldc:1 == 2467 <.define writeReg Register b>
		ldc:2 == 2467 <.define const Constant 64>
		ldc:4 == 2467 <ldc Register a, Constant 0>
		ldc:5 == 2468 <ldc Register b, Constant 12>
		ldc:6 == 2469 <shl Register a, Register a, Register b>
		ldc:7 == 2470 <ldc Register b, Constant 64>
		ldc:8 == 2471 <or Register b, Register a, Register b>
	push_const:14 == 2472 <@push_reg Register b>
		push_reg:10 == 2472 <.define registerToPush Register b>
		push_reg:13 == 2472 <ldc Register a, Constant 0>
		push_reg:14 == 2473 <ldb Register a, Register a>
		push_reg:15 == 2474 <stb Register a, Register b>
		push_reg:19 == 2475 <ldc Register b, Constant 1>
		push_reg:20 == 2476 <add Register a, Register a, Register b>
		push_reg:21 == 2477 <ldc Register b, Constant 0>
		push_reg:22 == 2478 <stb Register b, Register a>
pong.pa2:395 == 2479 <@mul >
	mul:3 == 2479 <.define lhs Register c>
	mul:4 == 2479 <.define rhs Register d>
	mul:5 == 2479 <.define result Register d>
	mul:7 == 2479 <@pop_reg Register d>
		pop_reg:10 == 2479 <.define registerToLoad Register d>
		pop_reg:13 == 2479 <ldc Register a, Constant 0>
		pop_reg:14 == 2480 <ldb Register a, Register a>
		pop_reg:15 == 2481 <ldc Register b, Constant 1>
		pop_reg:16 == 2482 <sub Register a, Register a, Register b>
		pop_reg:17 == 2483 <ldc Register b, Constant 0>
		pop_reg:18 == 2484 <stb Register b, Register a>
		pop_reg:22 == 2485 <ldb Register a, Register d>
	mul:8 == 2486 <@pop_reg Register c>
		pop_reg:10 == 2486 <.define registerToLoad Register c>
		pop_reg:13 == 2486 <ldc Register a, Constant 0>
		pop_reg:14 == 2487 <ldb Register a, Register a>
		pop_reg:15 == 2488 <ldc Register b, Constant 1>
		pop_reg:16 == 2489 <sub Register a, Register a, Register b>
		pop_reg:17 == 2490 <ldc Register b, Constant 0>
		pop_reg:18 == 2491 <stb Register b, Register a>
		pop_reg:22 == 2492 <ldb Register a, Register c>
	mul:9 == 2493 <mul Register d, Register c, Register d>
	mul:10 == 2494 <@push_reg Register d>
		push_reg:10 == 2494 <.define registerToPush Register d>
		push_reg:13 == 2494 <ldc Register a, Constant 0>
		push_reg:14 == 2495 <ldb Register a, Register a>
		push_reg:15 == 2496 <stb Register a, Register d>
		push_reg:19 == 2497 <ldc Register b, Constant 1>
		push_reg:20 == 2498 <add Register a, Register a, Register b>
		push_reg:21 == 2499 <ldc Register b, Constant 0>
		push_reg:22 == 2500 <stb Register b, Register a>
pong.pa2:396 == 2501 <@add >
	add:3 == 2501 <.define lhs Register c>
	add:4 == 2501 <.define rhs Register d>
	add:5 == 2501 <.define result Register d>
	add:7 == 2501 <@pop_reg Register d>
		pop_reg:10 == 2501 <.define registerToLoad Register d>
		pop_reg:13 == 2501 <ldc Register a, Constant 0>
		pop_reg:14 == 2502 <ldb Register a, Register a>
		pop_reg:15 == 2503 <ldc Register b, Constant 1>
		pop_reg:16 == 2504 <sub Register a, Register a, Register b>
		pop_reg:17 == 2505 <ldc Register b, Constant 0>
		pop_reg:18 == 2506 <stb Register b, Register a>
		pop_reg:22 == 2507 <ldb Register a, Register d>
	add:8 == 2508 <@pop_reg Register c>
		pop_reg:10 == 2508 <.define registerToLoad Register c>
		pop_reg:13 == 2508 <ldc Register a, Constant 0>
		pop_reg:14 == 2509 <ldb Register a, Register a>
		pop_reg:15 == 2510 <ldc Register b, Constant 1>
		pop_reg:16 == 2511 <sub Register a, Register a, Register b>
		pop_reg:17 == 2512 <ldc Register b, Constant 0>
		pop_reg:18 == 2513 <stb Register b, Register a>
		pop_reg:22 == 2514 <ldb Register a, Register c>
	add:9 == 2515 <add Register d, Register c, Register d>
	add:10 == 2516 <@push_reg Register d>
		push_reg:10 == 2516 <.define registerToPush Register d>
		push_reg:13 == 2516 <ldc Register a, Constant 0>
		push_reg:14 == 2517 <ldb Register a, Register a>
		push_reg:15 == 2518 <stb Register a, Register d>
		push_reg:19 == 2519 <ldc Register b, Constant 1>
		push_reg:20 == 2520 <add Register a, Register a, Register b>
		push_reg:21 == 2521 <ldc Register b, Constant 0>
		push_reg:22 == 2522 <stb Register b, Register a>
pong.pa2:397 == 2523 <@push_arg Constant 0>
	push_arg:3 == 2523 <.define slot Constant 0>
	push_arg:6 == 2523 <ldc Register a, Constant 2>
	push_arg:7 == 2524 <ldb Register a, Register a>
	push_arg:8 == 2525 <ldc Register b, Constant 0>
	push_arg:9 == 2526 <add Register a, Register a, Register b>
	push_arg:10 == 2527 <ldb Register a, Register b>
	push_arg:12 == 2528 <@push_reg Register b>
		push_reg:10 == 2528 <.define registerToPush Register b>
		push_reg:13 == 2528 <ldc Register a, Constant 0>
		push_reg:14 == 2529 <ldb Register a, Register a>
		push_reg:15 == 2530 <stb Register a, Register b>
		push_reg:19 == 2531 <ldc Register b, Constant 1>
		push_reg:20 == 2532 <add Register a, Register a, Register b>
		push_reg:21 == 2533 <ldc Register b, Constant 0>
		push_reg:22 == 2534 <stb Register b, Register a>
pong.pa2:398 == 2535 <@add >
	add:3 == 2535 <.define lhs Register c>
	add:4 == 2535 <.define rhs Register d>
	add:5 == 2535 <.define result Register d>
	add:7 == 2535 <@pop_reg Register d>
		pop_reg:10 == 2535 <.define registerToLoad Register d>
		pop_reg:13 == 2535 <ldc Register a, Constant 0>
		pop_reg:14 == 2536 <ldb Register a, Register a>
		pop_reg:15 == 2537 <ldc Register b, Constant 1>
		pop_reg:16 == 2538 <sub Register a, Register a, Register b>
		pop_reg:17 == 2539 <ldc Register b, Constant 0>
		pop_reg:18 == 2540 <stb Register b, Register a>
		pop_reg:22 == 2541 <ldb Register a, Register d>
	add:8 == 2542 <@pop_reg Register c>
		pop_reg:10 == 2542 <.define registerToLoad Register c>
		pop_reg:13 == 2542 <ldc Register a, Constant 0>
		pop_reg:14 == 2543 <ldb Register a, Register a>
		pop_reg:15 == 2544 <ldc Register b, Constant 1>
		pop_reg:16 == 2545 <sub Register a, Register a, Register b>
		pop_reg:17 == 2546 <ldc Register b, Constant 0>
		pop_reg:18 == 2547 <stb Register b, Register a>
		pop_reg:22 == 2548 <ldb Register a, Register c>
	add:9 == 2549 <add Register d, Register c, Register d>
	add:10 == 2550 <@push_reg Register d>
		push_reg:10 == 2550 <.define registerToPush Register d>
		push_reg:13 == 2550 <ldc Register a, Constant 0>
		push_reg:14 == 2551 <ldb Register a, Register a>
		push_reg:15 == 2552 <stb Register a, Register d>
		push_reg:19 == 2553 <ldc Register b, Constant 1>
		push_reg:20 == 2554 <add Register a, Register a, Register b>
		push_reg:21 == 2555 <ldc Register b, Constant 0>
		push_reg:22 == 2556 <stb Register b, Register a>
pong.pa2:399 == 2557 <@pop_local Constant 0>
	pop_local:6 == 2557 <.define slot Constant 0>
	pop_local:8 == 2557 <@pop_reg Register a>
		pop_reg:10 == 2557 <.define registerToLoad Register a>
		pop_reg:13 == 2557 <ldc Register a, Constant 0>
		pop_reg:14 == 2558 <ldb Register a, Register a>
		pop_reg:15 == 2559 <ldc Register b, Constant 1>
		pop_reg:16 == 2560 <sub Register a, Register a, Register b>
		pop_reg:17 == 2561 <ldc Register b, Constant 0>
		pop_reg:18 == 2562 <stb Register b, Register a>
		pop_reg:22 == 2563 <ldb Register a, Register a>
	pop_local:13 == 2564 <ldc Register c, Constant 3>
	pop_local:14 == 2565 <ldb Register c, Register c>
	pop_local:17 == 2566 <ldc Register b, Constant 0>
	pop_local:18 == 2567 <add Register b, Register b, Register c>
	pop_local:21 == 2568 <stb Register b, Register a>
pong.pa2:402 == 2569 <@push_local Constant 0>
	push_local:3 == 2569 <.define slot Constant 0>
	push_local:6 == 2569 <ldc Register a, Constant 3>
	push_local:7 == 2570 <ldb Register a, Register a>
	push_local:8 == 2571 <ldc Register b, Constant 0>
	push_local:9 == 2572 <add Register a, Register a, Register b>
	push_local:10 == 2573 <ldb Register a, Register b>
	push_local:12 == 2574 <@push_reg Register b>
		push_reg:10 == 2574 <.define registerToPush Register b>
		push_reg:13 == 2574 <ldc Register a, Constant 0>
		push_reg:14 == 2575 <ldb Register a, Register a>
		push_reg:15 == 2576 <stb Register a, Register b>
		push_reg:19 == 2577 <ldc Register b, Constant 1>
		push_reg:20 == 2578 <add Register a, Register a, Register b>
		push_reg:21 == 2579 <ldc Register b, Constant 0>
		push_reg:22 == 2580 <stb Register b, Register a>
pong.pa2:403 == 2581 <@push_arg Constant 2>
	push_arg:3 == 2581 <.define slot Constant 2>
	push_arg:6 == 2581 <ldc Register a, Constant 2>
	push_arg:7 == 2582 <ldb Register a, Register a>
	push_arg:8 == 2583 <ldc Register b, Constant 2>
	push_arg:9 == 2584 <add Register a, Register a, Register b>
	push_arg:10 == 2585 <ldb Register a, Register b>
	push_arg:12 == 2586 <@push_reg Register b>
		push_reg:10 == 2586 <.define registerToPush Register b>
		push_reg:13 == 2586 <ldc Register a, Constant 0>
		push_reg:14 == 2587 <ldb Register a, Register a>
		push_reg:15 == 2588 <stb Register a, Register b>
		push_reg:19 == 2589 <ldc Register b, Constant 1>
		push_reg:20 == 2590 <add Register a, Register a, Register b>
		push_reg:21 == 2591 <ldc Register b, Constant 0>
		push_reg:22 == 2592 <stb Register b, Register a>
pong.pa2:404 == 2593 <@push_const Constant 64>
	push_const:6 == 2593 <.define constantToPush Constant 64>
	push_const:12 == 2593 <@ldc Register b, Constant 64>
		ldc:1 == 2593 <.define writeReg Register b>
		ldc:2 == 2593 <.define const Constant 64>
		ldc:4 == 2593 <ldc Register a, Constant 0>
		ldc:5 == 2594 <ldc Register b, Constant 12>
		ldc:6 == 2595 <shl Register a, Register a, Register b>
		ldc:7 == 2596 <ldc Register b, Constant 64>
		ldc:8 == 2597 <or Register b, Register a, Register b>
	push_const:14 == 2598 <@push_reg Register b>
		push_reg:10 == 2598 <.define registerToPush Register b>
		push_reg:13 == 2598 <ldc Register a, Constant 0>
		push_reg:14 == 2599 <ldb Register a, Register a>
		push_reg:15 == 2600 <stb Register a, Register b>
		push_reg:19 == 2601 <ldc Register b, Constant 1>
		push_reg:20 == 2602 <add Register a, Register a, Register b>
		push_reg:21 == 2603 <ldc Register b, Constant 0>
		push_reg:22 == 2604 <stb Register b, Register a>
pong.pa2:405 == 2605 <@mul >
	mul:3 == 2605 <.define lhs Register c>
	mul:4 == 2605 <.define rhs Register d>
	mul:5 == 2605 <.define result Register d>
	mul:7 == 2605 <@pop_reg Register d>
		pop_reg:10 == 2605 <.define registerToLoad Register d>
		pop_reg:13 == 2605 <ldc Register a, Constant 0>
		pop_reg:14 == 2606 <ldb Register a, Register a>
		pop_reg:15 == 2607 <ldc Register b, Constant 1>
		pop_reg:16 == 2608 <sub Register a, Register a, Register b>
		pop_reg:17 == 2609 <ldc Register b, Constant 0>
		pop_reg:18 == 2610 <stb Register b, Register a>
		pop_reg:22 == 2611 <ldb Register a, Register d>
	mul:8 == 2612 <@pop_reg Register c>
		pop_reg:10 == 2612 <.define registerToLoad Register c>
		pop_reg:13 == 2612 <ldc Register a, Constant 0>
		pop_reg:14 == 2613 <ldb Register a, Register a>
		pop_reg:15 == 2614 <ldc Register b, Constant 1>
		pop_reg:16 == 2615 <sub Register a, Register a, Register b>
		pop_reg:17 == 2616 <ldc Register b, Constant 0>
		pop_reg:18 == 2617 <stb Register b, Register a>
		pop_reg:22 == 2618 <ldb Register a, Register c>
	mul:9 == 2619 <mul Register d, Register c, Register d>
	mul:10 == 2620 <@push_reg Register d>
		push_reg:10 == 2620 <.define registerToPush Register d>
		push_reg:13 == 2620 <ldc Register a, Constant 0>
		push_reg:14 == 2621 <ldb Register a, Register a>
		push_reg:15 == 2622 <stb Register a, Register d>
		push_reg:19 == 2623 <ldc Register b, Constant 1>
		push_reg:20 == 2624 <add Register a, Register a, Register b>
		push_reg:21 == 2625 <ldc Register b, Constant 0>
		push_reg:22 == 2626 <stb Register b, Register a>
pong.pa2:406 == 2627 <@add >
	add:3 == 2627 <.define lhs Register c>
	add:4 == 2627 <.define rhs Register d>
	add:5 == 2627 <.define result Register d>
	add:7 == 2627 <@pop_reg Register d>
		pop_reg:10 == 2627 <.define registerToLoad Register d>
		pop_reg:13 == 2627 <ldc Register a, Constant 0>
		pop_reg:14 == 2628 <ldb Register a, Register a>
		pop_reg:15 == 2629 <ldc Register b, Constant 1>
		pop_reg:16 == 2630 <sub Register a, Register a, Register b>
		pop_reg:17 == 2631 <ldc Register b, Constant 0>
		pop_reg:18 == 2632 <stb Register b, Register a>
		pop_reg:22 == 2633 <ldb Register a, Register d>
	add:8 == 2634 <@pop_reg Register c>
		pop_reg:10 == 2634 <.define registerToLoad Register c>
		pop_reg:13 == 2634 <ldc Register a, Constant 0>
		pop_reg:14 == 2635 <ldb Register a, Register a>
		pop_reg:15 == 2636 <ldc Register b, Constant 1>
		pop_reg:16 == 2637 <sub Register a, Register a, Register b>
		pop_reg:17 == 2638 <ldc Register b, Constant 0>
		pop_reg:18 == 2639 <stb Register b, Register a>
		pop_reg:22 == 2640 <ldb Register a, Register c>
	add:9 == 2641 <add Register d, Register c, Register d>
	add:10 == 2642 <@push_reg Register d>
		push_reg:10 == 2642 <.define registerToPush Register d>
		push_reg:13 == 2642 <ldc Register a, Constant 0>
		push_reg:14 == 2643 <ldb Register a, Register a>
		push_reg:15 == 2644 <stb Register a, Register d>
		push_reg:19 == 2645 <ldc Register b, Constant 1>
		push_reg:20 == 2646 <add Register a, Register a, Register b>
		push_reg:21 == 2647 <ldc Register b, Constant 0>
		push_reg:22 == 2648 <stb Register b, Register a>
pong.pa2:407 == 2649 <@pop_local Constant 1>
	pop_local:6 == 2649 <.define slot Constant 1>
	pop_local:8 == 2649 <@pop_reg Register a>
		pop_reg:10 == 2649 <.define registerToLoad Register a>
		pop_reg:13 == 2649 <ldc Register a, Constant 0>
		pop_reg:14 == 2650 <ldb Register a, Register a>
		pop_reg:15 == 2651 <ldc Register b, Constant 1>
		pop_reg:16 == 2652 <sub Register a, Register a, Register b>
		pop_reg:17 == 2653 <ldc Register b, Constant 0>
		pop_reg:18 == 2654 <stb Register b, Register a>
		pop_reg:22 == 2655 <ldb Register a, Register a>
	pop_local:13 == 2656 <ldc Register c, Constant 3>
	pop_local:14 == 2657 <ldb Register c, Register c>
	pop_local:17 == 2658 <ldc Register b, Constant 1>
	pop_local:18 == 2659 <add Register b, Register b, Register c>
	pop_local:21 == 2660 <stb Register b, Register a>
pong.pa2:419 == 2661 <@push_arg Constant 3>
	push_arg:3 == 2661 <.define slot Constant 3>
	push_arg:6 == 2661 <ldc Register a, Constant 2>
	push_arg:7 == 2662 <ldb Register a, Register a>
	push_arg:8 == 2663 <ldc Register b, Constant 3>
	push_arg:9 == 2664 <add Register a, Register a, Register b>
	push_arg:10 == 2665 <ldb Register a, Register b>
	push_arg:12 == 2666 <@push_reg Register b>
		push_reg:10 == 2666 <.define registerToPush Register b>
		push_reg:13 == 2666 <ldc Register a, Constant 0>
		push_reg:14 == 2667 <ldb Register a, Register a>
		push_reg:15 == 2668 <stb Register a, Register b>
		push_reg:19 == 2669 <ldc Register b, Constant 1>
		push_reg:20 == 2670 <add Register a, Register a, Register b>
		push_reg:21 == 2671 <ldc Register b, Constant 0>
		push_reg:22 == 2672 <stb Register b, Register a>
pong.pa2:421 == 2673 <@push_local Constant 0>
	push_local:3 == 2673 <.define slot Constant 0>
	push_local:6 == 2673 <ldc Register a, Constant 3>
	push_local:7 == 2674 <ldb Register a, Register a>
	push_local:8 == 2675 <ldc Register b, Constant 0>
	push_local:9 == 2676 <add Register a, Register a, Register b>
	push_local:10 == 2677 <ldb Register a, Register b>
	push_local:12 == 2678 <@push_reg Register b>
		push_reg:10 == 2678 <.define registerToPush Register b>
		push_reg:13 == 2678 <ldc Register a, Constant 0>
		push_reg:14 == 2679 <ldb Register a, Register a>
		push_reg:15 == 2680 <stb Register a, Register b>
		push_reg:19 == 2681 <ldc Register b, Constant 1>
		push_reg:20 == 2682 <add Register a, Register a, Register b>
		push_reg:21 == 2683 <ldc Register b, Constant 0>
		push_reg:22 == 2684 <stb Register b, Register a>
pong.pa2:422 == 2685 <@pop_mem_av >
	pop_mem_av:4 == 2685 <.define addr Register c>
	pop_mem_av:5 == 2685 <.define val Register a>
	pop_mem_av:7 == 2685 <@pop_reg Register c>
		pop_reg:10 == 2685 <.define registerToLoad Register c>
		pop_reg:13 == 2685 <ldc Register a, Constant 0>
		pop_reg:14 == 2686 <ldb Register a, Register a>
		pop_reg:15 == 2687 <ldc Register b, Constant 1>
		pop_reg:16 == 2688 <sub Register a, Register a, Register b>
		pop_reg:17 == 2689 <ldc Register b, Constant 0>
		pop_reg:18 == 2690 <stb Register b, Register a>
		pop_reg:22 == 2691 <ldb Register a, Register c>
	pop_mem_av:8 == 2692 <@pop_reg Register a>
		pop_reg:10 == 2692 <.define registerToLoad Register a>
		pop_reg:13 == 2692 <ldc Register a, Constant 0>
		pop_reg:14 == 2693 <ldb Register a, Register a>
		pop_reg:15 == 2694 <ldc Register b, Constant 1>
		pop_reg:16 == 2695 <sub Register a, Register a, Register b>
		pop_reg:17 == 2696 <ldc Register b, Constant 0>
		pop_reg:18 == 2697 <stb Register b, Register a>
		pop_reg:22 == 2698 <ldb Register a, Register a>
	pop_mem_av:10 == 2699 <stb Register c, Register a>
pong.pa2:424 == 2700 <@push_local Constant 0>
	push_local:3 == 2700 <.define slot Constant 0>
	push_local:6 == 2700 <ldc Register a, Constant 3>
	push_local:7 == 2701 <ldb Register a, Register a>
	push_local:8 == 2702 <ldc Register b, Constant 0>
	push_local:9 == 2703 <add Register a, Register a, Register b>
	push_local:10 == 2704 <ldb Register a, Register b>
	push_local:12 == 2705 <@push_reg Register b>
		push_reg:10 == 2705 <.define registerToPush Register b>
		push_reg:13 == 2705 <ldc Register a, Constant 0>
		push_reg:14 == 2706 <ldb Register a, Register a>
		push_reg:15 == 2707 <stb Register a, Register b>
		push_reg:19 == 2708 <ldc Register b, Constant 1>
		push_reg:20 == 2709 <add Register a, Register a, Register b>
		push_reg:21 == 2710 <ldc Register b, Constant 0>
		push_reg:22 == 2711 <stb Register b, Register a>
pong.pa2:425 == 2712 <@push_const Constant 64>
	push_const:6 == 2712 <.define constantToPush Constant 64>
	push_const:12 == 2712 <@ldc Register b, Constant 64>
		ldc:1 == 2712 <.define writeReg Register b>
		ldc:2 == 2712 <.define const Constant 64>
		ldc:4 == 2712 <ldc Register a, Constant 0>
		ldc:5 == 2713 <ldc Register b, Constant 12>
		ldc:6 == 2714 <shl Register a, Register a, Register b>
		ldc:7 == 2715 <ldc Register b, Constant 64>
		ldc:8 == 2716 <or Register b, Register a, Register b>
	push_const:14 == 2717 <@push_reg Register b>
		push_reg:10 == 2717 <.define registerToPush Register b>
		push_reg:13 == 2717 <ldc Register a, Constant 0>
		push_reg:14 == 2718 <ldb Register a, Register a>
		push_reg:15 == 2719 <stb Register a, Register b>
		push_reg:19 == 2720 <ldc Register b, Constant 1>
		push_reg:20 == 2721 <add Register a, Register a, Register b>
		push_reg:21 == 2722 <ldc Register b, Constant 0>
		push_reg:22 == 2723 <stb Register b, Register a>
pong.pa2:426 == 2724 <@add >
	add:3 == 2724 <.define lhs Register c>
	add:4 == 2724 <.define rhs Register d>
	add:5 == 2724 <.define result Register d>
	add:7 == 2724 <@pop_reg Register d>
		pop_reg:10 == 2724 <.define registerToLoad Register d>
		pop_reg:13 == 2724 <ldc Register a, Constant 0>
		pop_reg:14 == 2725 <ldb Register a, Register a>
		pop_reg:15 == 2726 <ldc Register b, Constant 1>
		pop_reg:16 == 2727 <sub Register a, Register a, Register b>
		pop_reg:17 == 2728 <ldc Register b, Constant 0>
		pop_reg:18 == 2729 <stb Register b, Register a>
		pop_reg:22 == 2730 <ldb Register a, Register d>
	add:8 == 2731 <@pop_reg Register c>
		pop_reg:10 == 2731 <.define registerToLoad Register c>
		pop_reg:13 == 2731 <ldc Register a, Constant 0>
		pop_reg:14 == 2732 <ldb Register a, Register a>
		pop_reg:15 == 2733 <ldc Register b, Constant 1>
		pop_reg:16 == 2734 <sub Register a, Register a, Register b>
		pop_reg:17 == 2735 <ldc Register b, Constant 0>
		pop_reg:18 == 2736 <stb Register b, Register a>
		pop_reg:22 == 2737 <ldb Register a, Register c>
	add:9 == 2738 <add Register d, Register c, Register d>
	add:10 == 2739 <@push_reg Register d>
		push_reg:10 == 2739 <.define registerToPush Register d>
		push_reg:13 == 2739 <ldc Register a, Constant 0>
		push_reg:14 == 2740 <ldb Register a, Register a>
		push_reg:15 == 2741 <stb Register a, Register d>
		push_reg:19 == 2742 <ldc Register b, Constant 1>
		push_reg:20 == 2743 <add Register a, Register a, Register b>
		push_reg:21 == 2744 <ldc Register b, Constant 0>
		push_reg:22 == 2745 <stb Register b, Register a>
pong.pa2:427 == 2746 <@pop_local Constant 0>
	pop_local:6 == 2746 <.define slot Constant 0>
	pop_local:8 == 2746 <@pop_reg Register a>
		pop_reg:10 == 2746 <.define registerToLoad Register a>
		pop_reg:13 == 2746 <ldc Register a, Constant 0>
		pop_reg:14 == 2747 <ldb Register a, Register a>
		pop_reg:15 == 2748 <ldc Register b, Constant 1>
		pop_reg:16 == 2749 <sub Register a, Register a, Register b>
		pop_reg:17 == 2750 <ldc Register b, Constant 0>
		pop_reg:18 == 2751 <stb Register b, Register a>
		pop_reg:22 == 2752 <ldb Register a, Register a>
	pop_local:13 == 2753 <ldc Register c, Constant 3>
	pop_local:14 == 2754 <ldb Register c, Register c>
	pop_local:17 == 2755 <ldc Register b, Constant 0>
	pop_local:18 == 2756 <add Register b, Register b, Register c>
	pop_local:21 == 2757 <stb Register b, Register a>
pong.pa2:429 == 2758 <@push_local Constant 0>
	push_local:3 == 2758 <.define slot Constant 0>
	push_local:6 == 2758 <ldc Register a, Constant 3>
	push_local:7 == 2759 <ldb Register a, Register a>
	push_local:8 == 2760 <ldc Register b, Constant 0>
	push_local:9 == 2761 <add Register a, Register a, Register b>
	push_local:10 == 2762 <ldb Register a, Register b>
	push_local:12 == 2763 <@push_reg Register b>
		push_reg:10 == 2763 <.define registerToPush Register b>
		push_reg:13 == 2763 <ldc Register a, Constant 0>
		push_reg:14 == 2764 <ldb Register a, Register a>
		push_reg:15 == 2765 <stb Register a, Register b>
		push_reg:19 == 2766 <ldc Register b, Constant 1>
		push_reg:20 == 2767 <add Register a, Register a, Register b>
		push_reg:21 == 2768 <ldc Register b, Constant 0>
		push_reg:22 == 2769 <stb Register b, Register a>
pong.pa2:430 == 2770 <@push_local Constant 1>
	push_local:3 == 2770 <.define slot Constant 1>
	push_local:6 == 2770 <ldc Register a, Constant 3>
	push_local:7 == 2771 <ldb Register a, Register a>
	push_local:8 == 2772 <ldc Register b, Constant 1>
	push_local:9 == 2773 <add Register a, Register a, Register b>
	push_local:10 == 2774 <ldb Register a, Register b>
	push_local:12 == 2775 <@push_reg Register b>
		push_reg:10 == 2775 <.define registerToPush Register b>
		push_reg:13 == 2775 <ldc Register a, Constant 0>
		push_reg:14 == 2776 <ldb Register a, Register a>
		push_reg:15 == 2777 <stb Register a, Register b>
		push_reg:19 == 2778 <ldc Register b, Constant 1>
		push_reg:20 == 2779 <add Register a, Register a, Register b>
		push_reg:21 == 2780 <ldc Register b, Constant 0>
		push_reg:22 == 2781 <stb Register b, Register a>
pong.pa2:432 == 2782 <@pop_reg Register d>
	pop_reg:10 == 2782 <.define registerToLoad Register d>
	pop_reg:13 == 2782 <ldc Register a, Constant 0>
	pop_reg:14 == 2783 <ldb Register a, Register a>
	pop_reg:15 == 2784 <ldc Register b, Constant 1>
	pop_reg:16 == 2785 <sub Register a, Register a, Register b>
	pop_reg:17 == 2786 <ldc Register b, Constant 0>
	pop_reg:18 == 2787 <stb Register b, Register a>
	pop_reg:22 == 2788 <ldb Register a, Register d>
pong.pa2:433 == 2789 <@pop_reg Register c>
	pop_reg:10 == 2789 <.define registerToLoad Register c>
	pop_reg:13 == 2789 <ldc Register a, Constant 0>
	pop_reg:14 == 2790 <ldb Register a, Register a>
	pop_reg:15 == 2791 <ldc Register b, Constant 1>
	pop_reg:16 == 2792 <sub Register a, Register a, Register b>
	pop_reg:17 == 2793 <ldc Register b, Constant 0>
	pop_reg:18 == 2794 <stb Register b, Register a>
	pop_reg:22 == 2795 <ldb Register a, Register c>
pong.pa2:434 == 2796 <@ldc Register b, Constant 2661>
	ldc:1 == 2796 <.define writeReg Register b>
	ldc:2 == 2796 <.define const Constant 2661>
	ldc:4 == 2796 <ldc Register a, Constant 0>
	ldc:5 == 2797 <ldc Register b, Constant 12>
	ldc:6 == 2798 <shl Register a, Register a, Register b>
	ldc:7 == 2799 <ldc Register b, Constant 2661>
	ldc:8 == 2800 <or Register b, Register a, Register b>
pong.pa2:435 == 2801 <jlt Register b, Register c, Register d>
pong.pa2:437 == 2802 <@return >
	return:2 == 2802 <ldc Register b, Constant 3>
	return:3 == 2803 <ldb Register b, Register b>
	return:4 == 2804 <ldc Register a, Constant 0>
	return:5 == 2805 <stb Register a, Register b>
	return:7 == 2806 <@pop_reg Register d>
		pop_reg:10 == 2806 <.define registerToLoad Register d>
		pop_reg:13 == 2806 <ldc Register a, Constant 0>
		pop_reg:14 == 2807 <ldb Register a, Register a>
		pop_reg:15 == 2808 <ldc Register b, Constant 1>
		pop_reg:16 == 2809 <sub Register a, Register a, Register b>
		pop_reg:17 == 2810 <ldc Register b, Constant 0>
		pop_reg:18 == 2811 <stb Register b, Register a>
		pop_reg:22 == 2812 <ldb Register a, Register d>
	return:9 == 2813 <jump Register d>
pong.pa2:444 == 2814 <@function Constant 0>
	function:19 == 2814 <.define loccount Constant 0>
	function:22 == 2814 <ldc Register a, Constant 0>
	function:23 == 2815 <ldb Register a, Register a>
	function:24 == 2816 <ldc Register b, Constant 3>
	function:25 == 2817 <stb Register b, Register a>
	function:28 == 2818 <ldc Register a, Constant 0>
	function:29 == 2819 <ldb Register a, Register b>
	function:30 == 2820 <ldc Register c, Constant 0>
	function:31 == 2821 <add Register b, Register b, Register c>
	function:32 == 2822 <stb Register a, Register b>
pong.pa2:448 == 2823 <@call_value Constant 3057, Constant 0>
	call_value:1 == 2823 <@call Constant 3057, Constant 0>
		call:11 == 2823 <.define functionLabel Constant 3057>
		call:12 == 2823 <.define argcount Constant 0>
		call:15 == 2823 <@push_mem Constant 2>
			push_mem:6 == 2823 <.define addr Register b>
			push_mem:7 == 2823 <.define value Register b>
			push_mem:9 == 2823 <@ldc Register b, Constant 2>
				ldc:1 == 2823 <.define writeReg Register b>
				ldc:2 == 2823 <.define const Constant 2>
				ldc:4 == 2823 <ldc Register a, Constant 0>
				ldc:5 == 2824 <ldc Register b, Constant 12>
				ldc:6 == 2825 <shl Register a, Register a, Register b>
				ldc:7 == 2826 <ldc Register b, Constant 2>
				ldc:8 == 2827 <or Register b, Register a, Register b>
			push_mem:10 == 2828 <ldb Register b, Register b>
			push_mem:12 == 2829 <@push_reg Register b>
				push_reg:10 == 2829 <.define registerToPush Register b>
				push_reg:13 == 2829 <ldc Register a, Constant 0>
				push_reg:14 == 2830 <ldb Register a, Register a>
				push_reg:15 == 2831 <stb Register a, Register b>
				push_reg:19 == 2832 <ldc Register b, Constant 1>
				push_reg:20 == 2833 <add Register a, Register a, Register b>
				push_reg:21 == 2834 <ldc Register b, Constant 0>
				push_reg:22 == 2835 <stb Register b, Register a>
		call:16 == 2836 <@push_mem Constant 3>
			push_mem:6 == 2836 <.define addr Register b>
			push_mem:7 == 2836 <.define value Register b>
			push_mem:9 == 2836 <@ldc Register b, Constant 3>
				ldc:1 == 2836 <.define writeReg Register b>
				ldc:2 == 2836 <.define const Constant 3>
				ldc:4 == 2836 <ldc Register a, Constant 0>
				ldc:5 == 2837 <ldc Register b, Constant 12>
				ldc:6 == 2838 <shl Register a, Register a, Register b>
				ldc:7 == 2839 <ldc Register b, Constant 3>
				ldc:8 == 2840 <or Register b, Register a, Register b>
			push_mem:10 == 2841 <ldb Register b, Register b>
			push_mem:12 == 2842 <@push_reg Register b>
				push_reg:10 == 2842 <.define registerToPush Register b>
				push_reg:13 == 2842 <ldc Register a, Constant 0>
				push_reg:14 == 2843 <ldb Register a, Register a>
				push_reg:15 == 2844 <stb Register a, Register b>
				push_reg:19 == 2845 <ldc Register b, Constant 1>
				push_reg:20 == 2846 <add Register a, Register a, Register b>
				push_reg:21 == 2847 <ldc Register b, Constant 0>
				push_reg:22 == 2848 <stb Register b, Register a>
		call:19 == 2849 <@push_const Constant 2873>
			push_const:6 == 2849 <.define constantToPush Constant 2873>
			push_const:12 == 2849 <@ldc Register b, Constant 2873>
				ldc:1 == 2849 <.define writeReg Register b>
				ldc:2 == 2849 <.define const Constant 2873>
				ldc:4 == 2849 <ldc Register a, Constant 0>
				ldc:5 == 2850 <ldc Register b, Constant 12>
				ldc:6 == 2851 <shl Register a, Register a, Register b>
				ldc:7 == 2852 <ldc Register b, Constant 2873>
				ldc:8 == 2853 <or Register b, Register a, Register b>
			push_const:14 == 2854 <@push_reg Register b>
				push_reg:10 == 2854 <.define registerToPush Register b>
				push_reg:13 == 2854 <ldc Register a, Constant 0>
				push_reg:14 == 2855 <ldb Register a, Register a>
				push_reg:15 == 2856 <stb Register a, Register b>
				push_reg:19 == 2857 <ldc Register b, Constant 1>
				push_reg:20 == 2858 <add Register a, Register a, Register b>
				push_reg:21 == 2859 <ldc Register b, Constant 0>
				push_reg:22 == 2860 <stb Register b, Register a>
		call:24 == 2861 <ldc Register a, Constant 0>
		call:25 == 2862 <ldb Register a, Register c>
		call:26 == 2863 <ldc Register b, Constant 3>
		call:27 == 2864 <sub Register c, Register c, Register b>
		call:28 == 2865 <ldc Register a, Constant 2>
		call:29 == 2866 <stb Register a, Register c>
		call:39 == 2867 <@ldc Register a, Constant 3057>
			ldc:1 == 2867 <.define writeReg Register a>
			ldc:2 == 2867 <.define const Constant 3057>
			ldc:4 == 2867 <ldc Register a, Constant 0>
			ldc:5 == 2868 <ldc Register b, Constant 12>
			ldc:6 == 2869 <shl Register a, Register a, Register b>
			ldc:7 == 2870 <ldc Register b, Constant 3057>
			ldc:8 == 2871 <or Register a, Register a, Register b>
		call:40 == 2872 <jmp Register a>
		call:45 == 2873 <ldc Register d, Constant 2>
		call:48 == 2874 <ldb Register d, Register d>
		call:50 == 2875 <@pop_mem_v Constant 3>
			pop_mem_v:6 == 2875 <.define val Register c>
			pop_mem_v:7 == 2875 <.define addr Constant 3>
			pop_mem_v:9 == 2875 <@pop_reg Register c>
				pop_reg:10 == 2875 <.define registerToLoad Register c>
				pop_reg:13 == 2875 <ldc Register a, Constant 0>
				pop_reg:14 == 2876 <ldb Register a, Register a>
				pop_reg:15 == 2877 <ldc Register b, Constant 1>
				pop_reg:16 == 2878 <sub Register a, Register a, Register b>
				pop_reg:17 == 2879 <ldc Register b, Constant 0>
				pop_reg:18 == 2880 <stb Register b, Register a>
				pop_reg:22 == 2881 <ldb Register a, Register c>
			pop_mem_v:11 == 2882 <@ldc Register b, Constant 3>
				ldc:1 == 2882 <.define writeReg Register b>
				ldc:2 == 2882 <.define const Constant 3>
				ldc:4 == 2882 <ldc Register a, Constant 0>
				ldc:5 == 2883 <ldc Register b, Constant 12>
				ldc:6 == 2884 <shl Register a, Register a, Register b>
				ldc:7 == 2885 <ldc Register b, Constant 3>
				ldc:8 == 2886 <or Register b, Register a, Register b>
			pop_mem_v:12 == 2887 <stb Register b, Register c>
		call:51 == 2888 <@pop_mem_v Constant 2>
			pop_mem_v:6 == 2888 <.define val Register c>
			pop_mem_v:7 == 2888 <.define addr Constant 2>
			pop_mem_v:9 == 2888 <@pop_reg Register c>
				pop_reg:10 == 2888 <.define registerToLoad Register c>
				pop_reg:13 == 2888 <ldc Register a, Constant 0>
				pop_reg:14 == 2889 <ldb Register a, Register a>
				pop_reg:15 == 2890 <ldc Register b, Constant 1>
				pop_reg:16 == 2891 <sub Register a, Register a, Register b>
				pop_reg:17 == 2892 <ldc Register b, Constant 0>
				pop_reg:18 == 2893 <stb Register b, Register a>
				pop_reg:22 == 2894 <ldb Register a, Register c>
			pop_mem_v:11 == 2895 <@ldc Register b, Constant 2>
				ldc:1 == 2895 <.define writeReg Register b>
				ldc:2 == 2895 <.define const Constant 2>
				ldc:4 == 2895 <ldc Register a, Constant 0>
				ldc:5 == 2896 <ldc Register b, Constant 12>
				ldc:6 == 2897 <shl Register a, Register a, Register b>
				ldc:7 == 2898 <ldc Register b, Constant 2>
				ldc:8 == 2899 <or Register b, Register a, Register b>
			pop_mem_v:12 == 2900 <stb Register b, Register c>
		call:53 == 2901 <ldc Register c, Constant 0>
		call:54 == 2902 <stb Register c, Register d>
	call_value:3 == 2903 <@push_mem Constant 1>
		push_mem:6 == 2903 <.define addr Register b>
		push_mem:7 == 2903 <.define value Register b>
		push_mem:9 == 2903 <@ldc Register b, Constant 1>
			ldc:1 == 2903 <.define writeReg Register b>
			ldc:2 == 2903 <.define const Constant 1>
			ldc:4 == 2903 <ldc Register a, Constant 0>
			ldc:5 == 2904 <ldc Register b, Constant 12>
			ldc:6 == 2905 <shl Register a, Register a, Register b>
			ldc:7 == 2906 <ldc Register b, Constant 1>
			ldc:8 == 2907 <or Register b, Register a, Register b>
		push_mem:10 == 2908 <ldb Register b, Register b>
		push_mem:12 == 2909 <@push_reg Register b>
			push_reg:10 == 2909 <.define registerToPush Register b>
			push_reg:13 == 2909 <ldc Register a, Constant 0>
			push_reg:14 == 2910 <ldb Register a, Register a>
			push_reg:15 == 2911 <stb Register a, Register b>
			push_reg:19 == 2912 <ldc Register b, Constant 1>
			push_reg:20 == 2913 <add Register a, Register a, Register b>
			push_reg:21 == 2914 <ldc Register b, Constant 0>
			push_reg:22 == 2915 <stb Register b, Register a>
pong.pa2:449 == 2916 <@push_const Constant 64>
	push_const:6 == 2916 <.define constantToPush Constant 64>
	push_const:12 == 2916 <@ldc Register b, Constant 64>
		ldc:1 == 2916 <.define writeReg Register b>
		ldc:2 == 2916 <.define const Constant 64>
		ldc:4 == 2916 <ldc Register a, Constant 0>
		ldc:5 == 2917 <ldc Register b, Constant 12>
		ldc:6 == 2918 <shl Register a, Register a, Register b>
		ldc:7 == 2919 <ldc Register b, Constant 64>
		ldc:8 == 2920 <or Register b, Register a, Register b>
	push_const:14 == 2921 <@push_reg Register b>
		push_reg:10 == 2921 <.define registerToPush Register b>
		push_reg:13 == 2921 <ldc Register a, Constant 0>
		push_reg:14 == 2922 <ldb Register a, Register a>
		push_reg:15 == 2923 <stb Register a, Register b>
		push_reg:19 == 2924 <ldc Register b, Constant 1>
		push_reg:20 == 2925 <add Register a, Register a, Register b>
		push_reg:21 == 2926 <ldc Register b, Constant 0>
		push_reg:22 == 2927 <stb Register b, Register a>
pong.pa2:450 == 2928 <@push_arg Constant 1>
	push_arg:3 == 2928 <.define slot Constant 1>
	push_arg:6 == 2928 <ldc Register a, Constant 2>
	push_arg:7 == 2929 <ldb Register a, Register a>
	push_arg:8 == 2930 <ldc Register b, Constant 1>
	push_arg:9 == 2931 <add Register a, Register a, Register b>
	push_arg:10 == 2932 <ldb Register a, Register b>
	push_arg:12 == 2933 <@push_reg Register b>
		push_reg:10 == 2933 <.define registerToPush Register b>
		push_reg:13 == 2933 <ldc Register a, Constant 0>
		push_reg:14 == 2934 <ldb Register a, Register a>
		push_reg:15 == 2935 <stb Register a, Register b>
		push_reg:19 == 2936 <ldc Register b, Constant 1>
		push_reg:20 == 2937 <add Register a, Register a, Register b>
		push_reg:21 == 2938 <ldc Register b, Constant 0>
		push_reg:22 == 2939 <stb Register b, Register a>
pong.pa2:451 == 2940 <@mul >
	mul:3 == 2940 <.define lhs Register c>
	mul:4 == 2940 <.define rhs Register d>
	mul:5 == 2940 <.define result Register d>
	mul:7 == 2940 <@pop_reg Register d>
		pop_reg:10 == 2940 <.define registerToLoad Register d>
		pop_reg:13 == 2940 <ldc Register a, Constant 0>
		pop_reg:14 == 2941 <ldb Register a, Register a>
		pop_reg:15 == 2942 <ldc Register b, Constant 1>
		pop_reg:16 == 2943 <sub Register a, Register a, Register b>
		pop_reg:17 == 2944 <ldc Register b, Constant 0>
		pop_reg:18 == 2945 <stb Register b, Register a>
		pop_reg:22 == 2946 <ldb Register a, Register d>
	mul:8 == 2947 <@pop_reg Register c>
		pop_reg:10 == 2947 <.define registerToLoad Register c>
		pop_reg:13 == 2947 <ldc Register a, Constant 0>
		pop_reg:14 == 2948 <ldb Register a, Register a>
		pop_reg:15 == 2949 <ldc Register b, Constant 1>
		pop_reg:16 == 2950 <sub Register a, Register a, Register b>
		pop_reg:17 == 2951 <ldc Register b, Constant 0>
		pop_reg:18 == 2952 <stb Register b, Register a>
		pop_reg:22 == 2953 <ldb Register a, Register c>
	mul:9 == 2954 <mul Register d, Register c, Register d>
	mul:10 == 2955 <@push_reg Register d>
		push_reg:10 == 2955 <.define registerToPush Register d>
		push_reg:13 == 2955 <ldc Register a, Constant 0>
		push_reg:14 == 2956 <ldb Register a, Register a>
		push_reg:15 == 2957 <stb Register a, Register d>
		push_reg:19 == 2958 <ldc Register b, Constant 1>
		push_reg:20 == 2959 <add Register a, Register a, Register b>
		push_reg:21 == 2960 <ldc Register b, Constant 0>
		push_reg:22 == 2961 <stb Register b, Register a>
pong.pa2:452 == 2962 <@add >
	add:3 == 2962 <.define lhs Register c>
	add:4 == 2962 <.define rhs Register d>
	add:5 == 2962 <.define result Register d>
	add:7 == 2962 <@pop_reg Register d>
		pop_reg:10 == 2962 <.define registerToLoad Register d>
		pop_reg:13 == 2962 <ldc Register a, Constant 0>
		pop_reg:14 == 2963 <ldb Register a, Register a>
		pop_reg:15 == 2964 <ldc Register b, Constant 1>
		pop_reg:16 == 2965 <sub Register a, Register a, Register b>
		pop_reg:17 == 2966 <ldc Register b, Constant 0>
		pop_reg:18 == 2967 <stb Register b, Register a>
		pop_reg:22 == 2968 <ldb Register a, Register d>
	add:8 == 2969 <@pop_reg Register c>
		pop_reg:10 == 2969 <.define registerToLoad Register c>
		pop_reg:13 == 2969 <ldc Register a, Constant 0>
		pop_reg:14 == 2970 <ldb Register a, Register a>
		pop_reg:15 == 2971 <ldc Register b, Constant 1>
		pop_reg:16 == 2972 <sub Register a, Register a, Register b>
		pop_reg:17 == 2973 <ldc Register b, Constant 0>
		pop_reg:18 == 2974 <stb Register b, Register a>
		pop_reg:22 == 2975 <ldb Register a, Register c>
	add:9 == 2976 <add Register d, Register c, Register d>
	add:10 == 2977 <@push_reg Register d>
		push_reg:10 == 2977 <.define registerToPush Register d>
		push_reg:13 == 2977 <ldc Register a, Constant 0>
		push_reg:14 == 2978 <ldb Register a, Register a>
		push_reg:15 == 2979 <stb Register a, Register d>
		push_reg:19 == 2980 <ldc Register b, Constant 1>
		push_reg:20 == 2981 <add Register a, Register a, Register b>
		push_reg:21 == 2982 <ldc Register b, Constant 0>
		push_reg:22 == 2983 <stb Register b, Register a>
pong.pa2:453 == 2984 <@push_arg Constant 0>
	push_arg:3 == 2984 <.define slot Constant 0>
	push_arg:6 == 2984 <ldc Register a, Constant 2>
	push_arg:7 == 2985 <ldb Register a, Register a>
	push_arg:8 == 2986 <ldc Register b, Constant 0>
	push_arg:9 == 2987 <add Register a, Register a, Register b>
	push_arg:10 == 2988 <ldb Register a, Register b>
	push_arg:12 == 2989 <@push_reg Register b>
		push_reg:10 == 2989 <.define registerToPush Register b>
		push_reg:13 == 2989 <ldc Register a, Constant 0>
		push_reg:14 == 2990 <ldb Register a, Register a>
		push_reg:15 == 2991 <stb Register a, Register b>
		push_reg:19 == 2992 <ldc Register b, Constant 1>
		push_reg:20 == 2993 <add Register a, Register a, Register b>
		push_reg:21 == 2994 <ldc Register b, Constant 0>
		push_reg:22 == 2995 <stb Register b, Register a>
pong.pa2:454 == 2996 <@add >
	add:3 == 2996 <.define lhs Register c>
	add:4 == 2996 <.define rhs Register d>
	add:5 == 2996 <.define result Register d>
	add:7 == 2996 <@pop_reg Register d>
		pop_reg:10 == 2996 <.define registerToLoad Register d>
		pop_reg:13 == 2996 <ldc Register a, Constant 0>
		pop_reg:14 == 2997 <ldb Register a, Register a>
		pop_reg:15 == 2998 <ldc Register b, Constant 1>
		pop_reg:16 == 2999 <sub Register a, Register a, Register b>
		pop_reg:17 == 3000 <ldc Register b, Constant 0>
		pop_reg:18 == 3001 <stb Register b, Register a>
		pop_reg:22 == 3002 <ldb Register a, Register d>
	add:8 == 3003 <@pop_reg Register c>
		pop_reg:10 == 3003 <.define registerToLoad Register c>
		pop_reg:13 == 3003 <ldc Register a, Constant 0>
		pop_reg:14 == 3004 <ldb Register a, Register a>
		pop_reg:15 == 3005 <ldc Register b, Constant 1>
		pop_reg:16 == 3006 <sub Register a, Register a, Register b>
		pop_reg:17 == 3007 <ldc Register b, Constant 0>
		pop_reg:18 == 3008 <stb Register b, Register a>
		pop_reg:22 == 3009 <ldb Register a, Register c>
	add:9 == 3010 <add Register d, Register c, Register d>
	add:10 == 3011 <@push_reg Register d>
		push_reg:10 == 3011 <.define registerToPush Register d>
		push_reg:13 == 3011 <ldc Register a, Constant 0>
		push_reg:14 == 3012 <ldb Register a, Register a>
		push_reg:15 == 3013 <stb Register a, Register d>
		push_reg:19 == 3014 <ldc Register b, Constant 1>
		push_reg:20 == 3015 <add Register a, Register a, Register b>
		push_reg:21 == 3016 <ldc Register b, Constant 0>
		push_reg:22 == 3017 <stb Register b, Register a>
pong.pa2:457 == 3018 <@push_arg Constant 2>
	push_arg:3 == 3018 <.define slot Constant 2>
	push_arg:6 == 3018 <ldc Register a, Constant 2>
	push_arg:7 == 3019 <ldb Register a, Register a>
	push_arg:8 == 3020 <ldc Register b, Constant 2>
	push_arg:9 == 3021 <add Register a, Register a, Register b>
	push_arg:10 == 3022 <ldb Register a, Register b>
	push_arg:12 == 3023 <@push_reg Register b>
		push_reg:10 == 3023 <.define registerToPush Register b>
		push_reg:13 == 3023 <ldc Register a, Constant 0>
		push_reg:14 == 3024 <ldb Register a, Register a>
		push_reg:15 == 3025 <stb Register a, Register b>
		push_reg:19 == 3026 <ldc Register b, Constant 1>
		push_reg:20 == 3027 <add Register a, Register a, Register b>
		push_reg:21 == 3028 <ldc Register b, Constant 0>
		push_reg:22 == 3029 <stb Register b, Register a>
pong.pa2:458 == 3030 <@pop_mem_va >
	pop_mem_va:4 == 3030 <.define val Register c>
	pop_mem_va:5 == 3030 <.define addr Register a>
	pop_mem_va:7 == 3030 <@pop_reg Register c>
		pop_reg:10 == 3030 <.define registerToLoad Register c>
		pop_reg:13 == 3030 <ldc Register a, Constant 0>
		pop_reg:14 == 3031 <ldb Register a, Register a>
		pop_reg:15 == 3032 <ldc Register b, Constant 1>
		pop_reg:16 == 3033 <sub Register a, Register a, Register b>
		pop_reg:17 == 3034 <ldc Register b, Constant 0>
		pop_reg:18 == 3035 <stb Register b, Register a>
		pop_reg:22 == 3036 <ldb Register a, Register c>
	pop_mem_va:8 == 3037 <@pop_reg Register a>
		pop_reg:10 == 3037 <.define registerToLoad Register a>
		pop_reg:13 == 3037 <ldc Register a, Constant 0>
		pop_reg:14 == 3038 <ldb Register a, Register a>
		pop_reg:15 == 3039 <ldc Register b, Constant 1>
		pop_reg:16 == 3040 <sub Register a, Register a, Register b>
		pop_reg:17 == 3041 <ldc Register b, Constant 0>
		pop_reg:18 == 3042 <stb Register b, Register a>
		pop_reg:22 == 3043 <ldb Register a, Register a>
	pop_mem_va:10 == 3044 <stb Register a, Register c>
pong.pa2:460 == 3045 <@return >
	return:2 == 3045 <ldc Register b, Constant 3>
	return:3 == 3046 <ldb Register b, Register b>
	return:4 == 3047 <ldc Register a, Constant 0>
	return:5 == 3048 <stb Register a, Register b>
	return:7 == 3049 <@pop_reg Register d>
		pop_reg:10 == 3049 <.define registerToLoad Register d>
		pop_reg:13 == 3049 <ldc Register a, Constant 0>
		pop_reg:14 == 3050 <ldb Register a, Register a>
		pop_reg:15 == 3051 <ldc Register b, Constant 1>
		pop_reg:16 == 3052 <sub Register a, Register a, Register b>
		pop_reg:17 == 3053 <ldc Register b, Constant 0>
		pop_reg:18 == 3054 <stb Register b, Register a>
		pop_reg:22 == 3055 <ldb Register a, Register d>
	return:9 == 3056 <jump Register d>
pong.pa2:468 == 3057 <@function Constant 0>
	function:19 == 3057 <.define loccount Constant 0>
	function:22 == 3057 <ldc Register a, Constant 0>
	function:23 == 3058 <ldb Register a, Register a>
	function:24 == 3059 <ldc Register b, Constant 3>
	function:25 == 3060 <stb Register b, Register a>
	function:28 == 3061 <ldc Register a, Constant 0>
	function:29 == 3062 <ldb Register a, Register b>
	function:30 == 3063 <ldc Register c, Constant 0>
	function:31 == 3064 <add Register b, Register b, Register c>
	function:32 == 3065 <stb Register a, Register b>
pong.pa2:471 == 3066 <@push_const Constant 16384>
	push_const:6 == 3066 <.define constantToPush Constant 16384>
	push_const:12 == 3066 <@ldc Register b, Constant 16384>
		ldc:1 == 3066 <.define writeReg Register b>
		ldc:2 == 3066 <.define const Constant 16384>
		ldc:4 == 3066 <ldc Register a, Constant 4>
		ldc:5 == 3067 <ldc Register b, Constant 12>
		ldc:6 == 3068 <shl Register a, Register a, Register b>
		ldc:7 == 3069 <ldc Register b, Constant 0>
		ldc:8 == 3070 <or Register b, Register a, Register b>
	push_const:14 == 3071 <@push_reg Register b>
		push_reg:10 == 3071 <.define registerToPush Register b>
		push_reg:13 == 3071 <ldc Register a, Constant 0>
		push_reg:14 == 3072 <ldb Register a, Register a>
		push_reg:15 == 3073 <stb Register a, Register b>
		push_reg:19 == 3074 <ldc Register b, Constant 1>
		push_reg:20 == 3075 <add Register a, Register a, Register b>
		push_reg:21 == 3076 <ldc Register b, Constant 0>
		push_reg:22 == 3077 <stb Register b, Register a>
pong.pa2:472 == 3078 <@push_const Constant 24577>
	push_const:6 == 3078 <.define constantToPush Constant 24577>
	push_const:12 == 3078 <@ldc Register b, Constant 24577>
		ldc:1 == 3078 <.define writeReg Register b>
		ldc:2 == 3078 <.define const Constant 24577>
		ldc:4 == 3078 <ldc Register a, Constant 6>
		ldc:5 == 3079 <ldc Register b, Constant 12>
		ldc:6 == 3080 <shl Register a, Register a, Register b>
		ldc:7 == 3081 <ldc Register b, Constant 1>
		ldc:8 == 3082 <or Register b, Register a, Register b>
	push_const:14 == 3083 <@push_reg Register b>
		push_reg:10 == 3083 <.define registerToPush Register b>
		push_reg:13 == 3083 <ldc Register a, Constant 0>
		push_reg:14 == 3084 <ldb Register a, Register a>
		push_reg:15 == 3085 <stb Register a, Register b>
		push_reg:19 == 3086 <ldc Register b, Constant 1>
		push_reg:20 == 3087 <add Register a, Register a, Register b>
		push_reg:21 == 3088 <ldc Register b, Constant 0>
		push_reg:22 == 3089 <stb Register b, Register a>
pong.pa2:473 == 3090 <@push_mem_a >
	push_mem_a:4 == 3090 <.define val Register c>
	push_mem_a:5 == 3090 <.define addr Register d>
	push_mem_a:7 == 3090 <@pop_reg Register d>
		pop_reg:10 == 3090 <.define registerToLoad Register d>
		pop_reg:13 == 3090 <ldc Register a, Constant 0>
		pop_reg:14 == 3091 <ldb Register a, Register a>
		pop_reg:15 == 3092 <ldc Register b, Constant 1>
		pop_reg:16 == 3093 <sub Register a, Register a, Register b>
		pop_reg:17 == 3094 <ldc Register b, Constant 0>
		pop_reg:18 == 3095 <stb Register b, Register a>
		pop_reg:22 == 3096 <ldb Register a, Register d>
	push_mem_a:9 == 3097 <ldb Register d, Register c>
	push_mem_a:11 == 3098 <@push_reg Register c>
		push_reg:10 == 3098 <.define registerToPush Register c>
		push_reg:13 == 3098 <ldc Register a, Constant 0>
		push_reg:14 == 3099 <ldb Register a, Register a>
		push_reg:15 == 3100 <stb Register a, Register c>
		push_reg:19 == 3101 <ldc Register b, Constant 1>
		push_reg:20 == 3102 <add Register a, Register a, Register b>
		push_reg:21 == 3103 <ldc Register b, Constant 0>
		push_reg:22 == 3104 <stb Register b, Register a>
pong.pa2:474 == 3105 <@not >
	not:3 == 3105 <.define operand Register c>
	not:4 == 3105 <.define result Register d>
	not:6 == 3105 <@pop_reg Register c>
		pop_reg:10 == 3105 <.define registerToLoad Register c>
		pop_reg:13 == 3105 <ldc Register a, Constant 0>
		pop_reg:14 == 3106 <ldb Register a, Register a>
		pop_reg:15 == 3107 <ldc Register b, Constant 1>
		pop_reg:16 == 3108 <sub Register a, Register a, Register b>
		pop_reg:17 == 3109 <ldc Register b, Constant 0>
		pop_reg:18 == 3110 <stb Register b, Register a>
		pop_reg:22 == 3111 <ldb Register a, Register c>
	not:7 == 3112 <not Register d, Register c>
	not:8 == 3113 <@push_reg Register d>
		push_reg:10 == 3113 <.define registerToPush Register d>
		push_reg:13 == 3113 <ldc Register a, Constant 0>
		push_reg:14 == 3114 <ldb Register a, Register a>
		push_reg:15 == 3115 <stb Register a, Register d>
		push_reg:19 == 3116 <ldc Register b, Constant 1>
		push_reg:20 == 3117 <add Register a, Register a, Register b>
		push_reg:21 == 3118 <ldc Register b, Constant 0>
		push_reg:22 == 3119 <stb Register b, Register a>
pong.pa2:475 == 3120 <@push_const Constant 1>
	push_const:6 == 3120 <.define constantToPush Constant 1>
	push_const:12 == 3120 <@ldc Register b, Constant 1>
		ldc:1 == 3120 <.define writeReg Register b>
		ldc:2 == 3120 <.define const Constant 1>
		ldc:4 == 3120 <ldc Register a, Constant 0>
		ldc:5 == 3121 <ldc Register b, Constant 12>
		ldc:6 == 3122 <shl Register a, Register a, Register b>
		ldc:7 == 3123 <ldc Register b, Constant 1>
		ldc:8 == 3124 <or Register b, Register a, Register b>
	push_const:14 == 3125 <@push_reg Register b>
		push_reg:10 == 3125 <.define registerToPush Register b>
		push_reg:13 == 3125 <ldc Register a, Constant 0>
		push_reg:14 == 3126 <ldb Register a, Register a>
		push_reg:15 == 3127 <stb Register a, Register b>
		push_reg:19 == 3128 <ldc Register b, Constant 1>
		push_reg:20 == 3129 <add Register a, Register a, Register b>
		push_reg:21 == 3130 <ldc Register b, Constant 0>
		push_reg:22 == 3131 <stb Register b, Register a>
pong.pa2:476 == 3132 <@and >
	and:3 == 3132 <.define lhs Register c>
	and:4 == 3132 <.define rhs Register d>
	and:5 == 3132 <.define result Register d>
	and:7 == 3132 <@pop_reg Register d>
		pop_reg:10 == 3132 <.define registerToLoad Register d>
		pop_reg:13 == 3132 <ldc Register a, Constant 0>
		pop_reg:14 == 3133 <ldb Register a, Register a>
		pop_reg:15 == 3134 <ldc Register b, Constant 1>
		pop_reg:16 == 3135 <sub Register a, Register a, Register b>
		pop_reg:17 == 3136 <ldc Register b, Constant 0>
		pop_reg:18 == 3137 <stb Register b, Register a>
		pop_reg:22 == 3138 <ldb Register a, Register d>
	and:8 == 3139 <@pop_reg Register c>
		pop_reg:10 == 3139 <.define registerToLoad Register c>
		pop_reg:13 == 3139 <ldc Register a, Constant 0>
		pop_reg:14 == 3140 <ldb Register a, Register a>
		pop_reg:15 == 3141 <ldc Register b, Constant 1>
		pop_reg:16 == 3142 <sub Register a, Register a, Register b>
		pop_reg:17 == 3143 <ldc Register b, Constant 0>
		pop_reg:18 == 3144 <stb Register b, Register a>
		pop_reg:22 == 3145 <ldb Register a, Register c>
	and:9 == 3146 <and Register d, Register c, Register d>
	and:10 == 3147 <@push_reg Register d>
		push_reg:10 == 3147 <.define registerToPush Register d>
		push_reg:13 == 3147 <ldc Register a, Constant 0>
		push_reg:14 == 3148 <ldb Register a, Register a>
		push_reg:15 == 3149 <stb Register a, Register d>
		push_reg:19 == 3150 <ldc Register b, Constant 1>
		push_reg:20 == 3151 <add Register a, Register a, Register b>
		push_reg:21 == 3152 <ldc Register b, Constant 0>
		push_reg:22 == 3153 <stb Register b, Register a>
pong.pa2:477 == 3154 <@push_const Constant 4096>
	push_const:6 == 3154 <.define constantToPush Constant 4096>
	push_const:12 == 3154 <@ldc Register b, Constant 4096>
		ldc:1 == 3154 <.define writeReg Register b>
		ldc:2 == 3154 <.define const Constant 4096>
		ldc:4 == 3154 <ldc Register a, Constant 1>
		ldc:5 == 3155 <ldc Register b, Constant 12>
		ldc:6 == 3156 <shl Register a, Register a, Register b>
		ldc:7 == 3157 <ldc Register b, Constant 0>
		ldc:8 == 3158 <or Register b, Register a, Register b>
	push_const:14 == 3159 <@push_reg Register b>
		push_reg:10 == 3159 <.define registerToPush Register b>
		push_reg:13 == 3159 <ldc Register a, Constant 0>
		push_reg:14 == 3160 <ldb Register a, Register a>
		push_reg:15 == 3161 <stb Register a, Register b>
		push_reg:19 == 3162 <ldc Register b, Constant 1>
		push_reg:20 == 3163 <add Register a, Register a, Register b>
		push_reg:21 == 3164 <ldc Register b, Constant 0>
		push_reg:22 == 3165 <stb Register b, Register a>
pong.pa2:478 == 3166 <@mul >
	mul:3 == 3166 <.define lhs Register c>
	mul:4 == 3166 <.define rhs Register d>
	mul:5 == 3166 <.define result Register d>
	mul:7 == 3166 <@pop_reg Register d>
		pop_reg:10 == 3166 <.define registerToLoad Register d>
		pop_reg:13 == 3166 <ldc Register a, Constant 0>
		pop_reg:14 == 3167 <ldb Register a, Register a>
		pop_reg:15 == 3168 <ldc Register b, Constant 1>
		pop_reg:16 == 3169 <sub Register a, Register a, Register b>
		pop_reg:17 == 3170 <ldc Register b, Constant 0>
		pop_reg:18 == 3171 <stb Register b, Register a>
		pop_reg:22 == 3172 <ldb Register a, Register d>
	mul:8 == 3173 <@pop_reg Register c>
		pop_reg:10 == 3173 <.define registerToLoad Register c>
		pop_reg:13 == 3173 <ldc Register a, Constant 0>
		pop_reg:14 == 3174 <ldb Register a, Register a>
		pop_reg:15 == 3175 <ldc Register b, Constant 1>
		pop_reg:16 == 3176 <sub Register a, Register a, Register b>
		pop_reg:17 == 3177 <ldc Register b, Constant 0>
		pop_reg:18 == 3178 <stb Register b, Register a>
		pop_reg:22 == 3179 <ldb Register a, Register c>
	mul:9 == 3180 <mul Register d, Register c, Register d>
	mul:10 == 3181 <@push_reg Register d>
		push_reg:10 == 3181 <.define registerToPush Register d>
		push_reg:13 == 3181 <ldc Register a, Constant 0>
		push_reg:14 == 3182 <ldb Register a, Register a>
		push_reg:15 == 3183 <stb Register a, Register d>
		push_reg:19 == 3184 <ldc Register b, Constant 1>
		push_reg:20 == 3185 <add Register a, Register a, Register b>
		push_reg:21 == 3186 <ldc Register b, Constant 0>
		push_reg:22 == 3187 <stb Register b, Register a>
pong.pa2:479 == 3188 <@add >
	add:3 == 3188 <.define lhs Register c>
	add:4 == 3188 <.define rhs Register d>
	add:5 == 3188 <.define result Register d>
	add:7 == 3188 <@pop_reg Register d>
		pop_reg:10 == 3188 <.define registerToLoad Register d>
		pop_reg:13 == 3188 <ldc Register a, Constant 0>
		pop_reg:14 == 3189 <ldb Register a, Register a>
		pop_reg:15 == 3190 <ldc Register b, Constant 1>
		pop_reg:16 == 3191 <sub Register a, Register a, Register b>
		pop_reg:17 == 3192 <ldc Register b, Constant 0>
		pop_reg:18 == 3193 <stb Register b, Register a>
		pop_reg:22 == 3194 <ldb Register a, Register d>
	add:8 == 3195 <@pop_reg Register c>
		pop_reg:10 == 3195 <.define registerToLoad Register c>
		pop_reg:13 == 3195 <ldc Register a, Constant 0>
		pop_reg:14 == 3196 <ldb Register a, Register a>
		pop_reg:15 == 3197 <ldc Register b, Constant 1>
		pop_reg:16 == 3198 <sub Register a, Register a, Register b>
		pop_reg:17 == 3199 <ldc Register b, Constant 0>
		pop_reg:18 == 3200 <stb Register b, Register a>
		pop_reg:22 == 3201 <ldb Register a, Register c>
	add:9 == 3202 <add Register d, Register c, Register d>
	add:10 == 3203 <@push_reg Register d>
		push_reg:10 == 3203 <.define registerToPush Register d>
		push_reg:13 == 3203 <ldc Register a, Constant 0>
		push_reg:14 == 3204 <ldb Register a, Register a>
		push_reg:15 == 3205 <stb Register a, Register d>
		push_reg:19 == 3206 <ldc Register b, Constant 1>
		push_reg:20 == 3207 <add Register a, Register a, Register b>
		push_reg:21 == 3208 <ldc Register b, Constant 0>
		push_reg:22 == 3209 <stb Register b, Register a>
pong.pa2:481 == 3210 <@return_value >
	return_value:4 == 3210 <@pop_mem_v Constant 1>
		pop_mem_v:6 == 3210 <.define val Register c>
		pop_mem_v:7 == 3210 <.define addr Constant 1>
		pop_mem_v:9 == 3210 <@pop_reg Register c>
			pop_reg:10 == 3210 <.define registerToLoad Register c>
			pop_reg:13 == 3210 <ldc Register a, Constant 0>
			pop_reg:14 == 3211 <ldb Register a, Register a>
			pop_reg:15 == 3212 <ldc Register b, Constant 1>
			pop_reg:16 == 3213 <sub Register a, Register a, Register b>
			pop_reg:17 == 3214 <ldc Register b, Constant 0>
			pop_reg:18 == 3215 <stb Register b, Register a>
			pop_reg:22 == 3216 <ldb Register a, Register c>
		pop_mem_v:11 == 3217 <@ldc Register b, Constant 1>
			ldc:1 == 3217 <.define writeReg Register b>
			ldc:2 == 3217 <.define const Constant 1>
			ldc:4 == 3217 <ldc Register a, Constant 0>
			ldc:5 == 3218 <ldc Register b, Constant 12>
			ldc:6 == 3219 <shl Register a, Register a, Register b>
			ldc:7 == 3220 <ldc Register b, Constant 1>
			ldc:8 == 3221 <or Register b, Register a, Register b>
		pop_mem_v:12 == 3222 <stb Register b, Register c>
	return_value:6 == 3223 <@return >
		return:2 == 3223 <ldc Register b, Constant 3>
		return:3 == 3224 <ldb Register b, Register b>
		return:4 == 3225 <ldc Register a, Constant 0>
		return:5 == 3226 <stb Register a, Register b>
		return:7 == 3227 <@pop_reg Register d>
			pop_reg:10 == 3227 <.define registerToLoad Register d>
			pop_reg:13 == 3227 <ldc Register a, Constant 0>
			pop_reg:14 == 3228 <ldb Register a, Register a>
			pop_reg:15 == 3229 <ldc Register b, Constant 1>
			pop_reg:16 == 3230 <sub Register a, Register a, Register b>
			pop_reg:17 == 3231 <ldc Register b, Constant 0>
			pop_reg:18 == 3232 <stb Register b, Register a>
			pop_reg:22 == 3233 <ldb Register a, Register d>
		return:9 == 3234 <jump Register d>
