<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes>
    <entry>
      <string>isGeneric</string>
      <boolean>true</boolean>
    </entry>
    <entry>
      <string>romContent</string>
      <romList>
        <roms/>
      </romList>
    </entry>
    <entry>
      <string>Width</string>
      <int>7</int>
    </entry>
  </attributes>
  <visualElements>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>value_in</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>16</int>
        </entry>
        <entry>
          <string>generic</string>
          <string>this.Bits = args.ValueSize;</string>
        </entry>
      </elementAttributes>
      <pos x="760" y="920"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>value_out</string>
        </entry>
        <entry>
          <string>generic</string>
          <string>this.Bits = args.ValueSize;</string>
        </entry>
      </elementAttributes>
      <pos x="1160" y="940"/>
    </visualElement>
    <visualElement>
      <elementName>GenericInitCode</elementName>
      <elementAttributes>
        <entry>
          <string>generic</string>
          <string>Bits := 4;
RegPtrSize := 3;
ValueSize := 16;</string>
        </entry>
      </elementAttributes>
      <pos x="860" y="660"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>reg_in</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>16</int>
        </entry>
        <entry>
          <string>generic</string>
          <string>this.Bits = args.ValueSize;</string>
        </entry>
      </elementAttributes>
      <pos x="760" y="960"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>reg_ptr</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>3</int>
        </entry>
        <entry>
          <string>generic</string>
          <string>this.Bits = args.RegPtrSize;</string>
        </entry>
      </elementAttributes>
      <pos x="1220" y="880"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>4-bit, 3 bit registers</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>value_in  enable  reg_in  reg_ptr  value_out
0b0000    1       Z       x        0b000
0b0001    1       Z       x        0b001
0b0001    1       Z       x        0b001
0b0111    1       Z       x        0b111

0b1000    1       0x1245  0b000    0x1245
0b1001    1       0xABCD  0b001    0xABCD
0b1110    1       0xF0C5  0b110    0xF0C5



0b0000    0       Z       Z        x
0b0001    0       Z       Z        x
0b0001    0       Z       Z        x
0b0111    0       Z       Z        x

0b1000    0       0x1245  Z        x
0b1001    0       0xABCD  Z        x
0b1110    0       0xF0C5  Z        x
</dataString>
          </testData>
        </entry>
        <entry>
          <string>generic</string>
          <string>Bits := 4;
RegPtrSize := 3;
ValueSize := 16;</string>
        </entry>
      </elementAttributes>
      <pos x="680" y="660"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>16</int>
        </entry>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>generic</string>
          <string>this.Bits = args.ValueSize;</string>
        </entry>
      </elementAttributes>
      <pos x="1020" y="920"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>mirror</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>4</string>
        </entry>
        <entry>
          <string>generic</string>
          <string>this.&apos;Output Splitting&apos; = (args.Bits - 1) + &quot;,1&quot;;
this.&apos;Input Splitting&apos; = &quot;&quot; + (args.Bits);</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>3,1</string>
        </entry>
      </elementAttributes>
      <pos x="860" y="920"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>3,13</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>16</string>
        </entry>
        <entry>
          <string>generic</string>
          <string>this.&apos;Output Splitting&apos; = &quot;&quot; + args.ValueSize;
this.&apos;Input Splitting&apos; = args.Bits - 1 + &quot;,&quot; + (args.ValueSize - (args.Bits - 1));</string>
        </entry>
      </elementAttributes>
      <pos x="960" y="920"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>13</int>
        </entry>
        <entry>
          <string>generic</string>
          <string>this.&apos;Bits&apos; = args.ValueSize - (args.Bits - 1);</string>
        </entry>
      </elementAttributes>
      <pos x="920" y="940"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>5-bit, 3 bit registers</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>value_in  enable  reg_in  reg_ptr  value_out
0b00000   1       Z       x        0b0000
0b00001   1       Z       x        0b0001
0b00001   1       Z       x        0b0001
0b01111   1       Z       x        0b1111

0b10000   1       0x1245  0b000    0x1245
0b10001   1       0xABCD  0b001    0xABCD
0b10110   1       0xF0C5  0b110    0xF0C5
0b11110   1       0xF0C5  0b110    0xF0C5



0b00000   0       Z       x        x
0b00001   0       Z       x        x
0b00001   0       Z       x        x
0b01111   0       Z       x        x

0b10000   0       0x1245  Z        x
0b10001   0       0xABCD  Z        x
0b10110   0       0xF0C5  Z        x
0b11110   0       0xF0C5  Z        x
</dataString>
          </testData>
        </entry>
        <entry>
          <string>generic</string>
          <string>Bits := 5;
RegPtrSize := 3;
ValueSize := 16;</string>
        </entry>
      </elementAttributes>
      <pos x="680" y="740"/>
    </visualElement>
    <visualElement>
      <elementName>Testcase</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>5-bit, 4 bit registers</string>
        </entry>
        <entry>
          <string>Testdata</string>
          <testData>
            <dataString>value_in   enable  reg_in  reg_ptr  value_out
0b00000    1       Z       x        0b0000
0b00001    1       Z       x        0b0001
0b00001    1       Z       x        0b0001
0b01111    1       Z       x        0b1111

0b10000    1       0x1245  0b0000   0x1245
0b10001    1       0xABCD  0b0001   0xABCD
0b11110    1       0xF0C5  0b1110   0xF0C5



0b00000    0       Z       x        x
0b00001    0       Z       x        x
0b00001    0       Z       x        x
0b01111    0       Z       x        x

0b10000    0       0x1245  Z        x
0b10001    0       0xABCD  Z        x
0b11110    0       0xF0C5  Z        x

</dataString>
          </testData>
        </entry>
        <entry>
          <string>generic</string>
          <string>Bits := 5;
RegPtrSize := 4;
ValueSize := 16;</string>
        </entry>
      </elementAttributes>
      <pos x="680" y="820"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>4</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>3,</string>
        </entry>
        <entry>
          <string>generic</string>
          <string>ptrBits := args.Bits - 1;

this.&apos;Input Splitting&apos; = &quot;&quot; + ptrBits;

if (ptrBits &gt; args.RegPtrSize) {
	extraCount := ptrBits - args.RegPtrSize;
	this.&apos;Output Splitting&apos; = &quot;&quot; + (ptrBits - extraCount) + &quot;,&quot; + extraCount;
} else {
	this.&apos;Output Splitting&apos; = &quot;&quot; + ptrBits;
}</string>
        </entry>
      </elementAttributes>
      <pos x="1080" y="880"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>generic</string>
          <string>ptrBits := args.Bits - 1;
extraCount := ptrBits - args.RegPtrSize;

if (args.RegPtrSize != ptrBits) {
	this.&apos;Description&apos; = &quot;&quot; + args.RegPtrSize + &quot; != &quot; + ptrBits;
} else {
	this.&apos;Description&apos; = &quot;&quot; + args.RegPtrSize + &quot; == &quot; + ptrBits;
}</string>
        </entry>
      </elementAttributes>
      <pos x="1040" y="700"/>
    </visualElement>
    <visualElement>
      <elementName>Driver</elementName>
      <elementAttributes>
        <entry>
          <string>generic</string>
          <string>this.Bits = args.RegPtrSize;</string>
        </entry>
      </elementAttributes>
      <pos x="1160" y="880"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>enable</string>
        </entry>
      </elementAttributes>
      <pos x="1120" y="820"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>16</string>
        </entry>
        <entry>
          <string>mirror</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>4,12</string>
        </entry>
        <entry>
          <string>generic</string>
          <string>this.&apos;Output Splitting&apos; = &quot;&quot; + args.Bits + &quot;,&quot; + (16 - args.Bits);</string>
        </entry>
      </elementAttributes>
      <pos x="800" y="920"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="760" y="960"/>
      <p2 x="1020" y="960"/>
    </wire>
    <wire>
      <p1 x="940" y="880"/>
      <p2 x="1080" y="880"/>
    </wire>
    <wire>
      <p1 x="1100" y="880"/>
      <p2 x="1140" y="880"/>
    </wire>
    <wire>
      <p1 x="1180" y="880"/>
      <p2 x="1220" y="880"/>
    </wire>
    <wire>
      <p1 x="880" y="900"/>
      <p2 x="1040" y="900"/>
    </wire>
    <wire>
      <p1 x="1120" y="820"/>
      <p2 x="1160" y="820"/>
    </wire>
    <wire>
      <p1 x="980" y="920"/>
      <p2 x="1020" y="920"/>
    </wire>
    <wire>
      <p1 x="880" y="920"/>
      <p2 x="940" y="920"/>
    </wire>
    <wire>
      <p1 x="820" y="920"/>
      <p2 x="860" y="920"/>
    </wire>
    <wire>
      <p1 x="760" y="920"/>
      <p2 x="800" y="920"/>
    </wire>
    <wire>
      <p1 x="940" y="920"/>
      <p2 x="960" y="920"/>
    </wire>
    <wire>
      <p1 x="920" y="940"/>
      <p2 x="960" y="940"/>
    </wire>
    <wire>
      <p1 x="1060" y="940"/>
      <p2 x="1160" y="940"/>
    </wire>
    <wire>
      <p1 x="1040" y="900"/>
      <p2 x="1040" y="920"/>
    </wire>
    <wire>
      <p1 x="1160" y="820"/>
      <p2 x="1160" y="860"/>
    </wire>
    <wire>
      <p1 x="940" y="880"/>
      <p2 x="940" y="920"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>