pa2 (procassembly v2) is a lot like x86 assembly. Every instruction is specified by its name, and any number of arguments, on a single line.

A working parser and assembler written in C# is in the tools directory.


# instruction names (mnemonic)
The list of available instructions for each instruction set is in the "doc/instruction sets" folder. there are also a few assembler commands, which do not correspond to a machine code instruction, and are executed by the assembler at compile time. these have their name prefixed with a dot (.)

Supported assembler commands are:
- `.const symbol, constant` - this defines a symbol that expands to a constant
- `.reg symbol, register` - this defines a symbol that expands to a register

# parameter types
There are 4 types of parameter:
- Register, prefixed with %
- Star register, prefixed with * - this is only used in proc16a
- Constant, prefixed with $ - the constants themselves can be decimal, binary (0b prefix) or hexadecimal (0x prefix)
- Symbol, no prefix - this expands to a different parameter type, see below


# symbols
Symbols are words that are defined within the assembly program. when an instruction is converted into machine code, any symbols in its parameters are converted to their defined value.

a symbol can be defined by an assembler command (which will only be usable in code following the command), or by a jump label (which are usable anywhere in the program, and they expand to a constant value equal to the index of the next machine code instruction in the program).


# macros
macros include instructions from another file into the program. it looks like this:
```
@push_reg %b
@push_value $0x12
@add
```

push_reg.pa2 is searched for in directories specified on the command-line. this file is parsed as pa2 and then included in the assembly process. any parameters it gets are defined as symbols named "macro0", "macro1" etc. It makes sense to alias these symbols with better names:

```
.reg registerToPush, macro0
```

Any other symbols defined in the outer program are not accessible to the macro, and symbols defined in a macro are not exported to the outer program. Label symbols are likewise not cross-available. Symbols can be used as parameters, however, in which case the argument symbol will get its value. 
