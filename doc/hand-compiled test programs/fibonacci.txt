# Fill RAM addresses with the fibonacci sequence.
# Additionally, output the last fibonacci number to a fixed address (0x3FFF).
# Tests addition, subtraction, reading and writing from RAM, data words, jumping unconditionally.

# initialize fib[0]
A = 1		# data 0x0001                     ; 0b0000 0000 0000 0001   ; 0x0001
*A = 1		# ALU x=1  y=0  op=add   write=*A ; 0b100 0 10 01 00000 100 ; 0x8904

# fib[1]
A = A + 1	# ALU x=A  y=1  op=add   write=A  ; 0b100 0 00 10 00000 001 ; 0x8201
*A = 1		# ALU x=1  y=0  op=add   write=*A ; 0b100 0 10 01 00000 100 ; 0x8904

# lastFibPtr = 0
# *lastFibPtr = &fib[1]
B = A		# ALU x=A  y=0  op=add   write=B  ; 0b100 0 00 01 00000 010 ; 0x8102
A = 0		# data 0x0000                     ; 0b0000 0000 0000 0000   ; 0x0000
*A = B		# ALU x=B  y=0  op=add   write=*A ; 0b100 1 00 01 00000 100 ; 0x9104

computeNext: #                                ; label 0x0007
# A = &&fib[last]
A = 0		# data 0x0000                     ; 0b0000 0000 0000 0000   ; 0x0000

# A = &fib[last]
A = *A		# ALU x=*A y=0  op=add   write=A  ; 0b100 0 11 01 00000 001 ; 0x8D01

# D = fib[last]
B = *A		# ALU x=*A y=0  op=add   write=B  ; 0b100 0 11 01 00000 010 ; 0x8D02

# A = &fib[last - 1]
A = A - 1	# ALU x=A  y=1  op=sub   write=A  ; 0b100 0 00 10 00001 001 ; 0x8209

# A = fib[last - 1]
A = *A		# ALU x=*A y=0  op=add   write=A  ; 0b100 0 11 01 00000 001 ; 0x8D01

# B = fib[last - 1] + fib[last]
# B = fib[next]
B = A + B	# ALU x=A  y=B  op=add   write=B  ; 0b100 0 00 00 00000 010 ; 0x8002

# A = &&fib[last]
A = 0		# data 0x0000                     ; 0b0000 0000 0000 0000   ; 0x0000
# A = &fib[last]
A = *A		# ALU x=*A y=0  op=add   write=A  ; 0b100 0 11 01 00000 001 ; 0x8D01
# A = &fib[next]
A = A + 1	# ALU x=A  y=1  op=add   write=A  ; 0b100 0 00 10 00000 001 ; 0x8201

# Save fib[next] to memory
*A = B		# ALU x=B  y=0  op=add   write=*A ; 0b100 1 00 01 00000 100 ; 0x9104

# Update pointer
A = 0		# data 0x0000                     ; 0b0000 0000 0000 0000   ; 0x0000
*A = *A + 1	# ALU x=*A b=1  op=add   write=*A ; 0b100 0 11 10 00000 100 ; 0x8E04

# Output fib[last] to *(0x3FFF)
A = 0x3FFF
*A = B
 
A = computeNext # data 0x0007                 ; 0b0000 0000 0000 0111   ; 0x0007
true JMP A  # JMP x=B op=true to=A            ; 0b10100 0000000 1 111   ; 0xA00F
